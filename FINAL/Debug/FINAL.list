
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e46c0  0800de30  0800de30  0001de30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f24f0  080f24f0  00110120  2**0
                  CONTENTS
  4 .ARM          00000008  080f24f0  080f24f0  001024f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080f24f8  080f24f8  00110120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f24f8  080f24f8  001024f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f24fc  080f24fc  001024fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  080f2500  00110000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00110120  2**0
                  CONTENTS
 10 .bss          0000087c  20000120  20000120  00110120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000099c  2000099c  00110120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00110120  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00110150  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bf35  00000000  00000000  00110193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cde  00000000  00000000  0012c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a88  00000000  00000000  00130da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001441  00000000  00000000  00132830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028f16  00000000  00000000  00133c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002834f  00000000  00000000  0015cb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e24e7  00000000  00000000  00184ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007964  00000000  00000000  002673c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0026ed24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de14 	.word	0x0800de14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0800de14 	.word	0x0800de14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f86:	4b3d      	ldr	r3, [pc, #244]	; (800107c <MX_ADC1_Init+0x108>)
 8000f88:	4a3d      	ldr	r2, [pc, #244]	; (8001080 <MX_ADC1_Init+0x10c>)
 8000f8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f8c:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_ADC1_Init+0x108>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	; (800107c <MX_ADC1_Init+0x108>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <MX_ADC1_Init+0x108>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_ADC1_Init+0x108>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b35      	ldr	r3, [pc, #212]	; (800107c <MX_ADC1_Init+0x108>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <MX_ADC1_Init+0x108>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <MX_ADC1_Init+0x108>)
 8000fb4:	4a33      	ldr	r2, [pc, #204]	; (8001084 <MX_ADC1_Init+0x110>)
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_ADC1_Init+0x108>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_ADC1_Init+0x108>)
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_ADC1_Init+0x108>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <MX_ADC1_Init+0x108>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd2:	482a      	ldr	r0, [pc, #168]	; (800107c <MX_ADC1_Init+0x108>)
 8000fd4:	f005 f92c 	bl	8006230 <HAL_ADC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fde:	f003 f90d 	bl	80041fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4822      	ldr	r0, [pc, #136]	; (800107c <MX_ADC1_Init+0x108>)
 8000ff4:	f005 fa8e 	bl	8006514 <HAL_ADC_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ffe:	f003 f8fd 	bl	80041fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001002:	2309      	movs	r3, #9
 8001004:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	481b      	ldr	r0, [pc, #108]	; (800107c <MX_ADC1_Init+0x108>)
 8001010:	f005 fa80 	bl	8006514 <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800101a:	f003 f8ef 	bl	80041fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800101e:	230a      	movs	r3, #10
 8001020:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001022:	2303      	movs	r3, #3
 8001024:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_ADC1_Init+0x108>)
 800102c:	f005 fa72 	bl	8006514 <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001036:	f003 f8e1 	bl	80041fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800103a:	230b      	movs	r3, #11
 800103c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800103e:	2304      	movs	r3, #4
 8001040:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001042:	463b      	mov	r3, r7
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_ADC1_Init+0x108>)
 8001048:	f005 fa64 	bl	8006514 <HAL_ADC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001052:	f003 f8d3 	bl	80041fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001056:	230c      	movs	r3, #12
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800105a:	2305      	movs	r3, #5
 800105c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_ADC1_Init+0x108>)
 8001064:	f005 fa56 	bl	8006514 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800106e:	f003 f8c5 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000013c 	.word	0x2000013c
 8001080:	40012000 	.word	0x40012000
 8001084:	0f000001 	.word	0x0f000001

08001088 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	at24c_Check();
 800108c:	f000 f83c 	bl	8001108 <at24c_Check>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010a2:	88fa      	ldrh	r2, [r7, #6]
 80010a4:	230a      	movs	r3, #10
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	f107 030f 	add.w	r3, r7, #15
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2310      	movs	r3, #16
 80010b4:	21a0      	movs	r1, #160	; 0xa0
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <at24c_ReadOneByte+0x34>)
 80010b8:	f006 fe06 	bl	8007cc8 <HAL_I2C_Mem_Read>
	return temp;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200005ac 	.word	0x200005ac

080010cc <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af04      	add	r7, sp, #16
 80010d2:	4603      	mov	r3, r0
 80010d4:	460a      	mov	r2, r1
 80010d6:	80fb      	strh	r3, [r7, #6]
 80010d8:	4613      	mov	r3, r2
 80010da:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	230a      	movs	r3, #10
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	1d7b      	adds	r3, r7, #5
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2310      	movs	r3, #16
 80010ec:	21a0      	movs	r1, #160	; 0xa0
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <at24c_WriteOneByte+0x38>)
 80010f0:	f006 fcf0 	bl	8007ad4 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80010f4:	2005      	movs	r0, #5
 80010f6:	f005 f877 	bl	80061e8 <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200005ac 	.word	0x200005ac

08001108 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800110e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001112:	f7ff ffbf 	bl	8001094 <at24c_ReadOneByte>
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b55      	cmp	r3, #85	; 0x55
 800111e:	d101      	bne.n	8001124 <at24c_Check+0x1c>
 8001120:	2300      	movs	r3, #0
 8001122:	e010      	b.n	8001146 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001124:	2155      	movs	r1, #85	; 0x55
 8001126:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800112a:	f7ff ffcf 	bl	80010cc <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800112e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001132:	f7ff ffaf 	bl	8001094 <at24c_ReadOneByte>
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b55      	cmp	r3, #85	; 0x55
 800113e:	d101      	bne.n	8001144 <at24c_Check+0x3c>
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <at24c_Check+0x3e>
	}
	return 1;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800114e:	b590      	push	{r4, r7, lr}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	6039      	str	r1, [r7, #0]
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4613      	mov	r3, r2
 800115c:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800115e:	e00d      	b.n	800117c <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	80fa      	strh	r2, [r7, #6]
 8001166:	683c      	ldr	r4, [r7, #0]
 8001168:	1c62      	adds	r2, r4, #1
 800116a:	603a      	str	r2, [r7, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff91 	bl	8001094 <at24c_ReadOneByte>
 8001172:	4603      	mov	r3, r0
 8001174:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	3b01      	subs	r3, #1
 800117a:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1ee      	bne.n	8001160 <at24c_Read+0x12>
	}
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bd90      	pop	{r4, r7, pc}

0800118c <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	80fb      	strh	r3, [r7, #6]
 8001198:	4613      	mov	r3, r2
 800119a:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 800119c:	e00c      	b.n	80011b8 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff90 	bl	80010cc <at24c_WriteOneByte>
		WriteAddr++;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	3301      	adds	r3, #1
 80011b0:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	1e5a      	subs	r2, r3, #1
 80011bc:	80ba      	strh	r2, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1ed      	bne.n	800119e <at24c_Write+0x12>
	}
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2108      	movs	r1, #8
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <button_init+0x14>)
 80011d6:	f006 fb05 	bl	80077e4 <HAL_GPIO_WritePin>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020c00 	.word	0x40020c00

080011e4 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2108      	movs	r1, #8
 80011ee:	482f      	ldr	r0, [pc, #188]	; (80012ac <button_Scan+0xc8>)
 80011f0:	f006 faf8 	bl	80077e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2108      	movs	r1, #8
 80011f8:	482c      	ldr	r0, [pc, #176]	; (80012ac <button_Scan+0xc8>)
 80011fa:	f006 faf3 	bl	80077e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80011fe:	230a      	movs	r3, #10
 8001200:	2202      	movs	r2, #2
 8001202:	492b      	ldr	r1, [pc, #172]	; (80012b0 <button_Scan+0xcc>)
 8001204:	482b      	ldr	r0, [pc, #172]	; (80012b4 <button_Scan+0xd0>)
 8001206:	f008 f93e 	bl	8009486 <HAL_SPI_Receive>
	  int button_index = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800120e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001212:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	e03f      	b.n	800129a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db06      	blt.n	800122e <button_Scan+0x4a>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b03      	cmp	r3, #3
 8001224:	dc03      	bgt.n	800122e <button_Scan+0x4a>
			  button_index = i + 4;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3304      	adds	r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	e018      	b.n	8001260 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b03      	cmp	r3, #3
 8001232:	dd07      	ble.n	8001244 <button_Scan+0x60>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b07      	cmp	r3, #7
 8001238:	dc04      	bgt.n	8001244 <button_Scan+0x60>
			  button_index = 7 - i;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f1c3 0307 	rsb	r3, r3, #7
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e00d      	b.n	8001260 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b07      	cmp	r3, #7
 8001248:	dd06      	ble.n	8001258 <button_Scan+0x74>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0b      	cmp	r3, #11
 800124e:	dc03      	bgt.n	8001258 <button_Scan+0x74>
			  button_index = i + 4;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3304      	adds	r3, #4
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e003      	b.n	8001260 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1c3 0317 	rsb	r3, r3, #23
 800125e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <button_Scan+0xcc>)
 8001262:	881a      	ldrh	r2, [r3, #0]
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	4013      	ands	r3, r2
 8001268:	b29b      	uxth	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <button_Scan+0x96>
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <button_Scan+0xd4>)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2100      	movs	r1, #0
 8001274:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001278:	e009      	b.n	800128e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <button_Scan+0xd4>)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001282:	3301      	adds	r3, #1
 8001284:	b299      	uxth	r1, r3
 8001286:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <button_Scan+0xd4>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3301      	adds	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	ddbc      	ble.n	800121a <button_Scan+0x36>
	  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	200001a4 	.word	0x200001a4
 80012b4:	20000688 	.word	0x20000688
 80012b8:	20000184 	.word	0x20000184

080012bc <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_DMA_Init+0x3c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <MX_DMA_Init+0x3c>)
 80012cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_DMA_Init+0x3c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2038      	movs	r0, #56	; 0x38
 80012e4:	f005 fc91 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012e8:	2038      	movs	r0, #56	; 0x38
 80012ea:	f005 fcaa 	bl	8006c42 <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <clr_confirm>:

uint32_t counter = 0;

uint8_t confirm[4] = {0, 0, 0, 0};

void clr_confirm(){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	e007      	b.n	8001318 <clr_confirm+0x1c>
		confirm[i] = 0;
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <clr_confirm+0x30>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b03      	cmp	r3, #3
 800131c:	ddf4      	ble.n	8001308 <clr_confirm+0xc>
	}
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	200001ac 	.word	0x200001ac

08001330 <temp_game>:

void temp_game(){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	tempFlag = 1;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <temp_game+0x24>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]
	tempStatus = status;
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <temp_game+0x28>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <temp_game+0x2c>)
 8001340:	6013      	str	r3, [r2, #0]
	tempMove = move;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <temp_game+0x30>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <temp_game+0x34>)
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000280 	.word	0x20000280
 8001358:	20000270 	.word	0x20000270
 800135c:	20000284 	.word	0x20000284
 8001360:	20000274 	.word	0x20000274
 8001364:	20000288 	.word	0x20000288

08001368 <continue_game>:

void continue_game(){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if(tempFlag == 1){
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <continue_game+0x34>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d110      	bne.n	8001396 <continue_game+0x2e>
		status = tempStatus;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <continue_game+0x38>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <continue_game+0x3c>)
 800137a:	6013      	str	r3, [r2, #0]
		move = tempMove;
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <continue_game+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <continue_game+0x44>)
 8001382:	6013      	str	r3, [r2, #0]
		reDraw_snake();
 8001384:	f003 f942 	bl	800460c <reDraw_snake>
		point_food_lcd(food);
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <continue_game+0x48>)
 800138a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800138e:	f001 fe20 	bl	8002fd2 <point_food_lcd>
		score_lcd();
 8001392:	f001 fa23 	bl	80027dc <score_lcd>
	}
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000280 	.word	0x20000280
 80013a0:	20000284 	.word	0x20000284
 80013a4:	20000270 	.word	0x20000270
 80013a8:	20000288 	.word	0x20000288
 80013ac:	20000274 	.word	0x20000274
 80013b0:	20000010 	.word	0x20000010

080013b4 <input_inGame>:

void input_inGame(){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	if((is_touch_right() == 1 || button_count[6] == 1) && move != LEFT){
 80013b8:	f000 fc52 	bl	8001c60 <is_touch_right>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d003      	beq.n	80013ca <input_inGame+0x16>
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <input_inGame+0xb8>)
 80013c4:	899b      	ldrh	r3, [r3, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <input_inGame+0x26>
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <input_inGame+0xbc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d003      	beq.n	80013da <input_inGame+0x26>
		move = RIGHT;
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <input_inGame+0xbc>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e046      	b.n	8001468 <input_inGame+0xb4>
	}else if((is_touch_left() == 1 || button_count[4] == 1) && move != RIGHT){
 80013da:	f000 fc65 	bl	8001ca8 <is_touch_left>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d003      	beq.n	80013ec <input_inGame+0x38>
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <input_inGame+0xb8>)
 80013e6:	891b      	ldrh	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d107      	bne.n	80013fc <input_inGame+0x48>
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <input_inGame+0xbc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d003      	beq.n	80013fc <input_inGame+0x48>
		move = LEFT;
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <input_inGame+0xbc>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e035      	b.n	8001468 <input_inGame+0xb4>
	}else if((is_touch_up() == 1 || button_count[1] == 1) && move != DOWN){
 80013fc:	f000 fc78 	bl	8001cf0 <is_touch_up>
 8001400:	4603      	mov	r3, r0
 8001402:	2b01      	cmp	r3, #1
 8001404:	d003      	beq.n	800140e <input_inGame+0x5a>
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <input_inGame+0xb8>)
 8001408:	885b      	ldrh	r3, [r3, #2]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <input_inGame+0x6a>
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <input_inGame+0xbc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d003      	beq.n	800141e <input_inGame+0x6a>
		move = UP;
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <input_inGame+0xbc>)
 8001418:	2203      	movs	r2, #3
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e024      	b.n	8001468 <input_inGame+0xb4>
	}else if((is_touch_down() == 1 || button_count[9] == 1) && move != UP){
 800141e:	f000 fc89 	bl	8001d34 <is_touch_down>
 8001422:	4603      	mov	r3, r0
 8001424:	2b01      	cmp	r3, #1
 8001426:	d003      	beq.n	8001430 <input_inGame+0x7c>
 8001428:	4b10      	ldr	r3, [pc, #64]	; (800146c <input_inGame+0xb8>)
 800142a:	8a5b      	ldrh	r3, [r3, #18]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <input_inGame+0x8c>
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <input_inGame+0xbc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d003      	beq.n	8001440 <input_inGame+0x8c>
		move = DOWN;
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <input_inGame+0xbc>)
 800143a:	2204      	movs	r2, #4
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e013      	b.n	8001468 <input_inGame+0xb4>
	}else if(is_touch_pause() == 1 || button_count[5] == 1){
 8001440:	f000 fd03 	bl	8001e4a <is_touch_pause>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d003      	beq.n	8001452 <input_inGame+0x9e>
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <input_inGame+0xb8>)
 800144c:	895b      	ldrh	r3, [r3, #10]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d10a      	bne.n	8001468 <input_inGame+0xb4>
		temp_game();
 8001452:	f7ff ff6d 	bl	8001330 <temp_game>
		status = PAUSE;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <input_inGame+0xc0>)
 8001458:	220f      	movs	r2, #15
 800145a:	601a      	str	r2, [r3, #0]
		move = NOT;
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <input_inGame+0xbc>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
		pause_lcd();
 8001462:	f001 f9d3 	bl	800280c <pause_lcd>
	}
}
 8001466:	e7ff      	b.n	8001468 <input_inGame+0xb4>
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000184 	.word	0x20000184
 8001470:	20000274 	.word	0x20000274
 8001474:	20000270 	.word	0x20000270

08001478 <input_process>:

void input_process(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	switch(status){
 800147c:	4bb1      	ldr	r3, [pc, #708]	; (8001744 <input_process+0x2cc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b12      	cmp	r3, #18
 8001482:	f200 81a9 	bhi.w	80017d8 <input_process+0x360>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <input_process+0x14>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	080014d9 	.word	0x080014d9
 8001490:	08001595 	.word	0x08001595
 8001494:	080017d9 	.word	0x080017d9
 8001498:	08001695 	.word	0x08001695
 800149c:	080017d9 	.word	0x080017d9
 80014a0:	080017d9 	.word	0x080017d9
 80014a4:	080017d9 	.word	0x080017d9
 80014a8:	080017d9 	.word	0x080017d9
 80014ac:	080017d9 	.word	0x080017d9
 80014b0:	080017d9 	.word	0x080017d9
 80014b4:	080017d9 	.word	0x080017d9
 80014b8:	080016b5 	.word	0x080016b5
 80014bc:	080016bb 	.word	0x080016bb
 80014c0:	080016c1 	.word	0x080016c1
 80014c4:	080017d9 	.word	0x080017d9
 80014c8:	08001761 	.word	0x08001761
 80014cc:	080016c7 	.word	0x080016c7
 80014d0:	080016eb 	.word	0x080016eb
 80014d4:	0800170d 	.word	0x0800170d
		case HOME:
			if(is_touch_newGame() == 1 || button_count[3] == 1){
 80014d8:	f000 fcdb 	bl	8001e92 <is_touch_newGame>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d003      	beq.n	80014ea <input_process+0x72>
 80014e2:	4b99      	ldr	r3, [pc, #612]	; (8001748 <input_process+0x2d0>)
 80014e4:	88db      	ldrh	r3, [r3, #6]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d115      	bne.n	8001516 <input_process+0x9e>
				if(confirm[1] == 1){
 80014ea:	4b98      	ldr	r3, [pc, #608]	; (800174c <input_process+0x2d4>)
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d109      	bne.n	8001506 <input_process+0x8e>
					clr_confirm();
 80014f2:	f7ff ff03 	bl	80012fc <clr_confirm>
					status = MODE;
 80014f6:	4b93      	ldr	r3, [pc, #588]	; (8001744 <input_process+0x2cc>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
					snake_init();
 80014fc:	f002 fed6 	bl	80042ac <snake_init>
					mode_game_lcd();
 8001500:	f000 ff48 	bl	8002394 <mode_game_lcd>
				if(confirm[1] == 1){
 8001504:	e045      	b.n	8001592 <input_process+0x11a>
				}else{
					clr_confirm();
 8001506:	f7ff fef9 	bl	80012fc <clr_confirm>
					confirm[1] = 1;
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <input_process+0x2d4>)
 800150c:	2201      	movs	r2, #1
 800150e:	705a      	strb	r2, [r3, #1]
					home_second_lcd();
 8001510:	f001 fbf2 	bl	8002cf8 <home_second_lcd>
				if(confirm[1] == 1){
 8001514:	e03d      	b.n	8001592 <input_process+0x11a>
				}
			}else if(is_touch_continue() == 1 || button_count[7] == 1){
 8001516:	f000 fcde 	bl	8001ed6 <is_touch_continue>
 800151a:	4603      	mov	r3, r0
 800151c:	2b01      	cmp	r3, #1
 800151e:	d003      	beq.n	8001528 <input_process+0xb0>
 8001520:	4b89      	ldr	r3, [pc, #548]	; (8001748 <input_process+0x2d0>)
 8001522:	89db      	ldrh	r3, [r3, #14]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d116      	bne.n	8001556 <input_process+0xde>
				if(confirm[2] == 1 && tempFlag == 1){
 8001528:	4b88      	ldr	r3, [pc, #544]	; (800174c <input_process+0x2d4>)
 800152a:	789b      	ldrb	r3, [r3, #2]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10a      	bne.n	8001546 <input_process+0xce>
 8001530:	4b87      	ldr	r3, [pc, #540]	; (8001750 <input_process+0x2d8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d106      	bne.n	8001546 <input_process+0xce>
					clr_confirm();
 8001538:	f7ff fee0 	bl	80012fc <clr_confirm>
					game_lcd();
 800153c:	f001 f864 	bl	8002608 <game_lcd>
					continue_game();
 8001540:	f7ff ff12 	bl	8001368 <continue_game>
				if(confirm[2] == 1 && tempFlag == 1){
 8001544:	e025      	b.n	8001592 <input_process+0x11a>
				}else{
					clr_confirm();
 8001546:	f7ff fed9 	bl	80012fc <clr_confirm>
					confirm[2] = 1;
 800154a:	4b80      	ldr	r3, [pc, #512]	; (800174c <input_process+0x2d4>)
 800154c:	2201      	movs	r2, #1
 800154e:	709a      	strb	r2, [r3, #2]
					home_third_lcd();
 8001550:	f001 fbea 	bl	8002d28 <home_third_lcd>
				if(confirm[2] == 1 && tempFlag == 1){
 8001554:	e01d      	b.n	8001592 <input_process+0x11a>
				}
			}else if(is_touch_highScore() == 1 || button_count[11] == 1){
 8001556:	f000 fce0 	bl	8001f1a <is_touch_highScore>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d004      	beq.n	800156a <input_process+0xf2>
 8001560:	4b79      	ldr	r3, [pc, #484]	; (8001748 <input_process+0x2d0>)
 8001562:	8adb      	ldrh	r3, [r3, #22]
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 8139 	bne.w	80017dc <input_process+0x364>
				if(confirm[3] == 1){
 800156a:	4b78      	ldr	r3, [pc, #480]	; (800174c <input_process+0x2d4>)
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <input_process+0x10a>
					clr_confirm();
 8001572:	f7ff fec3 	bl	80012fc <clr_confirm>
					status = HIGHSCORE;
 8001576:	4b73      	ldr	r3, [pc, #460]	; (8001744 <input_process+0x2cc>)
 8001578:	2203      	movs	r2, #3
 800157a:	601a      	str	r2, [r3, #0]
					highscore_lcd();
 800157c:	f000 ff78 	bl	8002470 <highscore_lcd>
					clr_confirm();
					confirm[3] = 1;
					home_forth_lcd();
				}
			}
			break;
 8001580:	e12c      	b.n	80017dc <input_process+0x364>
					clr_confirm();
 8001582:	f7ff febb 	bl	80012fc <clr_confirm>
					confirm[3] = 1;
 8001586:	4b71      	ldr	r3, [pc, #452]	; (800174c <input_process+0x2d4>)
 8001588:	2201      	movs	r2, #1
 800158a:	70da      	strb	r2, [r3, #3]
					home_forth_lcd();
 800158c:	f001 fbe4 	bl	8002d58 <home_forth_lcd>
			break;
 8001590:	e124      	b.n	80017dc <input_process+0x364>
 8001592:	e123      	b.n	80017dc <input_process+0x364>
		case MODE:
			if(is_touch_classic() == 1 || button_count[3] == 1){
 8001594:	f000 fce4 	bl	8001f60 <is_touch_classic>
 8001598:	4603      	mov	r3, r0
 800159a:	2b01      	cmp	r3, #1
 800159c:	d003      	beq.n	80015a6 <input_process+0x12e>
 800159e:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <input_process+0x2d0>)
 80015a0:	88db      	ldrh	r3, [r3, #6]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d116      	bne.n	80015d4 <input_process+0x15c>
				if(confirm[0] == 1){
 80015a6:	4b69      	ldr	r3, [pc, #420]	; (800174c <input_process+0x2d4>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d10a      	bne.n	80015c4 <input_process+0x14c>
					clr_confirm();
 80015ae:	f7ff fea5 	bl	80012fc <clr_confirm>
					tempStatus = CLASSIC;
 80015b2:	4b68      	ldr	r3, [pc, #416]	; (8001754 <input_process+0x2dc>)
 80015b4:	220b      	movs	r2, #11
 80015b6:	601a      	str	r2, [r3, #0]
					status = NAME;
 80015b8:	4b62      	ldr	r3, [pc, #392]	; (8001744 <input_process+0x2cc>)
 80015ba:	2212      	movs	r2, #18
 80015bc:	601a      	str	r2, [r3, #0]
					entername_lcd();
 80015be:	f001 fae9 	bl	8002b94 <entername_lcd>
				if(confirm[0] == 1){
 80015c2:	e049      	b.n	8001658 <input_process+0x1e0>
				}else{
					clr_confirm();
 80015c4:	f7ff fe9a 	bl	80012fc <clr_confirm>
					confirm[0] = 1;
 80015c8:	4b60      	ldr	r3, [pc, #384]	; (800174c <input_process+0x2d4>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
					mode_first_lcd();
 80015ce:	f001 fbdd 	bl	8002d8c <mode_first_lcd>
				if(confirm[0] == 1){
 80015d2:	e041      	b.n	8001658 <input_process+0x1e0>
				}
			}else if(is_touch_speed() == 1 || button_count[7] == 1){
 80015d4:	f000 fce6 	bl	8001fa4 <is_touch_speed>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d003      	beq.n	80015e6 <input_process+0x16e>
 80015de:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <input_process+0x2d0>)
 80015e0:	89db      	ldrh	r3, [r3, #14]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d116      	bne.n	8001614 <input_process+0x19c>
				if(confirm[1] == 1){
 80015e6:	4b59      	ldr	r3, [pc, #356]	; (800174c <input_process+0x2d4>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10a      	bne.n	8001604 <input_process+0x18c>
					clr_confirm();
 80015ee:	f7ff fe85 	bl	80012fc <clr_confirm>
					tempStatus = SPEED;
 80015f2:	4b58      	ldr	r3, [pc, #352]	; (8001754 <input_process+0x2dc>)
 80015f4:	220c      	movs	r2, #12
 80015f6:	601a      	str	r2, [r3, #0]
					status = NAME;
 80015f8:	4b52      	ldr	r3, [pc, #328]	; (8001744 <input_process+0x2cc>)
 80015fa:	2212      	movs	r2, #18
 80015fc:	601a      	str	r2, [r3, #0]
					entername_lcd();
 80015fe:	f001 fac9 	bl	8002b94 <entername_lcd>
				if(confirm[1] == 1){
 8001602:	e029      	b.n	8001658 <input_process+0x1e0>
				}else{
					clr_confirm();
 8001604:	f7ff fe7a 	bl	80012fc <clr_confirm>
					confirm[1] = 1;
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <input_process+0x2d4>)
 800160a:	2201      	movs	r2, #1
 800160c:	705a      	strb	r2, [r3, #1]
					mode_second_lcd();
 800160e:	f001 fbd5 	bl	8002dbc <mode_second_lcd>
				if(confirm[1] == 1){
 8001612:	e021      	b.n	8001658 <input_process+0x1e0>
				}
			}else if(is_touch_time() == 1 || button_count[11] == 1){
 8001614:	f000 fce8 	bl	8001fe8 <is_touch_time>
 8001618:	4603      	mov	r3, r0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d003      	beq.n	8001626 <input_process+0x1ae>
 800161e:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <input_process+0x2d0>)
 8001620:	8adb      	ldrh	r3, [r3, #22]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d118      	bne.n	8001658 <input_process+0x1e0>
				if(confirm[2] == 1){
 8001626:	4b49      	ldr	r3, [pc, #292]	; (800174c <input_process+0x2d4>)
 8001628:	789b      	ldrb	r3, [r3, #2]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10d      	bne.n	800164a <input_process+0x1d2>
					clr_confirm();
 800162e:	f7ff fe65 	bl	80012fc <clr_confirm>
					tempStatus = TIME;
 8001632:	4b48      	ldr	r3, [pc, #288]	; (8001754 <input_process+0x2dc>)
 8001634:	220d      	movs	r2, #13
 8001636:	601a      	str	r2, [r3, #0]
					status = NAME;
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <input_process+0x2cc>)
 800163a:	2212      	movs	r2, #18
 800163c:	601a      	str	r2, [r3, #0]
					entername_lcd();
 800163e:	f001 faa9 	bl	8002b94 <entername_lcd>
					counter = 0;			// Gia tri counter dem thoi gian duoc gan 0
 8001642:	4b45      	ldr	r3, [pc, #276]	; (8001758 <input_process+0x2e0>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e006      	b.n	8001658 <input_process+0x1e0>
				}else{
					clr_confirm();
 800164a:	f7ff fe57 	bl	80012fc <clr_confirm>
					confirm[2] = 1;
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <input_process+0x2d4>)
 8001650:	2201      	movs	r2, #1
 8001652:	709a      	strb	r2, [r3, #2]
					mode_third_lcd();
 8001654:	f001 fbcc 	bl	8002df0 <mode_third_lcd>
				}
			}
			if(is_touch_quit() == 1 || button_count[15] == 1){
 8001658:	f000 fb90 	bl	8001d7c <is_touch_quit>
 800165c:	4603      	mov	r3, r0
 800165e:	2b01      	cmp	r3, #1
 8001660:	d004      	beq.n	800166c <input_process+0x1f4>
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <input_process+0x2d0>)
 8001664:	8bdb      	ldrh	r3, [r3, #30]
 8001666:	2b01      	cmp	r3, #1
 8001668:	f040 80ba 	bne.w	80017e0 <input_process+0x368>
				if(confirm[3] == 1){
 800166c:	4b37      	ldr	r3, [pc, #220]	; (800174c <input_process+0x2d4>)
 800166e:	78db      	ldrb	r3, [r3, #3]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <input_process+0x20c>
					clr_confirm();
 8001674:	f7ff fe42 	bl	80012fc <clr_confirm>
					status = HOME;
 8001678:	4b32      	ldr	r3, [pc, #200]	; (8001744 <input_process+0x2cc>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
					home_lcd();
 800167e:	f000 fe31 	bl	80022e4 <home_lcd>
					clr_confirm();
					confirm[3] = 1;
					mode_forth_lcd();
				}
			}
			break;
 8001682:	e0ad      	b.n	80017e0 <input_process+0x368>
					clr_confirm();
 8001684:	f7ff fe3a 	bl	80012fc <clr_confirm>
					confirm[3] = 1;
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <input_process+0x2d4>)
 800168a:	2201      	movs	r2, #1
 800168c:	70da      	strb	r2, [r3, #3]
					mode_forth_lcd();
 800168e:	f001 fbc9 	bl	8002e24 <mode_forth_lcd>
			break;
 8001692:	e0a5      	b.n	80017e0 <input_process+0x368>
		case HIGHSCORE:
			if(is_touch_quit() == 1 || button_count[3] == 1){
 8001694:	f000 fb72 	bl	8001d7c <is_touch_quit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	d004      	beq.n	80016a8 <input_process+0x230>
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <input_process+0x2d0>)
 80016a0:	88db      	ldrh	r3, [r3, #6]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f040 809e 	bne.w	80017e4 <input_process+0x36c>
				status = HOME;
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <input_process+0x2cc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
				home_lcd();
 80016ae:	f000 fe19 	bl	80022e4 <home_lcd>
			}
			break;
 80016b2:	e097      	b.n	80017e4 <input_process+0x36c>
		case CLASSIC:
			input_inGame();
 80016b4:	f7ff fe7e 	bl	80013b4 <input_inGame>
			break;
 80016b8:	e09b      	b.n	80017f2 <input_process+0x37a>
		case SPEED:
			input_inGame();
 80016ba:	f7ff fe7b 	bl	80013b4 <input_inGame>
			break;
 80016be:	e098      	b.n	80017f2 <input_process+0x37a>
		case TIME:
			input_inGame();
 80016c0:	f7ff fe78 	bl	80013b4 <input_inGame>
			break;
 80016c4:	e095      	b.n	80017f2 <input_process+0x37a>
		case GAMEOVER:
			if(is_touch_quit_end() == 1 || button_count[3] == 1){
 80016c6:	f000 fb7c 	bl	8001dc2 <is_touch_quit_end>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d004      	beq.n	80016da <input_process+0x262>
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <input_process+0x2d0>)
 80016d2:	88db      	ldrh	r3, [r3, #6]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f040 8087 	bne.w	80017e8 <input_process+0x370>
				status = HOME;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <input_process+0x2cc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
				home_lcd();
 80016e0:	f000 fe00 	bl	80022e4 <home_lcd>
				reset_7seg();				// Thoat che do choi game led 7 se quay tro ve 0
 80016e4:	f001 fc9b 	bl	800301e <reset_7seg>
			}
			break;
 80016e8:	e07e      	b.n	80017e8 <input_process+0x370>
		case WIN:
			if(is_touch_quit_end() == 1 || button_count[3] == 1){
 80016ea:	f000 fb6a 	bl	8001dc2 <is_touch_quit_end>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d003      	beq.n	80016fc <input_process+0x284>
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <input_process+0x2d0>)
 80016f6:	88db      	ldrh	r3, [r3, #6]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d177      	bne.n	80017ec <input_process+0x374>
				status = HOME;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <input_process+0x2cc>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
				home_lcd();
 8001702:	f000 fdef 	bl	80022e4 <home_lcd>
				reset_7seg();
 8001706:	f001 fc8a 	bl	800301e <reset_7seg>
			}
			break;
 800170a:	e06f      	b.n	80017ec <input_process+0x374>
		case NAME:
			HAL_Delay(3000);
 800170c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001710:	f004 fd6a 	bl	80061e8 <HAL_Delay>
				status = tempStatus;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <input_process+0x2dc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <input_process+0x2cc>)
 800171a:	6013      	str	r3, [r2, #0]
				setTimer3(500);
 800171c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001720:	f002 ffc2 	bl	80046a8 <setTimer3>
				game_lcd();					// Hien thi man hinh choi game
 8001724:	f000 ff70 	bl	8002608 <game_lcd>
				mode_7seg();				// Ham hien thi che do choi tren led 7seg
 8001728:	f001 fc92 	bl	8003050 <mode_7seg>
				reDraw_snake();				// Ham goi ve con ran
 800172c:	f002 ff6e 	bl	800460c <reDraw_snake>
				point_food_lcd(food);
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <input_process+0x2e4>)
 8001732:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001736:	f001 fc4c 	bl	8002fd2 <point_food_lcd>
				environment_lcd();			// Ham moi truong
 800173a:	f001 f817 	bl	800276c <environment_lcd>
				score_lcd();				// Ham diem so
 800173e:	f001 f84d 	bl	80027dc <score_lcd>
			break;
 8001742:	e056      	b.n	80017f2 <input_process+0x37a>
 8001744:	20000270 	.word	0x20000270
 8001748:	20000184 	.word	0x20000184
 800174c:	200001ac 	.word	0x200001ac
 8001750:	20000280 	.word	0x20000280
 8001754:	20000284 	.word	0x20000284
 8001758:	200001a8 	.word	0x200001a8
 800175c:	20000010 	.word	0x20000010
		case PAUSE:
			if(is_touch_quit_end() == 1 || button_count[7] == 1){
 8001760:	f000 fb2f 	bl	8001dc2 <is_touch_quit_end>
 8001764:	4603      	mov	r3, r0
 8001766:	2b01      	cmp	r3, #1
 8001768:	d003      	beq.n	8001772 <input_process+0x2fa>
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <input_process+0x380>)
 800176c:	89db      	ldrh	r3, [r3, #14]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d115      	bne.n	800179e <input_process+0x326>
				if(confirm[2] == 1){
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <input_process+0x384>)
 8001774:	789b      	ldrb	r3, [r3, #2]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d109      	bne.n	800178e <input_process+0x316>
					clr_confirm();
 800177a:	f7ff fdbf 	bl	80012fc <clr_confirm>
					status = HOME;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <input_process+0x388>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
					home_lcd();
 8001784:	f000 fdae 	bl	80022e4 <home_lcd>
					reset_7seg();
 8001788:	f001 fc49 	bl	800301e <reset_7seg>
				if(confirm[2] == 1){
 800178c:	e023      	b.n	80017d6 <input_process+0x35e>
				}else{
					clr_confirm();
 800178e:	f7ff fdb5 	bl	80012fc <clr_confirm>
					confirm[2] = 1;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <input_process+0x384>)
 8001794:	2201      	movs	r2, #1
 8001796:	709a      	strb	r2, [r3, #2]
					pause_third_lcd();
 8001798:	f001 fb86 	bl	8002ea8 <pause_third_lcd>
				if(confirm[2] == 1){
 800179c:	e01b      	b.n	80017d6 <input_process+0x35e>
				}
			}else if(is_touch_resume() == 1 || button_count[3] == 1){
 800179e:	f000 fb32 	bl	8001e06 <is_touch_resume>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d003      	beq.n	80017b0 <input_process+0x338>
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <input_process+0x380>)
 80017aa:	88db      	ldrh	r3, [r3, #6]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d11f      	bne.n	80017f0 <input_process+0x378>
				if(confirm[1] == 1){
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <input_process+0x384>)
 80017b2:	785b      	ldrb	r3, [r3, #1]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <input_process+0x34e>
					clr_confirm();
 80017b8:	f7ff fda0 	bl	80012fc <clr_confirm>
					game_lcd();
 80017bc:	f000 ff24 	bl	8002608 <game_lcd>
					continue_game();
 80017c0:	f7ff fdd2 	bl	8001368 <continue_game>
					clr_confirm();
					confirm[1] = 1;
					pause_second_lcd();
				}
			}
			break;
 80017c4:	e014      	b.n	80017f0 <input_process+0x378>
					clr_confirm();
 80017c6:	f7ff fd99 	bl	80012fc <clr_confirm>
					confirm[1] = 1;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <input_process+0x384>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	705a      	strb	r2, [r3, #1]
					pause_second_lcd();
 80017d0:	f001 fb42 	bl	8002e58 <pause_second_lcd>
			break;
 80017d4:	e00c      	b.n	80017f0 <input_process+0x378>
 80017d6:	e00b      	b.n	80017f0 <input_process+0x378>
		default:
			break;
 80017d8:	bf00      	nop
 80017da:	e00a      	b.n	80017f2 <input_process+0x37a>
			break;
 80017dc:	bf00      	nop
 80017de:	e008      	b.n	80017f2 <input_process+0x37a>
			break;
 80017e0:	bf00      	nop
 80017e2:	e006      	b.n	80017f2 <input_process+0x37a>
			break;
 80017e4:	bf00      	nop
 80017e6:	e004      	b.n	80017f2 <input_process+0x37a>
			break;
 80017e8:	bf00      	nop
 80017ea:	e002      	b.n	80017f2 <input_process+0x37a>
			break;
 80017ec:	bf00      	nop
 80017ee:	e000      	b.n	80017f2 <input_process+0x37a>
			break;
 80017f0:	bf00      	nop
	}
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000184 	.word	0x20000184
 80017fc:	200001ac 	.word	0x200001ac
 8001800:	20000270 	.word	0x20000270
 8001804:	00000000 	.word	0x00000000

08001808 <environment_cal>:

// Cap nhat thong tin moi truong
void environment_cal(){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	sensor_Read();
 800180c:	f002 fd0a 	bl	8004224 <sensor_Read>
	current_temp = sensor_GetTemperature();
 8001810:	f002 fd2e 	bl	8004270 <sensor_GetTemperature>
 8001814:	eef0 7a40 	vmov.f32	s15, s0
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <environment_cal+0x80>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
	current_hum = ((float)sensor_GetPotentiometer() / 4095.0) * 100;
 800181e:	f002 fd1b 	bl	8004258 <sensor_GetPotentiometer>
 8001822:	4603      	mov	r3, r0
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800182c:	ee17 0a90 	vmov	r0, s15
 8001830:	f7fe fe82 	bl	8000538 <__aeabi_f2d>
 8001834:	a312      	add	r3, pc, #72	; (adr r3, 8001880 <environment_cal+0x78>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe ffff 	bl	800083c <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <environment_cal+0x84>)
 800184c:	f7fe fecc 	bl	80005e8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f99e 	bl	8000b98 <__aeabi_d2uiz>
 800185c:	4603      	mov	r3, r0
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <environment_cal+0x88>)
 8001862:	801a      	strh	r2, [r3, #0]
	current_light = 4095 - sensor_GetLight();
 8001864:	f002 fcec 	bl	8004240 <sensor_GetLight>
 8001868:	4603      	mov	r3, r0
 800186a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800186e:	330f      	adds	r3, #15
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <environment_cal+0x8c>)
 8001874:	801a      	strh	r2, [r3, #0]
	environment_lcd();
 8001876:	f000 ff79 	bl	800276c <environment_lcd>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	00000000 	.word	0x00000000
 8001884:	40affe00 	.word	0x40affe00
 8001888:	20000004 	.word	0x20000004
 800188c:	40590000 	.word	0x40590000
 8001890:	20000008 	.word	0x20000008
 8001894:	2000000a 	.word	0x2000000a

08001898 <score_cal>:

// Tinh toan cap nhat diem so
void score_cal(){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	current_score = current_score + (400 / counter_time_score) * 5 + 5;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <score_cal+0x30>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	441a      	add	r2, r3
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <score_cal+0x34>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	3305      	adds	r3, #5
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <score_cal+0x34>)
 80018b8:	6013      	str	r3, [r2, #0]
	counter_time_score = 0;
 80018ba:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <score_cal+0x30>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
	score_lcd();
 80018c0:	f000 ff8c 	bl	80027dc <score_lcd>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000278 	.word	0x20000278
 80018cc:	20000000 	.word	0x20000000

080018d0 <inGame>:

void inGame(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	if(move != NOT){
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <inGame+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <inGame+0x10>
		move_snake();
 80018dc:	f002 fe34 	bl	8004548 <move_snake>
	}
	if(is_collision() == 1){
 80018e0:	f002 fd64 	bl	80043ac <is_collision>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <inGame+0x2a>
		status = GAMEOVER;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <inGame+0x68>)
 80018ec:	2210      	movs	r2, #16
 80018ee:	601a      	str	r2, [r3, #0]
		game_over_lcd();
 80018f0:	f000 ffcc 	bl	800288c <game_over_lcd>
		snake_init();
 80018f4:	f002 fcda 	bl	80042ac <snake_init>
	}else if(length == MAX_LENGTH_SNAKE){
		status = WIN;
		youwin_lcd();
		snake_init();
	}
}
 80018f8:	e019      	b.n	800192e <inGame+0x5e>
	}else if(is_eat() == 1){
 80018fa:	f002 fd95 	bl	8004428 <is_eat>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d109      	bne.n	8001918 <inGame+0x48>
		length++;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <inGame+0x6c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <inGame+0x6c>)
 800190c:	6013      	str	r3, [r2, #0]
		score_cal();
 800190e:	f7ff ffc3 	bl	8001898 <score_cal>
		rand_food();
 8001912:	f002 fde7 	bl	80044e4 <rand_food>
}
 8001916:	e00a      	b.n	800192e <inGame+0x5e>
	}else if(length == MAX_LENGTH_SNAKE){
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <inGame+0x6c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b64      	cmp	r3, #100	; 0x64
 800191e:	d106      	bne.n	800192e <inGame+0x5e>
		status = WIN;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <inGame+0x68>)
 8001922:	2211      	movs	r2, #17
 8001924:	601a      	str	r2, [r3, #0]
		youwin_lcd();
 8001926:	f000 ffe9 	bl	80028fc <youwin_lcd>
		snake_init();
 800192a:	f002 fcbf 	bl	80042ac <snake_init>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000274 	.word	0x20000274
 8001938:	20000270 	.word	0x20000270
 800193c:	2000000c 	.word	0x2000000c

08001940 <fsm_ingame>:

void fsm_ingame(){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	switch(status){
 8001944:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <fsm_ingame+0x168>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b0d      	cmp	r3, #13
 800194a:	d04f      	beq.n	80019ec <fsm_ingame+0xac>
 800194c:	2b0d      	cmp	r3, #13
 800194e:	f300 80a1 	bgt.w	8001a94 <fsm_ingame+0x154>
 8001952:	2b0b      	cmp	r3, #11
 8001954:	d002      	beq.n	800195c <fsm_ingame+0x1c>
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d019      	beq.n	800198e <fsm_ingame+0x4e>
					snake_init();
				}
			}
			break;
		default:
			break;
 800195a:	e09b      	b.n	8001a94 <fsm_ingame+0x154>
			counter_time_score++;
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <fsm_ingame+0x16c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a52      	ldr	r2, [pc, #328]	; (8001aac <fsm_ingame+0x16c>)
 8001964:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001966:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <fsm_ingame+0x170>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d104      	bne.n	8001978 <fsm_ingame+0x38>
				flag_timer4 = 0;
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <fsm_ingame+0x170>)
 8001970:	2200      	movs	r2, #0
 8001972:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001974:	f7ff ff48 	bl	8001808 <environment_cal>
			if(flag_timer3 == 1){
 8001978:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <fsm_ingame+0x174>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	f040 808b 	bne.w	8001a98 <fsm_ingame+0x158>
				flag_timer3 = 0;
 8001982:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <fsm_ingame+0x174>)
 8001984:	2200      	movs	r2, #0
 8001986:	801a      	strh	r2, [r3, #0]
				inGame();
 8001988:	f7ff ffa2 	bl	80018d0 <inGame>
			break;
 800198c:	e084      	b.n	8001a98 <fsm_ingame+0x158>
			counter_time_score++;
 800198e:	4b47      	ldr	r3, [pc, #284]	; (8001aac <fsm_ingame+0x16c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	4a45      	ldr	r2, [pc, #276]	; (8001aac <fsm_ingame+0x16c>)
 8001996:	6013      	str	r3, [r2, #0]
			if(flag_timer4 == 1){
 8001998:	4b45      	ldr	r3, [pc, #276]	; (8001ab0 <fsm_ingame+0x170>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d104      	bne.n	80019aa <fsm_ingame+0x6a>
				flag_timer4 = 0;
 80019a0:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <fsm_ingame+0x170>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
				environment_cal();
 80019a6:	f7ff ff2f 	bl	8001808 <environment_cal>
			if(flag_timer3 == 1){
 80019aa:	4b42      	ldr	r3, [pc, #264]	; (8001ab4 <fsm_ingame+0x174>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d174      	bne.n	8001a9c <fsm_ingame+0x15c>
				flag_timer3 = 0;
 80019b2:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <fsm_ingame+0x174>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
				inGame();
 80019b8:	f7ff ff8a 	bl	80018d0 <inGame>
				if(length == 5){
 80019bc:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <fsm_ingame+0x178>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d103      	bne.n	80019cc <fsm_ingame+0x8c>
					setTimer3(200);
 80019c4:	20c8      	movs	r0, #200	; 0xc8
 80019c6:	f002 fe6f 	bl	80046a8 <setTimer3>
			break;
 80019ca:	e067      	b.n	8001a9c <fsm_ingame+0x15c>
				}else if(length == 10){
 80019cc:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <fsm_ingame+0x178>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b0a      	cmp	r3, #10
 80019d2:	d103      	bne.n	80019dc <fsm_ingame+0x9c>
					setTimer3(100);
 80019d4:	2064      	movs	r0, #100	; 0x64
 80019d6:	f002 fe67 	bl	80046a8 <setTimer3>
			break;
 80019da:	e05f      	b.n	8001a9c <fsm_ingame+0x15c>
				}else if(length == 15){
 80019dc:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <fsm_ingame+0x178>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d15b      	bne.n	8001a9c <fsm_ingame+0x15c>
					setTimer3(50);
 80019e4:	2032      	movs	r0, #50	; 0x32
 80019e6:	f002 fe5f 	bl	80046a8 <setTimer3>
			break;
 80019ea:	e057      	b.n	8001a9c <fsm_ingame+0x15c>
			counter_time_score++;
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <fsm_ingame+0x16c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <fsm_ingame+0x16c>)
 80019f4:	6013      	str	r3, [r2, #0]
			if(++counter % 20 == 0){
 80019f6:	4b31      	ldr	r3, [pc, #196]	; (8001abc <fsm_ingame+0x17c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a2f      	ldr	r2, [pc, #188]	; (8001abc <fsm_ingame+0x17c>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <fsm_ingame+0x17c>)
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <fsm_ingame+0x180>)
 8001a06:	fba3 2301 	umull	r2, r3, r3, r1
 8001a0a:	091a      	lsrs	r2, r3, #4
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	1aca      	subs	r2, r1, r3
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d106      	bne.n	8001a28 <fsm_ingame+0xe8>
				counter_time--;
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <fsm_ingame+0x184>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <fsm_ingame+0x184>)
 8001a22:	6013      	str	r3, [r2, #0]
				update_7seg_time();
 8001a24:	f001 fb38 	bl	8003098 <update_7seg_time>
			if(flag_timer4 == 1){
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <fsm_ingame+0x170>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d104      	bne.n	8001a3a <fsm_ingame+0xfa>
				flag_timer4 = 0;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <fsm_ingame+0x170>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	801a      	strh	r2, [r3, #0]
				environment_cal();
 8001a36:	f7ff fee7 	bl	8001808 <environment_cal>
			if(flag_timer3 == 1){
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <fsm_ingame+0x174>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12e      	bne.n	8001aa0 <fsm_ingame+0x160>
				flag_timer3 = 0;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <fsm_ingame+0x174>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	801a      	strh	r2, [r3, #0]
				inGame();
 8001a48:	f7ff ff42 	bl	80018d0 <inGame>
				if(counter_time <= 50){
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <fsm_ingame+0x184>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b32      	cmp	r3, #50	; 0x32
 8001a52:	d803      	bhi.n	8001a5c <fsm_ingame+0x11c>
					setTimer3(200);
 8001a54:	20c8      	movs	r0, #200	; 0xc8
 8001a56:	f002 fe27 	bl	80046a8 <setTimer3>
			break;
 8001a5a:	e021      	b.n	8001aa0 <fsm_ingame+0x160>
				}else if(counter_time <= 35){
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <fsm_ingame+0x184>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b23      	cmp	r3, #35	; 0x23
 8001a62:	d803      	bhi.n	8001a6c <fsm_ingame+0x12c>
					setTimer3(100);
 8001a64:	2064      	movs	r0, #100	; 0x64
 8001a66:	f002 fe1f 	bl	80046a8 <setTimer3>
			break;
 8001a6a:	e019      	b.n	8001aa0 <fsm_ingame+0x160>
				}else if(counter_time <= 20){
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <fsm_ingame+0x184>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b14      	cmp	r3, #20
 8001a72:	d803      	bhi.n	8001a7c <fsm_ingame+0x13c>
					setTimer3(50);
 8001a74:	2032      	movs	r0, #50	; 0x32
 8001a76:	f002 fe17 	bl	80046a8 <setTimer3>
			break;
 8001a7a:	e011      	b.n	8001aa0 <fsm_ingame+0x160>
				}else if(counter_time <= 0){
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <fsm_ingame+0x184>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10d      	bne.n	8001aa0 <fsm_ingame+0x160>
					status = WIN;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <fsm_ingame+0x168>)
 8001a86:	2211      	movs	r2, #17
 8001a88:	601a      	str	r2, [r3, #0]
					youwin_lcd();
 8001a8a:	f000 ff37 	bl	80028fc <youwin_lcd>
					snake_init();
 8001a8e:	f002 fc0d 	bl	80042ac <snake_init>
			break;
 8001a92:	e005      	b.n	8001aa0 <fsm_ingame+0x160>
			break;
 8001a94:	bf00      	nop
 8001a96:	e004      	b.n	8001aa2 <fsm_ingame+0x162>
			break;
 8001a98:	bf00      	nop
 8001a9a:	e002      	b.n	8001aa2 <fsm_ingame+0x162>
			break;
 8001a9c:	bf00      	nop
 8001a9e:	e000      	b.n	8001aa2 <fsm_ingame+0x162>
			break;
 8001aa0:	bf00      	nop
	}
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000270 	.word	0x20000270
 8001aac:	20000278 	.word	0x20000278
 8001ab0:	20000682 	.word	0x20000682
 8001ab4:	2000067c 	.word	0x2000067c
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	200001a8 	.word	0x200001a8
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	2000027c 	.word	0x2000027c

08001ac8 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	; 0x38
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001af6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001afa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001afe:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <MX_FSMC_Init+0xf0>)
 8001b00:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001b08:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b16:	2210      	movs	r2, #16
 8001b18:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001b20:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001b5a:	230f      	movs	r3, #15
 8001b5c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001b62:	233c      	movs	r3, #60	; 0x3c
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001b6e:	2311      	movs	r3, #17
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001b76:	2308      	movs	r3, #8
 8001b78:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001b7e:	2309      	movs	r3, #9
 8001b80:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001b86:	2310      	movs	r3, #16
 8001b88:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001b8a:	2311      	movs	r3, #17
 8001b8c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001b92:	463a      	mov	r2, r7
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_FSMC_Init+0xec>)
 8001b9c:	f008 f856 	bl	8009c4c <HAL_SRAM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001ba6:	f002 fb29 	bl	80041fc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001baa:	bf00      	nop
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200001b0 	.word	0x200001b0
 8001bb8:	a0000104 	.word	0xa0000104
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <distance_of_two_point>:
 */

#include "fun_touch.h"

// Tinh khoang cach hai diem
float distance_of_two_point(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2){
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80bb      	strh	r3, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	803b      	strh	r3, [r7, #0]
	return sqrt(pow((x1 - x2), 2) + pow((y1 - y2), 2));
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc95 	bl	8000514 <__aeabi_i2d>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001c58 <distance_of_two_point+0x98>
 8001bf2:	ec43 2b10 	vmov	d0, r2, r3
 8001bf6:	f00b f9a9 	bl	800cf4c <pow>
 8001bfa:	ec55 4b10 	vmov	r4, r5, d0
 8001bfe:	88ba      	ldrh	r2, [r7, #4]
 8001c00:	883b      	ldrh	r3, [r7, #0]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fc85 	bl	8000514 <__aeabi_i2d>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001c58 <distance_of_two_point+0x98>
 8001c12:	ec43 2b10 	vmov	d0, r2, r3
 8001c16:	f00b f999 	bl	800cf4c <pow>
 8001c1a:	ec53 2b10 	vmov	r2, r3, d0
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fb2b 	bl	800027c <__adddf3>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	ec43 2b17 	vmov	d7, r2, r3
 8001c2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c32:	eef0 0a67 	vmov.f32	s1, s15
 8001c36:	f00b f9f9 	bl	800d02c <sqrt>
 8001c3a:	ec53 2b10 	vmov	r2, r3, d0
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ffc9 	bl	8000bd8 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	ee07 3a90 	vmov	s15, r3
}
 8001c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40000000 	.word	0x40000000

08001c60 <is_touch_right>:

int is_touch_right(){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001c64:	f004 f988 	bl	8005f78 <touch_IsTouched>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <is_touch_right+0x12>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e018      	b.n	8001ca4 <is_touch_right+0x44>
	return (touch_GetX() > POS_X_RIGHT
 8001c72:	f004 f993 	bl	8005f9c <touch_GetX>
 8001c76:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
			&& touch_GetY() > POS_Y_RIGHT
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001c78:	2ba5      	cmp	r3, #165	; 0xa5
 8001c7a:	d912      	bls.n	8001ca2 <is_touch_right+0x42>
			&& touch_GetX() < POS_X_RIGHT + BTN_WIDTH
 8001c7c:	f004 f98e 	bl	8005f9c <touch_GetX>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2bea      	cmp	r3, #234	; 0xea
 8001c84:	d80d      	bhi.n	8001ca2 <is_touch_right+0x42>
			&& touch_GetY() > POS_Y_RIGHT
 8001c86:	f004 f995 	bl	8005fb4 <touch_GetY>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001c90:	d307      	bcc.n	8001ca2 <is_touch_right+0x42>
			&& touch_GetY() < POS_Y_RIGHT + BTN_HEIGHT);
 8001c92:	f004 f98f 	bl	8005fb4 <touch_GetY>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001c9c:	d801      	bhi.n	8001ca2 <is_touch_right+0x42>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <is_touch_right+0x44>
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <is_touch_left>:

int is_touch_left(){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001cac:	f004 f964 	bl	8005f78 <touch_IsTouched>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <is_touch_left+0x12>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e018      	b.n	8001cec <is_touch_left+0x44>
	return (touch_GetX() > POS_X_LEFT
 8001cba:	f004 f96f 	bl	8005f9c <touch_GetX>
 8001cbe:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
			&& touch_GetY() > POS_Y_LEFT
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d912      	bls.n	8001cea <is_touch_left+0x42>
			&& touch_GetX() < POS_X_LEFT + BTN_WIDTH
 8001cc4:	f004 f96a 	bl	8005f9c <touch_GetX>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b4a      	cmp	r3, #74	; 0x4a
 8001ccc:	d80d      	bhi.n	8001cea <is_touch_left+0x42>
			&& touch_GetY() > POS_Y_LEFT
 8001cce:	f004 f971 	bl	8005fb4 <touch_GetY>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001cd8:	d307      	bcc.n	8001cea <is_touch_left+0x42>
			&& touch_GetY() < POS_Y_LEFT + BTN_HEIGHT);
 8001cda:	f004 f96b 	bl	8005fb4 <touch_GetY>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001ce4:	d801      	bhi.n	8001cea <is_touch_left+0x42>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <is_touch_left+0x44>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <is_touch_up>:

int is_touch_up(){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001cf4:	f004 f940 	bl	8005f78 <touch_IsTouched>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <is_touch_up+0x12>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e016      	b.n	8001d30 <is_touch_up+0x40>
	return (touch_GetX() > POS_X_UP
 8001d02:	f004 f94b 	bl	8005f9c <touch_GetX>
 8001d06:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
			&& touch_GetY() > POS_Y_UP
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001d08:	2b55      	cmp	r3, #85	; 0x55
 8001d0a:	d910      	bls.n	8001d2e <is_touch_up+0x3e>
			&& touch_GetX() < POS_X_UP + BTN_WIDTH
 8001d0c:	f004 f946 	bl	8005f9c <touch_GetX>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b9a      	cmp	r3, #154	; 0x9a
 8001d14:	d80b      	bhi.n	8001d2e <is_touch_up+0x3e>
			&& touch_GetY() > POS_Y_UP
 8001d16:	f004 f94d 	bl	8005fb4 <touch_GetY>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2bcd      	cmp	r3, #205	; 0xcd
 8001d1e:	d906      	bls.n	8001d2e <is_touch_up+0x3e>
			&& touch_GetY() < POS_Y_UP + BTN_HEIGHT);
 8001d20:	f004 f948 	bl	8005fb4 <touch_GetY>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2bfe      	cmp	r3, #254	; 0xfe
 8001d28:	d801      	bhi.n	8001d2e <is_touch_up+0x3e>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <is_touch_up+0x40>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <is_touch_down>:

int is_touch_down(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001d38:	f004 f91e 	bl	8005f78 <touch_IsTouched>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <is_touch_down+0x12>
 8001d42:	2300      	movs	r3, #0
 8001d44:	e018      	b.n	8001d78 <is_touch_down+0x44>
	return (touch_GetX() > POS_X_DOWN
 8001d46:	f004 f929 	bl	8005f9c <touch_GetX>
 8001d4a:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
			&& touch_GetY() > POS_Y_DOWN
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001d4c:	2b55      	cmp	r3, #85	; 0x55
 8001d4e:	d912      	bls.n	8001d76 <is_touch_down+0x42>
			&& touch_GetX() < POS_X_DOWN + BTN_WIDTH
 8001d50:	f004 f924 	bl	8005f9c <touch_GetX>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b9a      	cmp	r3, #154	; 0x9a
 8001d58:	d80d      	bhi.n	8001d76 <is_touch_down+0x42>
			&& touch_GetY() > POS_Y_DOWN
 8001d5a:	f004 f92b 	bl	8005fb4 <touch_GetY>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8001d64:	d307      	bcc.n	8001d76 <is_touch_down+0x42>
			&& touch_GetY() < POS_Y_DOWN + BTN_HEIGHT);
 8001d66:	f004 f925 	bl	8005fb4 <touch_GetY>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8001d70:	d801      	bhi.n	8001d76 <is_touch_down+0x42>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <is_touch_down+0x44>
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <is_touch_quit>:

int is_touch_quit(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001d80:	f004 f8fa 	bl	8005f78 <touch_IsTouched>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <is_touch_quit+0x12>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e017      	b.n	8001dbe <is_touch_quit+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001d8e:	f004 f905 	bl	8005f9c <touch_GetX>
 8001d92:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001d94:	2b41      	cmp	r3, #65	; 0x41
 8001d96:	d911      	bls.n	8001dbc <is_touch_quit+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001d98:	f004 f900 	bl	8005f9c <touch_GetX>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2bb8      	cmp	r3, #184	; 0xb8
 8001da0:	d80c      	bhi.n	8001dbc <is_touch_quit+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001da2:	f004 f907 	bl	8005fb4 <touch_GetY>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2bfa      	cmp	r3, #250	; 0xfa
 8001daa:	d907      	bls.n	8001dbc <is_touch_quit+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001dac:	f004 f902 	bl	8005fb4 <touch_GetY>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001db6:	d801      	bhi.n	8001dbc <is_touch_quit+0x40>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <is_touch_quit+0x42>
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <is_touch_quit_end>:

int is_touch_quit_end(){
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001dc6:	f004 f8d7 	bl	8005f78 <touch_IsTouched>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <is_touch_quit_end+0x12>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e016      	b.n	8001e02 <is_touch_quit_end+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001dd4:	f004 f8e2 	bl	8005f9c <touch_GetX>
 8001dd8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001dda:	2b41      	cmp	r3, #65	; 0x41
 8001ddc:	d910      	bls.n	8001e00 <is_touch_quit_end+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001dde:	f004 f8dd 	bl	8005f9c <touch_GetX>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2bb8      	cmp	r3, #184	; 0xb8
 8001de6:	d80b      	bhi.n	8001e00 <is_touch_quit_end+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001de8:	f004 f8e4 	bl	8005fb4 <touch_GetY>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2bc8      	cmp	r3, #200	; 0xc8
 8001df0:	d906      	bls.n	8001e00 <is_touch_quit_end+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001df2:	f004 f8df 	bl	8005fb4 <touch_GetY>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2bea      	cmp	r3, #234	; 0xea
 8001dfa:	d801      	bhi.n	8001e00 <is_touch_quit_end+0x3e>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <is_touch_quit_end+0x40>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <is_touch_resume>:

int is_touch_resume(){
 8001e06:	b580      	push	{r7, lr}
 8001e08:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001e0a:	f004 f8b5 	bl	8005f78 <touch_IsTouched>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <is_touch_resume+0x12>
 8001e14:	2300      	movs	r3, #0
 8001e16:	e016      	b.n	8001e46 <is_touch_resume+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001e18:	f004 f8c0 	bl	8005f9c <touch_GetX>
 8001e1c:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001e1e:	2b41      	cmp	r3, #65	; 0x41
 8001e20:	d910      	bls.n	8001e44 <is_touch_resume+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001e22:	f004 f8bb 	bl	8005f9c <touch_GetX>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2bb8      	cmp	r3, #184	; 0xb8
 8001e2a:	d80b      	bhi.n	8001e44 <is_touch_resume+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001e2c:	f004 f8c2 	bl	8005fb4 <touch_GetY>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b96      	cmp	r3, #150	; 0x96
 8001e34:	d906      	bls.n	8001e44 <is_touch_resume+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001e36:	f004 f8bd 	bl	8005fb4 <touch_GetY>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2bb8      	cmp	r3, #184	; 0xb8
 8001e3e:	d801      	bhi.n	8001e44 <is_touch_resume+0x3e>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <is_touch_resume+0x40>
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <is_touch_pause>:

int is_touch_pause(){
 8001e4a:	b598      	push	{r3, r4, r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001e4e:	f004 f893 	bl	8005f78 <touch_IsTouched>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <is_touch_pause+0x12>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e018      	b.n	8001e8e <is_touch_pause+0x44>
	return distance_of_two_point(touch_GetX(), touch_GetY(), POS_X_PAUSE, POS_Y_PAUSE) < BTN_HEIGHT / 2;
 8001e5c:	f004 f89e 	bl	8005f9c <touch_GetX>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461c      	mov	r4, r3
 8001e64:	f004 f8a6 	bl	8005fb4 <touch_GetY>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	23e6      	movs	r3, #230	; 0xe6
 8001e6e:	22c8      	movs	r2, #200	; 0xc8
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fea5 	bl	8001bc0 <distance_of_two_point>
 8001e76:	eef0 7a40 	vmov.f32	s15, s0
 8001e7a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	bf4c      	ite	mi
 8001e88:	2301      	movmi	r3, #1
 8001e8a:	2300      	movpl	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd98      	pop	{r3, r4, r7, pc}

08001e92 <is_touch_newGame>:

int is_touch_newGame(){
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001e96:	f004 f86f 	bl	8005f78 <touch_IsTouched>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <is_touch_newGame+0x12>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e016      	b.n	8001ed2 <is_touch_newGame+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001ea4:	f004 f87a 	bl	8005f9c <touch_GetX>
 8001ea8:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001eaa:	2b41      	cmp	r3, #65	; 0x41
 8001eac:	d910      	bls.n	8001ed0 <is_touch_newGame+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001eae:	f004 f875 	bl	8005f9c <touch_GetX>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2bb8      	cmp	r3, #184	; 0xb8
 8001eb6:	d80b      	bhi.n	8001ed0 <is_touch_newGame+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001eb8:	f004 f87c 	bl	8005fb4 <touch_GetY>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b96      	cmp	r3, #150	; 0x96
 8001ec0:	d906      	bls.n	8001ed0 <is_touch_newGame+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001ec2:	f004 f877 	bl	8005fb4 <touch_GetY>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2bb8      	cmp	r3, #184	; 0xb8
 8001eca:	d801      	bhi.n	8001ed0 <is_touch_newGame+0x3e>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <is_touch_newGame+0x40>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <is_touch_continue>:

int is_touch_continue(){
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001eda:	f004 f84d 	bl	8005f78 <touch_IsTouched>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <is_touch_continue+0x12>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e016      	b.n	8001f16 <is_touch_continue+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001ee8:	f004 f858 	bl	8005f9c <touch_GetX>
 8001eec:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001eee:	2b41      	cmp	r3, #65	; 0x41
 8001ef0:	d910      	bls.n	8001f14 <is_touch_continue+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8001ef2:	f004 f853 	bl	8005f9c <touch_GetX>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2bb8      	cmp	r3, #184	; 0xb8
 8001efa:	d80b      	bhi.n	8001f14 <is_touch_continue+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 8001efc:	f004 f85a 	bl	8005fb4 <touch_GetY>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2bc8      	cmp	r3, #200	; 0xc8
 8001f04:	d906      	bls.n	8001f14 <is_touch_continue+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8001f06:	f004 f855 	bl	8005fb4 <touch_GetY>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2bea      	cmp	r3, #234	; 0xea
 8001f0e:	d801      	bhi.n	8001f14 <is_touch_continue+0x3e>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <is_touch_continue+0x40>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <is_touch_highScore>:

int is_touch_highScore(){
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001f1e:	f004 f82b 	bl	8005f78 <touch_IsTouched>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <is_touch_highScore+0x12>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e017      	b.n	8001f5c <is_touch_highScore+0x42>
	return (touch_GetX() > POS_X_FORTH
 8001f2c:	f004 f836 	bl	8005f9c <touch_GetX>
 8001f30:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FORTH + WIDTH
			&& touch_GetY() > POS_Y_FORTH
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001f32:	2b41      	cmp	r3, #65	; 0x41
 8001f34:	d911      	bls.n	8001f5a <is_touch_highScore+0x40>
			&& touch_GetX() < POS_X_FORTH + WIDTH
 8001f36:	f004 f831 	bl	8005f9c <touch_GetX>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2bb8      	cmp	r3, #184	; 0xb8
 8001f3e:	d80c      	bhi.n	8001f5a <is_touch_highScore+0x40>
			&& touch_GetY() > POS_Y_FORTH
 8001f40:	f004 f838 	bl	8005fb4 <touch_GetY>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2bfa      	cmp	r3, #250	; 0xfa
 8001f48:	d907      	bls.n	8001f5a <is_touch_highScore+0x40>
			&& touch_GetY() < POS_Y_FORTH + HEIGHT);
 8001f4a:	f004 f833 	bl	8005fb4 <touch_GetY>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8001f54:	d801      	bhi.n	8001f5a <is_touch_highScore+0x40>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <is_touch_highScore+0x42>
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <is_touch_classic>:

int is_touch_classic(){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001f64:	f004 f808 	bl	8005f78 <touch_IsTouched>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <is_touch_classic+0x12>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e016      	b.n	8001fa0 <is_touch_classic+0x40>
	return (touch_GetX() > POS_X_FIRST
 8001f72:	f004 f813 	bl	8005f9c <touch_GetX>
 8001f76:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_FIRST + WIDTH
			&& touch_GetY() > POS_Y_FIRST
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001f78:	2b41      	cmp	r3, #65	; 0x41
 8001f7a:	d910      	bls.n	8001f9e <is_touch_classic+0x3e>
			&& touch_GetX() < POS_X_FIRST + WIDTH
 8001f7c:	f004 f80e 	bl	8005f9c <touch_GetX>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2bb8      	cmp	r3, #184	; 0xb8
 8001f84:	d80b      	bhi.n	8001f9e <is_touch_classic+0x3e>
			&& touch_GetY() > POS_Y_FIRST
 8001f86:	f004 f815 	bl	8005fb4 <touch_GetY>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d906      	bls.n	8001f9e <is_touch_classic+0x3e>
			&& touch_GetY() < POS_Y_FIRST + HEIGHT);
 8001f90:	f004 f810 	bl	8005fb4 <touch_GetY>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b86      	cmp	r3, #134	; 0x86
 8001f98:	d801      	bhi.n	8001f9e <is_touch_classic+0x3e>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <is_touch_classic+0x40>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <is_touch_speed>:

int is_touch_speed(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001fa8:	f003 ffe6 	bl	8005f78 <touch_IsTouched>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <is_touch_speed+0x12>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e016      	b.n	8001fe4 <is_touch_speed+0x40>
	return (touch_GetX() > POS_X_SECOND
 8001fb6:	f003 fff1 	bl	8005f9c <touch_GetX>
 8001fba:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_SECOND + WIDTH
			&& touch_GetY() > POS_Y_SECOND
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001fbc:	2b41      	cmp	r3, #65	; 0x41
 8001fbe:	d910      	bls.n	8001fe2 <is_touch_speed+0x3e>
			&& touch_GetX() < POS_X_SECOND + WIDTH
 8001fc0:	f003 ffec 	bl	8005f9c <touch_GetX>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2bb8      	cmp	r3, #184	; 0xb8
 8001fc8:	d80b      	bhi.n	8001fe2 <is_touch_speed+0x3e>
			&& touch_GetY() > POS_Y_SECOND
 8001fca:	f003 fff3 	bl	8005fb4 <touch_GetY>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b96      	cmp	r3, #150	; 0x96
 8001fd2:	d906      	bls.n	8001fe2 <is_touch_speed+0x3e>
			&& touch_GetY() < POS_Y_SECOND + HEIGHT);
 8001fd4:	f003 ffee 	bl	8005fb4 <touch_GetY>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2bb8      	cmp	r3, #184	; 0xb8
 8001fdc:	d801      	bhi.n	8001fe2 <is_touch_speed+0x3e>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <is_touch_speed+0x40>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <is_touch_time>:

int is_touch_time(){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	if (!touch_IsTouched()) return 0;
 8001fec:	f003 ffc4 	bl	8005f78 <touch_IsTouched>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <is_touch_time+0x12>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e016      	b.n	8002028 <is_touch_time+0x40>
	return (touch_GetX() > POS_X_THIRD
 8001ffa:	f003 ffcf 	bl	8005f9c <touch_GetX>
 8001ffe:	4603      	mov	r3, r0
			&& touch_GetX() < POS_X_THIRD + WIDTH
			&& touch_GetY() > POS_Y_THIRD
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002000:	2b41      	cmp	r3, #65	; 0x41
 8002002:	d910      	bls.n	8002026 <is_touch_time+0x3e>
			&& touch_GetX() < POS_X_THIRD + WIDTH
 8002004:	f003 ffca 	bl	8005f9c <touch_GetX>
 8002008:	4603      	mov	r3, r0
 800200a:	2bb8      	cmp	r3, #184	; 0xb8
 800200c:	d80b      	bhi.n	8002026 <is_touch_time+0x3e>
			&& touch_GetY() > POS_Y_THIRD
 800200e:	f003 ffd1 	bl	8005fb4 <touch_GetY>
 8002012:	4603      	mov	r3, r0
 8002014:	2bc8      	cmp	r3, #200	; 0xc8
 8002016:	d906      	bls.n	8002026 <is_touch_time+0x3e>
			&& touch_GetY() < POS_Y_THIRD + HEIGHT);
 8002018:	f003 ffcc 	bl	8005fb4 <touch_GetY>
 800201c:	4603      	mov	r3, r0
 800201e:	2bea      	cmp	r3, #234	; 0xea
 8002020:	d801      	bhi.n	8002026 <is_touch_time+0x3e>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <is_touch_time+0x40>
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}

0800202c <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 800202c:	b580      	push	{r7, lr}
 800202e:	b08e      	sub	sp, #56	; 0x38
 8002030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
 8002046:	4b89      	ldr	r3, [pc, #548]	; (800226c <MX_GPIO_Init+0x240>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a88      	ldr	r2, [pc, #544]	; (800226c <MX_GPIO_Init+0x240>)
 800204c:	f043 0310 	orr.w	r3, r3, #16
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b86      	ldr	r3, [pc, #536]	; (800226c <MX_GPIO_Init+0x240>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	4b82      	ldr	r3, [pc, #520]	; (800226c <MX_GPIO_Init+0x240>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a81      	ldr	r2, [pc, #516]	; (800226c <MX_GPIO_Init+0x240>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <MX_GPIO_Init+0x240>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	4b7b      	ldr	r3, [pc, #492]	; (800226c <MX_GPIO_Init+0x240>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a7a      	ldr	r2, [pc, #488]	; (800226c <MX_GPIO_Init+0x240>)
 8002084:	f043 0320 	orr.w	r3, r3, #32
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b78      	ldr	r3, [pc, #480]	; (800226c <MX_GPIO_Init+0x240>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	4b74      	ldr	r3, [pc, #464]	; (800226c <MX_GPIO_Init+0x240>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a73      	ldr	r2, [pc, #460]	; (800226c <MX_GPIO_Init+0x240>)
 80020a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b71      	ldr	r3, [pc, #452]	; (800226c <MX_GPIO_Init+0x240>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b6d      	ldr	r3, [pc, #436]	; (800226c <MX_GPIO_Init+0x240>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a6c      	ldr	r2, [pc, #432]	; (800226c <MX_GPIO_Init+0x240>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b6a      	ldr	r3, [pc, #424]	; (800226c <MX_GPIO_Init+0x240>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <MX_GPIO_Init+0x240>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a65      	ldr	r2, [pc, #404]	; (800226c <MX_GPIO_Init+0x240>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <MX_GPIO_Init+0x240>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <MX_GPIO_Init+0x240>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a5e      	ldr	r2, [pc, #376]	; (800226c <MX_GPIO_Init+0x240>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <MX_GPIO_Init+0x240>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b58      	ldr	r3, [pc, #352]	; (800226c <MX_GPIO_Init+0x240>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a57      	ldr	r2, [pc, #348]	; (800226c <MX_GPIO_Init+0x240>)
 8002110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b55      	ldr	r3, [pc, #340]	; (800226c <MX_GPIO_Init+0x240>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	2110      	movs	r1, #16
 8002126:	4852      	ldr	r0, [pc, #328]	; (8002270 <MX_GPIO_Init+0x244>)
 8002128:	f005 fb5c 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8002132:	4850      	ldr	r0, [pc, #320]	; (8002274 <MX_GPIO_Init+0x248>)
 8002134:	f005 fb56 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213e:	484e      	ldr	r0, [pc, #312]	; (8002278 <MX_GPIO_Init+0x24c>)
 8002140:	f005 fb50 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800214a:	484c      	ldr	r0, [pc, #304]	; (800227c <MX_GPIO_Init+0x250>)
 800214c:	f005 fb4a 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002156:	484a      	ldr	r0, [pc, #296]	; (8002280 <MX_GPIO_Init+0x254>)
 8002158:	f005 fb44 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	2108      	movs	r1, #8
 8002160:	4848      	ldr	r0, [pc, #288]	; (8002284 <MX_GPIO_Init+0x258>)
 8002162:	f005 fb3f 	bl	80077e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8002166:	2310      	movs	r3, #16
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	483c      	ldr	r0, [pc, #240]	; (8002270 <MX_GPIO_Init+0x244>)
 800217e:	f005 f97d 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8002182:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	2301      	movs	r3, #1
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002198:	4619      	mov	r1, r3
 800219a:	4836      	ldr	r0, [pc, #216]	; (8002274 <MX_GPIO_Init+0x248>)
 800219c:	f005 f96e 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 80021a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	4619      	mov	r1, r3
 80021b4:	4830      	ldr	r0, [pc, #192]	; (8002278 <MX_GPIO_Init+0x24c>)
 80021b6:	f005 f961 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 80021ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	4829      	ldr	r0, [pc, #164]	; (8002278 <MX_GPIO_Init+0x24c>)
 80021d4:	f005 f952 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 80021d8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021de:	2301      	movs	r3, #1
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e6:	2300      	movs	r3, #0
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ee:	4619      	mov	r1, r3
 80021f0:	4822      	ldr	r0, [pc, #136]	; (800227c <MX_GPIO_Init+0x250>)
 80021f2:	f005 f943 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 80021f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	481a      	ldr	r0, [pc, #104]	; (8002274 <MX_GPIO_Init+0x248>)
 800220c:	f005 f936 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	4815      	ldr	r0, [pc, #84]	; (8002280 <MX_GPIO_Init+0x254>)
 800222a:	f005 f927 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800222e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <MX_GPIO_Init+0x248>)
 8002244:	f005 f91a 	bl	800747c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002248:	2308      	movs	r3, #8
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <MX_GPIO_Init+0x258>)
 8002260:	f005 f90c 	bl	800747c <HAL_GPIO_Init>

}
 8002264:	bf00      	nop
 8002266:	3738      	adds	r7, #56	; 0x38
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	40021000 	.word	0x40021000
 8002274:	40020800 	.word	0x40020800
 8002278:	40021400 	.word	0x40021400
 800227c:	40021800 	.word	0x40021800
 8002280:	40020000 	.word	0x40020000
 8002284:	40020c00 	.word	0x40020c00

08002288 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_I2C1_Init+0x50>)
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <MX_I2C1_Init+0x54>)
 8002290:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_I2C1_Init+0x50>)
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_I2C1_Init+0x58>)
 8002296:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_I2C1_Init+0x50>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c4:	4804      	ldr	r0, [pc, #16]	; (80022d8 <MX_I2C1_Init+0x50>)
 80022c6:	f005 fac1 	bl	800784c <HAL_I2C_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022d0:	f001 ff94 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200005ac 	.word	0x200005ac
 80022dc:	40005400 	.word	0x40005400
 80022e0:	000186a0 	.word	0x000186a0

080022e4 <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <home_lcd+0xa0>)
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022f2:	22f0      	movs	r2, #240	; 0xf0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2000      	movs	r0, #0
 80022f8:	f001 faac 	bl	8003854 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 80022fc:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	23b9      	movs	r3, #185	; 0xb9
 8002304:	22b9      	movs	r2, #185	; 0xb9
 8002306:	2196      	movs	r1, #150	; 0x96
 8002308:	2041      	movs	r0, #65	; 0x41
 800230a:	f000 ff99 	bl	8003240 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 800230e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	23eb      	movs	r3, #235	; 0xeb
 8002316:	22b9      	movs	r2, #185	; 0xb9
 8002318:	21c8      	movs	r1, #200	; 0xc8
 800231a:	2041      	movs	r0, #65	; 0x41
 800231c:	f000 ff90 	bl	8003240 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002320:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	f240 131d 	movw	r3, #285	; 0x11d
 800232a:	22b9      	movs	r2, #185	; 0xb9
 800232c:	21fa      	movs	r1, #250	; 0xfa
 800232e:	2041      	movs	r0, #65	; 0x41
 8002330:	f000 ff86 	bl	8003240 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 8002334:	2301      	movs	r3, #1
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	2318      	movs	r3, #24
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2300      	movs	r3, #0
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <home_lcd+0xa4>)
 8002344:	219b      	movs	r1, #155	; 0x9b
 8002346:	2054      	movs	r0, #84	; 0x54
 8002348:	f001 fd55 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 800234c:	2301      	movs	r3, #1
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	2318      	movs	r3, #24
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	2300      	movs	r3, #0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2300      	movs	r3, #0
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <home_lcd+0xa8>)
 800235c:	21cd      	movs	r1, #205	; 0xcd
 800235e:	204d      	movs	r0, #77	; 0x4d
 8002360:	f001 fd49 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 8002364:	2301      	movs	r3, #1
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	2318      	movs	r3, #24
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2300      	movs	r3, #0
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <home_lcd+0xac>)
 8002374:	21ff      	movs	r1, #255	; 0xff
 8002376:	2048      	movs	r0, #72	; 0x48
 8002378:	f001 fd3d 	bl	8003df6 <lcd_ShowStr>
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	0801139c 	.word	0x0801139c
 8002388:	0800de30 	.word	0x0800de30
 800238c:	0800de38 	.word	0x0800de38
 8002390:	0800de44 	.word	0x0800de44

08002394 <mode_game_lcd>:

void mode_game_lcd(){
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_mode);
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <mode_game_lcd+0xc8>)
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023a2:	22f0      	movs	r2, #240	; 0xf0
 80023a4:	2100      	movs	r1, #0
 80023a6:	2000      	movs	r0, #0
 80023a8:	f001 fa54 	bl	8003854 <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 80023ac:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2387      	movs	r3, #135	; 0x87
 80023b4:	22b9      	movs	r2, #185	; 0xb9
 80023b6:	2164      	movs	r1, #100	; 0x64
 80023b8:	2041      	movs	r0, #65	; 0x41
 80023ba:	f000 ff41 	bl	8003240 <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 80023be:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	23b9      	movs	r3, #185	; 0xb9
 80023c6:	22b9      	movs	r2, #185	; 0xb9
 80023c8:	2196      	movs	r1, #150	; 0x96
 80023ca:	2041      	movs	r0, #65	; 0x41
 80023cc:	f000 ff38 	bl	8003240 <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80023d0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	23eb      	movs	r3, #235	; 0xeb
 80023d8:	22b9      	movs	r2, #185	; 0xb9
 80023da:	21c8      	movs	r1, #200	; 0xc8
 80023dc:	2041      	movs	r0, #65	; 0x41
 80023de:	f000 ff2f 	bl	8003240 <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 80023e2:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	f240 131d 	movw	r3, #285	; 0x11d
 80023ec:	22b9      	movs	r2, #185	; 0xb9
 80023ee:	21fa      	movs	r1, #250	; 0xfa
 80023f0:	2041      	movs	r0, #65	; 0x41
 80023f2:	f000 ff25 	bl	8003240 <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 80023f6:	2301      	movs	r3, #1
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	2318      	movs	r3, #24
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2300      	movs	r3, #0
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <mode_game_lcd+0xcc>)
 8002406:	2169      	movs	r1, #105	; 0x69
 8002408:	2054      	movs	r0, #84	; 0x54
 800240a:	f001 fcf4 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 800240e:	2301      	movs	r3, #1
 8002410:	9302      	str	r3, [sp, #8]
 8002412:	2318      	movs	r3, #24
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	4a11      	ldr	r2, [pc, #68]	; (8002464 <mode_game_lcd+0xd0>)
 800241e:	219b      	movs	r1, #155	; 0x9b
 8002420:	2060      	movs	r0, #96	; 0x60
 8002422:	f001 fce8 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 8002426:	2301      	movs	r3, #1
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	2318      	movs	r3, #24
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2300      	movs	r3, #0
 8002434:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <mode_game_lcd+0xd4>)
 8002436:	21cd      	movs	r1, #205	; 0xcd
 8002438:	2060      	movs	r0, #96	; 0x60
 800243a:	f001 fcdc 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 800243e:	2301      	movs	r3, #1
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	2318      	movs	r3, #24
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	2300      	movs	r3, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2300      	movs	r3, #0
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <mode_game_lcd+0xd8>)
 800244e:	21ff      	movs	r1, #255	; 0xff
 8002450:	2064      	movs	r0, #100	; 0x64
 8002452:	f001 fcd0 	bl	8003df6 <lcd_ShowStr>
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08036b9c 	.word	0x08036b9c
 8002460:	0800de50 	.word	0x0800de50
 8002464:	0800de58 	.word	0x0800de58
 8002468:	0800de60 	.word	0x0800de60
 800246c:	0800de68 	.word	0x0800de68

08002470 <highscore_lcd>:

void highscore_lcd(){
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_highscore);
 8002476:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <highscore_lcd+0x17c>)
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800247e:	22f0      	movs	r2, #240	; 0xf0
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f001 f9e6 	bl	8003854 <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 8002488:	2301      	movs	r3, #1
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	2310      	movs	r3, #16
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2300      	movs	r3, #0
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2300      	movs	r3, #0
 8002496:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <highscore_lcd+0x180>)
 8002498:	2150      	movs	r1, #80	; 0x50
 800249a:	200a      	movs	r0, #10
 800249c:	f001 fcab 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 80024a0:	2301      	movs	r3, #1
 80024a2:	9302      	str	r3, [sp, #8]
 80024a4:	2310      	movs	r3, #16
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2300      	movs	r3, #0
 80024ae:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <highscore_lcd+0x184>)
 80024b0:	2150      	movs	r1, #80	; 0x50
 80024b2:	203c      	movs	r0, #60	; 0x3c
 80024b4:	f001 fc9f 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 80024b8:	2301      	movs	r3, #1
 80024ba:	9302      	str	r3, [sp, #8]
 80024bc:	2310      	movs	r3, #16
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	2300      	movs	r3, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2300      	movs	r3, #0
 80024c6:	4a4c      	ldr	r2, [pc, #304]	; (80025f8 <highscore_lcd+0x188>)
 80024c8:	2150      	movs	r1, #80	; 0x50
 80024ca:	20a0      	movs	r0, #160	; 0xa0
 80024cc:	f001 fc93 	bl	8003df6 <lcd_ShowStr>
	char c[10] = "";
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e051      	b.n	8002588 <highscore_lcd+0x118>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3305      	adds	r3, #5
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	b29c      	uxth	r4, r3
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	1d39      	adds	r1, r7, #4
 80024f2:	220a      	movs	r2, #10
 80024f4:	4618      	mov	r0, r3
 80024f6:	f009 fcff 	bl	800bef8 <itoa>
 80024fa:	4602      	mov	r2, r0
 80024fc:	2301      	movs	r3, #1
 80024fe:	9302      	str	r3, [sp, #8]
 8002500:	2310      	movs	r3, #16
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	2300      	movs	r3, #0
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2300      	movs	r3, #0
 800250a:	4621      	mov	r1, r4
 800250c:	200a      	movs	r0, #10
 800250e:	f001 fc72 	bl	8003df6 <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3305      	adds	r3, #5
 8002516:	b29b      	uxth	r3, r3
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	b299      	uxth	r1, r3
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <highscore_lcd+0x18c>)
 800252a:	441a      	add	r2, r3
 800252c:	2301      	movs	r3, #1
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	2310      	movs	r3, #16
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	203c      	movs	r0, #60	; 0x3c
 800253c:	f001 fc5b 	bl	8003df6 <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	3305      	adds	r3, #5
 8002544:	b29b      	uxth	r3, r3
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	b29c      	uxth	r4, r3
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	492b      	ldr	r1, [pc, #172]	; (80025fc <highscore_lcd+0x18c>)
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	330a      	adds	r3, #10
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	220a      	movs	r2, #10
 8002564:	4619      	mov	r1, r3
 8002566:	f009 fcc7 	bl	800bef8 <itoa>
 800256a:	4602      	mov	r2, r0
 800256c:	2301      	movs	r3, #1
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	2310      	movs	r3, #16
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2300      	movs	r3, #0
 800257a:	4621      	mov	r1, r4
 800257c:	20a0      	movs	r0, #160	; 0xa0
 800257e:	f001 fc3a 	bl	8003df6 <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	3301      	adds	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <highscore_lcd+0x190>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	429a      	cmp	r2, r3
 8002590:	d9a8      	bls.n	80024e4 <highscore_lcd+0x74>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8002592:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f240 131d 	movw	r3, #285	; 0x11d
 800259c:	22b9      	movs	r2, #185	; 0xb9
 800259e:	21fa      	movs	r1, #250	; 0xfa
 80025a0:	2041      	movs	r0, #65	; 0x41
 80025a2:	f000 fe4d 	bl	8003240 <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 80025a6:	2301      	movs	r3, #1
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	2318      	movs	r3, #24
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	2300      	movs	r3, #0
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2300      	movs	r3, #0
 80025b4:	4a13      	ldr	r2, [pc, #76]	; (8002604 <highscore_lcd+0x194>)
 80025b6:	21ff      	movs	r1, #255	; 0xff
 80025b8:	2064      	movs	r0, #100	; 0x64
 80025ba:	f001 fc1c 	bl	8003df6 <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f240 131d 	movw	r3, #285	; 0x11d
 80025c6:	22b9      	movs	r2, #185	; 0xb9
 80025c8:	21fa      	movs	r1, #250	; 0xfa
 80025ca:	2041      	movs	r0, #65	; 0x41
 80025cc:	f000 ff09 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80025d0:	2300      	movs	r3, #0
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80025d8:	22b8      	movs	r2, #184	; 0xb8
 80025da:	21fb      	movs	r1, #251	; 0xfb
 80025dc:	2042      	movs	r0, #66	; 0x42
 80025de:	f000 ff00 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop
 80025ec:	0805c39c 	.word	0x0805c39c
 80025f0:	0800de70 	.word	0x0800de70
 80025f4:	0800de78 	.word	0x0800de78
 80025f8:	0800de80 	.word	0x0800de80
 80025fc:	20000200 	.word	0x20000200
 8002600:	2000026c 	.word	0x2000026c
 8002604:	0800de68 	.word	0x0800de68

08002608 <game_lcd>:

void game_lcd(){
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 800260e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002612:	f000 fde3 	bl	80031dc <lcd_Clear>
	lcd_Fill(0, 0, 239, POS_Y_MIN - 1, LGRAYBLUE);
 8002616:	f24a 6351 	movw	r3, #42577	; 0xa651
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2311      	movs	r3, #17
 800261e:	22ef      	movs	r2, #239	; 0xef
 8002620:	2100      	movs	r1, #0
 8002622:	2000      	movs	r0, #0
 8002624:	f000 fe0c 	bl	8003240 <lcd_Fill>
	lcd_Fill(0, POS_Y_MAX + 1, 239, 319, LGRAYBLUE);
 8002628:	f24a 6351 	movw	r3, #42577	; 0xa651
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	f240 133f 	movw	r3, #319	; 0x13f
 8002632:	22ef      	movs	r2, #239	; 0xef
 8002634:	21c8      	movs	r1, #200	; 0xc8
 8002636:	2000      	movs	r0, #0
 8002638:	f000 fe02 	bl	8003240 <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 800263c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f240 133b 	movw	r3, #315	; 0x13b
 8002646:	224b      	movs	r2, #75	; 0x4b
 8002648:	f240 1109 	movw	r1, #265	; 0x109
 800264c:	2005      	movs	r0, #5
 800264e:	f000 fdf7 	bl	8003240 <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 8002652:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f240 133b 	movw	r3, #315	; 0x13b
 800265c:	22eb      	movs	r2, #235	; 0xeb
 800265e:	f240 1109 	movw	r1, #265	; 0x109
 8002662:	20a5      	movs	r0, #165	; 0xa5
 8002664:	f000 fdec 	bl	8003240 <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 8002668:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	23ff      	movs	r3, #255	; 0xff
 8002670:	229b      	movs	r2, #155	; 0x9b
 8002672:	21cd      	movs	r1, #205	; 0xcd
 8002674:	2055      	movs	r0, #85	; 0x55
 8002676:	f000 fde3 	bl	8003240 <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 800267a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	f240 133b 	movw	r3, #315	; 0x13b
 8002684:	229b      	movs	r2, #155	; 0x9b
 8002686:	f240 1109 	movw	r1, #265	; 0x109
 800268a:	2055      	movs	r0, #85	; 0x55
 800268c:	f000 fdd8 	bl	8003240 <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 8002690:	2301      	movs	r3, #1
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2319      	movs	r3, #25
 8002696:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800269a:	21e6      	movs	r1, #230	; 0xe6
 800269c:	20c8      	movs	r0, #200	; 0xc8
 800269e:	f001 fb3e 	bl	8003d1e <lcd_DrawCircle>
	lcd_ShowStr(POS_X_TEMP, POS_Y_TEMP, "TEMP:", BLACK, BLACK, 12, 1);
 80026a2:	2301      	movs	r3, #1
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	230c      	movs	r3, #12
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	4a27      	ldr	r2, [pc, #156]	; (8002750 <game_lcd+0x148>)
 80026b2:	2103      	movs	r1, #3
 80026b4:	200a      	movs	r0, #10
 80026b6:	f001 fb9e 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_TEMP + 65, POS_Y_TEMP, "oC", BLACK, BLACK, 12, 1);
 80026ba:	2301      	movs	r3, #1
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	230c      	movs	r3, #12
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <game_lcd+0x14c>)
 80026ca:	2103      	movs	r1, #3
 80026cc:	204b      	movs	r0, #75	; 0x4b
 80026ce:	f001 fb92 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM, POS_Y_TEMP, "HUM:", BLACK, BLACK, 12, 1);
 80026d2:	2301      	movs	r3, #1
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	230c      	movs	r3, #12
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2300      	movs	r3, #0
 80026e0:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <game_lcd+0x150>)
 80026e2:	2103      	movs	r1, #3
 80026e4:	206e      	movs	r0, #110	; 0x6e
 80026e6:	f001 fb86 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_HUM + 40, POS_Y_TEMP, "%", BLACK, BLACK, 12, 1);
 80026ea:	2301      	movs	r3, #1
 80026ec:	9302      	str	r3, [sp, #8]
 80026ee:	230c      	movs	r3, #12
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2300      	movs	r3, #0
 80026f8:	4a18      	ldr	r2, [pc, #96]	; (800275c <game_lcd+0x154>)
 80026fa:	2103      	movs	r1, #3
 80026fc:	2096      	movs	r0, #150	; 0x96
 80026fe:	f001 fb7a 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_LIGHT, POS_Y_TEMP, "LIGHT:", BLACK, BLACK, 12, 1);
 8002702:	2301      	movs	r3, #1
 8002704:	9302      	str	r3, [sp, #8]
 8002706:	230c      	movs	r3, #12
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	2300      	movs	r3, #0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2300      	movs	r3, #0
 8002710:	4a13      	ldr	r2, [pc, #76]	; (8002760 <game_lcd+0x158>)
 8002712:	2103      	movs	r1, #3
 8002714:	20aa      	movs	r0, #170	; 0xaa
 8002716:	f001 fb6e 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 800271a:	2301      	movs	r3, #1
 800271c:	9302      	str	r3, [sp, #8]
 800271e:	2310      	movs	r3, #16
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <game_lcd+0x15c>)
 800272a:	21de      	movs	r1, #222	; 0xde
 800272c:	20b6      	movs	r0, #182	; 0xb6
 800272e:	f001 fb62 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 8002732:	2301      	movs	r3, #1
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	2310      	movs	r3, #16
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2300      	movs	r3, #0
 8002740:	4a09      	ldr	r2, [pc, #36]	; (8002768 <game_lcd+0x160>)
 8002742:	21cd      	movs	r1, #205	; 0xcd
 8002744:	2005      	movs	r0, #5
 8002746:	f001 fb56 	bl	8003df6 <lcd_ShowStr>
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	0800de88 	.word	0x0800de88
 8002754:	0800de90 	.word	0x0800de90
 8002758:	0800de94 	.word	0x0800de94
 800275c:	0800de9c 	.word	0x0800de9c
 8002760:	0800dea0 	.word	0x0800dea0
 8002764:	0800dea8 	.word	0x0800dea8
 8002768:	0800deb0 	.word	0x0800deb0

0800276c <environment_lcd>:

void environment_lcd(){
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af04      	add	r7, sp, #16
	lcd_ShowFloatNum(POS_X_TEMP + 30, POS_Y_TEMP, current_temp, 4, BLACK, LGRAYBLUE, 12);
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <environment_lcd+0x64>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	230c      	movs	r3, #12
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	f24a 6351 	movw	r3, #42577	; 0xa651
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	2204      	movs	r2, #4
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	2103      	movs	r1, #3
 800278c:	2028      	movs	r0, #40	; 0x28
 800278e:	f000 ffd9 	bl	8003744 <lcd_ShowFloatNum>
	lcd_ShowIntNum(POS_X_HUM + 25, POS_Y_TEMP, current_hum, 2, BLACK, LGRAYBLUE, 12);
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <environment_lcd+0x68>)
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	230c      	movs	r3, #12
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	f24a 6351 	movw	r3, #42577	; 0xa651
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2302      	movs	r3, #2
 80027a6:	2103      	movs	r1, #3
 80027a8:	2087      	movs	r0, #135	; 0x87
 80027aa:	f000 ff4d 	bl	8003648 <lcd_ShowIntNum>
	lcd_ShowIntNum(POS_X_LIGHT + 37, POS_Y_TEMP, current_light, 4, BLACK, LGRAYBLUE, 12);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <environment_lcd+0x6c>)
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	230c      	movs	r3, #12
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	f24a 6351 	movw	r3, #42577	; 0xa651
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2300      	movs	r3, #0
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2304      	movs	r3, #4
 80027c2:	2103      	movs	r1, #3
 80027c4:	20cf      	movs	r0, #207	; 0xcf
 80027c6:	f000 ff3f 	bl	8003648 <lcd_ShowIntNum>
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000004 	.word	0x20000004
 80027d4:	20000008 	.word	0x20000008
 80027d8:	2000000a 	.word	0x2000000a

080027dc <score_lcd>:

void score_lcd(){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 80027e2:	4b09      	ldr	r3, [pc, #36]	; (8002808 <score_lcd+0x2c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	2310      	movs	r3, #16
 80027ea:	9302      	str	r3, [sp, #8]
 80027ec:	f24a 6351 	movw	r3, #42577	; 0xa651
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2300      	movs	r3, #0
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2305      	movs	r3, #5
 80027f8:	21dd      	movs	r1, #221	; 0xdd
 80027fa:	2005      	movs	r0, #5
 80027fc:	f000 ff24 	bl	8003648 <lcd_ShowIntNum>
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <pause_lcd>:

void pause_lcd(){
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_pause);
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <pause_lcd+0x74>)
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800281a:	22f0      	movs	r2, #240	; 0xf0
 800281c:	2100      	movs	r1, #0
 800281e:	2000      	movs	r0, #0
 8002820:	f001 f818 	bl	8003854 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8002824:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	23b9      	movs	r3, #185	; 0xb9
 800282c:	22b9      	movs	r2, #185	; 0xb9
 800282e:	2196      	movs	r1, #150	; 0x96
 8002830:	2041      	movs	r0, #65	; 0x41
 8002832:	f000 fd05 	bl	8003240 <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002836:	f64b 4340 	movw	r3, #48192	; 0xbc40
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	23eb      	movs	r3, #235	; 0xeb
 800283e:	22b9      	movs	r2, #185	; 0xb9
 8002840:	21c8      	movs	r1, #200	; 0xc8
 8002842:	2041      	movs	r0, #65	; 0x41
 8002844:	f000 fcfc 	bl	8003240 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8002848:	2301      	movs	r3, #1
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	2318      	movs	r3, #24
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2300      	movs	r3, #0
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <pause_lcd+0x78>)
 8002858:	219b      	movs	r1, #155	; 0x9b
 800285a:	205a      	movs	r0, #90	; 0x5a
 800285c:	f001 facb 	bl	8003df6 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002860:	2301      	movs	r3, #1
 8002862:	9302      	str	r3, [sp, #8]
 8002864:	2318      	movs	r3, #24
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	2300      	movs	r3, #0
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2300      	movs	r3, #0
 800286e:	4a06      	ldr	r2, [pc, #24]	; (8002888 <pause_lcd+0x7c>)
 8002870:	21cd      	movs	r1, #205	; 0xcd
 8002872:	2064      	movs	r0, #100	; 0x64
 8002874:	f001 fabf 	bl	8003df6 <lcd_ShowStr>
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	08081b9c 	.word	0x08081b9c
 8002884:	0800deb8 	.word	0x0800deb8
 8002888:	0800de68 	.word	0x0800de68

0800288c <game_over_lcd>:

void game_over_lcd(){
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 8002892:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <game_over_lcd+0x68>)
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800289a:	22f0      	movs	r2, #240	; 0xf0
 800289c:	2100      	movs	r1, #0
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 ffd8 	bl	8003854 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 80028a4:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	23eb      	movs	r3, #235	; 0xeb
 80028ac:	22b9      	movs	r2, #185	; 0xb9
 80028ae:	21c8      	movs	r1, #200	; 0xc8
 80028b0:	2041      	movs	r0, #65	; 0x41
 80028b2:	f000 fcc5 	bl	8003240 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80028b6:	2300      	movs	r3, #0
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	23eb      	movs	r3, #235	; 0xeb
 80028bc:	22b9      	movs	r2, #185	; 0xb9
 80028be:	21c8      	movs	r1, #200	; 0xc8
 80028c0:	2041      	movs	r0, #65	; 0x41
 80028c2:	f000 fd8e 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	23ea      	movs	r3, #234	; 0xea
 80028cc:	22b8      	movs	r2, #184	; 0xb8
 80028ce:	21c9      	movs	r1, #201	; 0xc9
 80028d0:	2042      	movs	r0, #66	; 0x42
 80028d2:	f000 fd86 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 80028d6:	2301      	movs	r3, #1
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	2318      	movs	r3, #24
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <game_over_lcd+0x6c>)
 80028e6:	21cd      	movs	r1, #205	; 0xcd
 80028e8:	2064      	movs	r0, #100	; 0x64
 80028ea:	f001 fa84 	bl	8003df6 <lcd_ShowStr>
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	080a739c 	.word	0x080a739c
 80028f8:	0800de68 	.word	0x0800de68

080028fc <youwin_lcd>:

void youwin_lcd(){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <youwin_lcd+0x68>)
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800290a:	22f0      	movs	r2, #240	; 0xf0
 800290c:	2100      	movs	r1, #0
 800290e:	2000      	movs	r0, #0
 8002910:	f000 ffa0 	bl	8003854 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8002914:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	23eb      	movs	r3, #235	; 0xeb
 800291c:	22b9      	movs	r2, #185	; 0xb9
 800291e:	21c8      	movs	r1, #200	; 0xc8
 8002920:	2041      	movs	r0, #65	; 0x41
 8002922:	f000 fc8d 	bl	8003240 <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	23eb      	movs	r3, #235	; 0xeb
 800292c:	22b9      	movs	r2, #185	; 0xb9
 800292e:	21c8      	movs	r1, #200	; 0xc8
 8002930:	2041      	movs	r0, #65	; 0x41
 8002932:	f000 fd56 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002936:	2300      	movs	r3, #0
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	23ea      	movs	r3, #234	; 0xea
 800293c:	22b8      	movs	r2, #184	; 0xb8
 800293e:	21c9      	movs	r1, #201	; 0xc9
 8002940:	2042      	movs	r0, #66	; 0x42
 8002942:	f000 fd4e 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8002946:	2301      	movs	r3, #1
 8002948:	9302      	str	r3, [sp, #8]
 800294a:	2318      	movs	r3, #24
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <youwin_lcd+0x6c>)
 8002956:	21cd      	movs	r1, #205	; 0xcd
 8002958:	2064      	movs	r0, #100	; 0x64
 800295a:	f001 fa4c 	bl	8003df6 <lcd_ShowStr>
}
 800295e:	bf00      	nop
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	080ccb9c 	.word	0x080ccb9c
 8002968:	0800de68 	.word	0x0800de68

0800296c <uppercase_lcd>:

void uppercase_lcd(){
 800296c:	b5b0      	push	{r4, r5, r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002972:	2300      	movs	r3, #0
 8002974:	71fb      	strb	r3, [r7, #7]
 8002976:	e036      	b.n	80029e6 <uppercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002978:	2300      	movs	r3, #0
 800297a:	71bb      	strb	r3, [r7, #6]
 800297c:	e02d      	b.n	80029da <uppercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_upper[i][j], BLACK, BROWN, 16, 0);
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	00d2      	lsls	r2, r2, #3
 8002986:	441a      	add	r2, r3
 8002988:	0052      	lsls	r2, r2, #1
 800298a:	4413      	add	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b29b      	uxth	r3, r3
 8002990:	3316      	adds	r3, #22
 8002992:	b298      	uxth	r0, r3
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	00d2      	lsls	r2, r2, #3
 800299c:	441a      	add	r2, r3
 800299e:	0052      	lsls	r2, r2, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3386      	adds	r3, #134	; 0x86
 80029a8:	b29c      	uxth	r4, r3
 80029aa:	79fa      	ldrb	r2, [r7, #7]
 80029ac:	79b9      	ldrb	r1, [r7, #6]
 80029ae:	4d12      	ldr	r5, [pc, #72]	; (80029f8 <uppercase_lcd+0x8c>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	442b      	add	r3, r5
 80029ba:	440b      	add	r3, r1
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	2300      	movs	r3, #0
 80029c0:	9302      	str	r3, [sp, #8]
 80029c2:	2310      	movs	r3, #16
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	4621      	mov	r1, r4
 80029d0:	f000 fd3e 	bl	8003450 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 80029d4:	79bb      	ldrb	r3, [r7, #6]
 80029d6:	3301      	adds	r3, #1
 80029d8:	71bb      	strb	r3, [r7, #6]
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d9ce      	bls.n	800297e <uppercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	3301      	adds	r3, #1
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d9c5      	bls.n	8002978 <uppercase_lcd+0xc>
		}
	}
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bdb0      	pop	{r4, r5, r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000002c 	.word	0x2000002c

080029fc <lowercase_lcd>:

void lowercase_lcd(){
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af04      	add	r7, sp, #16
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002a02:	2300      	movs	r3, #0
 8002a04:	71fb      	strb	r3, [r7, #7]
 8002a06:	e036      	b.n	8002a76 <lowercase_lcd+0x7a>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002a08:	2300      	movs	r3, #0
 8002a0a:	71bb      	strb	r3, [r7, #6]
 8002a0c:	e02d      	b.n	8002a6a <lowercase_lcd+0x6e>
			lcd_ShowChar(POS_X_CHAR + j * CHAR_WIDTH + 16, POS_Y_CHAR + i * CHAR_HEIGHT + 10, char_lower[i][j], BLACK, BROWN, 16, 0);
 8002a0e:	79bb      	ldrb	r3, [r7, #6]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	00d2      	lsls	r2, r2, #3
 8002a16:	441a      	add	r2, r3
 8002a18:	0052      	lsls	r2, r2, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3316      	adds	r3, #22
 8002a22:	b298      	uxth	r0, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	00d2      	lsls	r2, r2, #3
 8002a2c:	441a      	add	r2, r3
 8002a2e:	0052      	lsls	r2, r2, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3386      	adds	r3, #134	; 0x86
 8002a38:	b29c      	uxth	r4, r3
 8002a3a:	79fa      	ldrb	r2, [r7, #7]
 8002a3c:	79b9      	ldrb	r1, [r7, #6]
 8002a3e:	4d12      	ldr	r5, [pc, #72]	; (8002a88 <lowercase_lcd+0x8c>)
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	442b      	add	r3, r5
 8002a4a:	440b      	add	r3, r1
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9302      	str	r3, [sp, #8]
 8002a52:	2310      	movs	r3, #16
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	4621      	mov	r1, r4
 8002a60:	f000 fcf6 	bl	8003450 <lcd_ShowChar>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002a64:	79bb      	ldrb	r3, [r7, #6]
 8002a66:	3301      	adds	r3, #1
 8002a68:	71bb      	strb	r3, [r7, #6]
 8002a6a:	79bb      	ldrb	r3, [r7, #6]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d9ce      	bls.n	8002a0e <lowercase_lcd+0x12>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	3301      	adds	r3, #1
 8002a74:	71fb      	strb	r3, [r7, #7]
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d9c5      	bls.n	8002a08 <lowercase_lcd+0xc>
		}
	}
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bdb0      	pop	{r4, r5, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	2000004c 	.word	0x2000004c

08002a8c <selectbox_lcd>:

void selectbox_lcd(){
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_CHAR + index_y_old * CHAR_WIDTH, POS_Y_CHAR + index_x_old * CHAR_HEIGHT,
 8002a92:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <selectbox_lcd+0xf8>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	461a      	mov	r2, r3
 8002a9a:	00d2      	lsls	r2, r2, #3
 8002a9c:	441a      	add	r2, r3
 8002a9e:	0052      	lsls	r2, r2, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3306      	adds	r3, #6
 8002aa8:	b298      	uxth	r0, r3
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <selectbox_lcd+0xfc>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	00d2      	lsls	r2, r2, #3
 8002ab4:	441a      	add	r2, r3
 8002ab6:	0052      	lsls	r2, r2, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	337c      	adds	r3, #124	; 0x7c
 8002ac0:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_y_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_x_old + 1) * CHAR_HEIGHT, GRAY);
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <selectbox_lcd+0xf8>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_y_old * CHAR_WIDTH, POS_Y_CHAR + index_x_old * CHAR_HEIGHT,
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	00d2      	lsls	r2, r2, #3
 8002ace:	441a      	add	r2, r3
 8002ad0:	0052      	lsls	r2, r2, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3306      	adds	r3, #6
 8002ada:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_y_old + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_x_old + 1) * CHAR_HEIGHT, GRAY);
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <selectbox_lcd+0xfc>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_y_old * CHAR_WIDTH, POS_Y_CHAR + index_x_old * CHAR_HEIGHT,
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461c      	mov	r4, r3
 8002ae6:	00e4      	lsls	r4, r4, #3
 8002ae8:	441c      	add	r4, r3
 8002aea:	0064      	lsls	r4, r4, #1
 8002aec:	4423      	add	r3, r4
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	337c      	adds	r3, #124	; 0x7c
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f248 4430 	movw	r4, #33840	; 0x8430
 8002afa:	9400      	str	r4, [sp, #0]
 8002afc:	f000 fc71 	bl	80033e2 <lcd_DrawRectangle>
	lcd_DrawRectangle(POS_X_CHAR + index_y * CHAR_WIDTH, POS_Y_CHAR + index_x * CHAR_HEIGHT,
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <selectbox_lcd+0x100>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	00d2      	lsls	r2, r2, #3
 8002b0a:	441a      	add	r2, r3
 8002b0c:	0052      	lsls	r2, r2, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3306      	adds	r3, #6
 8002b16:	b298      	uxth	r0, r3
 8002b18:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <selectbox_lcd+0x104>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	00d2      	lsls	r2, r2, #3
 8002b22:	441a      	add	r2, r3
 8002b24:	0052      	lsls	r2, r2, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	337c      	adds	r3, #124	; 0x7c
 8002b2e:	b299      	uxth	r1, r3
			POS_X_CHAR + (index_y + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_x + 1) * CHAR_HEIGHT, BLACK);
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <selectbox_lcd+0x100>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_y * CHAR_WIDTH, POS_Y_CHAR + index_x * CHAR_HEIGHT,
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	00d2      	lsls	r2, r2, #3
 8002b3c:	441a      	add	r2, r3
 8002b3e:	0052      	lsls	r2, r2, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3306      	adds	r3, #6
 8002b48:	b29a      	uxth	r2, r3
			POS_X_CHAR + (index_y + 1) * CHAR_WIDTH, POS_Y_CHAR + (index_x + 1) * CHAR_HEIGHT, BLACK);
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <selectbox_lcd+0x104>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
	lcd_DrawRectangle(POS_X_CHAR + index_y * CHAR_WIDTH, POS_Y_CHAR + index_x * CHAR_HEIGHT,
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	461c      	mov	r4, r3
 8002b54:	00e4      	lsls	r4, r4, #3
 8002b56:	441c      	add	r4, r3
 8002b58:	0064      	lsls	r4, r4, #1
 8002b5a:	4423      	add	r3, r4
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	337c      	adds	r3, #124	; 0x7c
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2400      	movs	r4, #0
 8002b66:	9400      	str	r4, [sp, #0]
 8002b68:	f000 fc3b 	bl	80033e2 <lcd_DrawRectangle>
	index_x_old = index_x;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <selectbox_lcd+0x104>)
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <selectbox_lcd+0xfc>)
 8002b72:	701a      	strb	r2, [r3, #0]
	index_y_old = index_y;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <selectbox_lcd+0x100>)
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <selectbox_lcd+0xf8>)
 8002b7a:	701a      	strb	r2, [r3, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	3704      	adds	r7, #4
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd90      	pop	{r4, r7, pc}
 8002b84:	2000066a 	.word	0x2000066a
 8002b88:	20000669 	.word	0x20000669
 8002b8c:	20000029 	.word	0x20000029
 8002b90:	20000028 	.word	0x20000028

08002b94 <entername_lcd>:

void entername_lcd(){
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af02      	add	r7, sp, #8
	lcd_Fill(POS_X_CHAR, POS_Y_CHAR,
 8002b9a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8002ba4:	22ea      	movs	r2, #234	; 0xea
 8002ba6:	217c      	movs	r1, #124	; 0x7c
 8002ba8:	2006      	movs	r0, #6
 8002baa:	f000 fb49 	bl	8003240 <lcd_Fill>
			POS_X_CHAR + CHAR_COL*CHAR_WIDTH, POS_Y_CHAR + CHAR_ROW*CHAR_HEIGHT, BROWN);
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002bae:	2300      	movs	r3, #0
 8002bb0:	71fb      	strb	r3, [r7, #7]
 8002bb2:	e03e      	b.n	8002c32 <entername_lcd+0x9e>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	71bb      	strb	r3, [r7, #6]
 8002bb8:	e035      	b.n	8002c26 <entername_lcd+0x92>
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	00d2      	lsls	r2, r2, #3
 8002bc2:	441a      	add	r2, r3
 8002bc4:	0052      	lsls	r2, r2, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3306      	adds	r3, #6
 8002bce:	b298      	uxth	r0, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	441a      	add	r2, r3
 8002bda:	0052      	lsls	r2, r2, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	337c      	adds	r3, #124	; 0x7c
 8002be4:	b299      	uxth	r1, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 8002be6:	79bb      	ldrb	r3, [r7, #6]
 8002be8:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	00d2      	lsls	r2, r2, #3
 8002bf0:	441a      	add	r2, r3
 8002bf2:	0052      	lsls	r2, r2, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3306      	adds	r3, #6
 8002bfc:	b29a      	uxth	r2, r3
					POS_X_CHAR + (j + 1) * CHAR_WIDTH, POS_Y_CHAR + (i + 1) * CHAR_HEIGHT, GRAY);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	3301      	adds	r3, #1
			lcd_DrawRectangle(POS_X_CHAR + j * CHAR_WIDTH, POS_Y_CHAR + i * CHAR_HEIGHT,
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461c      	mov	r4, r3
 8002c06:	00e4      	lsls	r4, r4, #3
 8002c08:	441c      	add	r4, r3
 8002c0a:	0064      	lsls	r4, r4, #1
 8002c0c:	4423      	add	r3, r4
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	337c      	adds	r3, #124	; 0x7c
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f248 4430 	movw	r4, #33840	; 0x8430
 8002c1a:	9400      	str	r4, [sp, #0]
 8002c1c:	f000 fbe1 	bl	80033e2 <lcd_DrawRectangle>
		for(uint8_t j = 0; j < CHAR_COL; j++){
 8002c20:	79bb      	ldrb	r3, [r7, #6]
 8002c22:	3301      	adds	r3, #1
 8002c24:	71bb      	strb	r3, [r7, #6]
 8002c26:	79bb      	ldrb	r3, [r7, #6]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d9c6      	bls.n	8002bba <entername_lcd+0x26>
	for(uint8_t i = 0; i < CHAR_ROW; i++){
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	71fb      	strb	r3, [r7, #7]
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d9bd      	bls.n	8002bb4 <entername_lcd+0x20>
		}
	}
	uppercase_lcd();
 8002c38:	f7ff fe98 	bl	800296c <uppercase_lcd>
	HAL_Delay(3000);
 8002c3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c40:	f003 fad2 	bl	80061e8 <HAL_Delay>
	lowercase_lcd();
 8002c44:	f7ff feda 	bl	80029fc <lowercase_lcd>
	HAL_Delay(3000);
 8002c48:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c4c:	f003 facc 	bl	80061e8 <HAL_Delay>
	selectbox_lcd();
 8002c50:	f7ff ff1c 	bl	8002a8c <selectbox_lcd>
	index_x = 4;
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <entername_lcd+0xe0>)
 8002c56:	2204      	movs	r2, #4
 8002c58:	701a      	strb	r2, [r3, #0]
	index_y = 3;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <entername_lcd+0xe4>)
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(3000);
 8002c60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c64:	f003 fac0 	bl	80061e8 <HAL_Delay>
	selectbox_lcd();
 8002c68:	f7ff ff10 	bl	8002a8c <selectbox_lcd>
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd90      	pop	{r4, r7, pc}
 8002c74:	20000028 	.word	0x20000028
 8002c78:	20000029 	.word	0x20000029

08002c7c <home_not_select>:

void home_not_select(){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8002c82:	f248 4330 	movw	r3, #33840	; 0x8430
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	23b9      	movs	r3, #185	; 0xb9
 8002c8a:	22b9      	movs	r2, #185	; 0xb9
 8002c8c:	2196      	movs	r1, #150	; 0x96
 8002c8e:	2041      	movs	r0, #65	; 0x41
 8002c90:	f000 fba7 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8002c94:	f248 4330 	movw	r3, #33840	; 0x8430
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	23b8      	movs	r3, #184	; 0xb8
 8002c9c:	22b8      	movs	r2, #184	; 0xb8
 8002c9e:	2197      	movs	r1, #151	; 0x97
 8002ca0:	2042      	movs	r0, #66	; 0x42
 8002ca2:	f000 fb9e 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002ca6:	f248 4330 	movw	r3, #33840	; 0x8430
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	23eb      	movs	r3, #235	; 0xeb
 8002cae:	22b9      	movs	r2, #185	; 0xb9
 8002cb0:	21c8      	movs	r1, #200	; 0xc8
 8002cb2:	2041      	movs	r0, #65	; 0x41
 8002cb4:	f000 fb95 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002cb8:	f248 4330 	movw	r3, #33840	; 0x8430
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	23ea      	movs	r3, #234	; 0xea
 8002cc0:	22b8      	movs	r2, #184	; 0xb8
 8002cc2:	21c9      	movs	r1, #201	; 0xc9
 8002cc4:	2042      	movs	r0, #66	; 0x42
 8002cc6:	f000 fb8c 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002cca:	f248 4330 	movw	r3, #33840	; 0x8430
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	f240 131d 	movw	r3, #285	; 0x11d
 8002cd4:	22b9      	movs	r2, #185	; 0xb9
 8002cd6:	21fa      	movs	r1, #250	; 0xfa
 8002cd8:	2041      	movs	r0, #65	; 0x41
 8002cda:	f000 fb82 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002cde:	f248 4330 	movw	r3, #33840	; 0x8430
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002ce8:	22b8      	movs	r2, #184	; 0xb8
 8002cea:	21fb      	movs	r1, #251	; 0xfb
 8002cec:	2042      	movs	r0, #66	; 0x42
 8002cee:	f000 fb78 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <home_second_lcd>:

void home_second_lcd(){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af02      	add	r7, sp, #8
	home_not_select();
 8002cfe:	f7ff ffbd 	bl	8002c7c <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	23b9      	movs	r3, #185	; 0xb9
 8002d08:	22b9      	movs	r2, #185	; 0xb9
 8002d0a:	2196      	movs	r1, #150	; 0x96
 8002d0c:	2041      	movs	r0, #65	; 0x41
 8002d0e:	f000 fb68 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	23b8      	movs	r3, #184	; 0xb8
 8002d18:	22b8      	movs	r2, #184	; 0xb8
 8002d1a:	2197      	movs	r1, #151	; 0x97
 8002d1c:	2042      	movs	r0, #66	; 0x42
 8002d1e:	f000 fb60 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <home_third_lcd>:

void home_third_lcd(){
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af02      	add	r7, sp, #8
	home_not_select();
 8002d2e:	f7ff ffa5 	bl	8002c7c <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002d32:	2300      	movs	r3, #0
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	23eb      	movs	r3, #235	; 0xeb
 8002d38:	22b9      	movs	r2, #185	; 0xb9
 8002d3a:	21c8      	movs	r1, #200	; 0xc8
 8002d3c:	2041      	movs	r0, #65	; 0x41
 8002d3e:	f000 fb50 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	23ea      	movs	r3, #234	; 0xea
 8002d48:	22b8      	movs	r2, #184	; 0xb8
 8002d4a:	21c9      	movs	r1, #201	; 0xc9
 8002d4c:	2042      	movs	r0, #66	; 0x42
 8002d4e:	f000 fb48 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <home_forth_lcd>:

void home_forth_lcd(){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af02      	add	r7, sp, #8
	home_not_select();
 8002d5e:	f7ff ff8d 	bl	8002c7c <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8002d62:	2300      	movs	r3, #0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f240 131d 	movw	r3, #285	; 0x11d
 8002d6a:	22b9      	movs	r2, #185	; 0xb9
 8002d6c:	21fa      	movs	r1, #250	; 0xfa
 8002d6e:	2041      	movs	r0, #65	; 0x41
 8002d70:	f000 fb37 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8002d7c:	22b8      	movs	r2, #184	; 0xb8
 8002d7e:	21fb      	movs	r1, #251	; 0xfb
 8002d80:	2042      	movs	r0, #66	; 0x42
 8002d82:	f000 fb2e 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <mode_first_lcd>:

void mode_first_lcd(){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8002d92:	2300      	movs	r3, #0
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2387      	movs	r3, #135	; 0x87
 8002d98:	22b9      	movs	r2, #185	; 0xb9
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	2041      	movs	r0, #65	; 0x41
 8002d9e:	f000 fb20 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8002da2:	2300      	movs	r3, #0
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2386      	movs	r3, #134	; 0x86
 8002da8:	22b8      	movs	r2, #184	; 0xb8
 8002daa:	2165      	movs	r1, #101	; 0x65
 8002dac:	2042      	movs	r0, #66	; 0x42
 8002dae:	f000 fb18 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, BLACK);
	home_not_select();
 8002db2:	f7ff ff63 	bl	8002c7c <home_not_select>
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <mode_second_lcd>:

void mode_second_lcd(){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8002dc2:	f248 4330 	movw	r3, #33840	; 0x8430
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	2387      	movs	r3, #135	; 0x87
 8002dca:	22b9      	movs	r2, #185	; 0xb9
 8002dcc:	2164      	movs	r1, #100	; 0x64
 8002dce:	2041      	movs	r0, #65	; 0x41
 8002dd0:	f000 fb07 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8002dd4:	f248 4330 	movw	r3, #33840	; 0x8430
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2386      	movs	r3, #134	; 0x86
 8002ddc:	22b8      	movs	r2, #184	; 0xb8
 8002dde:	2165      	movs	r1, #101	; 0x65
 8002de0:	2042      	movs	r0, #66	; 0x42
 8002de2:	f000 fafe 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_second_lcd();
 8002de6:	f7ff ff87 	bl	8002cf8 <home_second_lcd>
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <mode_third_lcd>:

void mode_third_lcd(){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8002df6:	f248 4330 	movw	r3, #33840	; 0x8430
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2387      	movs	r3, #135	; 0x87
 8002dfe:	22b9      	movs	r2, #185	; 0xb9
 8002e00:	2164      	movs	r1, #100	; 0x64
 8002e02:	2041      	movs	r0, #65	; 0x41
 8002e04:	f000 faed 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8002e08:	f248 4330 	movw	r3, #33840	; 0x8430
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	2386      	movs	r3, #134	; 0x86
 8002e10:	22b8      	movs	r2, #184	; 0xb8
 8002e12:	2165      	movs	r1, #101	; 0x65
 8002e14:	2042      	movs	r0, #66	; 0x42
 8002e16:	f000 fae4 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_third_lcd();
 8002e1a:	f7ff ff85 	bl	8002d28 <home_third_lcd>
}
 8002e1e:	bf00      	nop
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <mode_forth_lcd>:

void mode_forth_lcd(){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8002e2a:	f248 4330 	movw	r3, #33840	; 0x8430
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2387      	movs	r3, #135	; 0x87
 8002e32:	22b9      	movs	r2, #185	; 0xb9
 8002e34:	2164      	movs	r1, #100	; 0x64
 8002e36:	2041      	movs	r0, #65	; 0x41
 8002e38:	f000 fad3 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8002e3c:	f248 4330 	movw	r3, #33840	; 0x8430
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2386      	movs	r3, #134	; 0x86
 8002e44:	22b8      	movs	r2, #184	; 0xb8
 8002e46:	2165      	movs	r1, #101	; 0x65
 8002e48:	2042      	movs	r0, #66	; 0x42
 8002e4a:	f000 faca 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_forth_lcd();
 8002e4e:	f7ff ff83 	bl	8002d58 <home_forth_lcd>
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <pause_second_lcd>:

void pause_second_lcd(){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	23b9      	movs	r3, #185	; 0xb9
 8002e64:	22b9      	movs	r2, #185	; 0xb9
 8002e66:	2196      	movs	r1, #150	; 0x96
 8002e68:	2041      	movs	r0, #65	; 0x41
 8002e6a:	f000 faba 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	23b8      	movs	r3, #184	; 0xb8
 8002e74:	22b8      	movs	r2, #184	; 0xb8
 8002e76:	2197      	movs	r1, #151	; 0x97
 8002e78:	2042      	movs	r0, #66	; 0x42
 8002e7a:	f000 fab2 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002e7e:	f248 4330 	movw	r3, #33840	; 0x8430
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	23eb      	movs	r3, #235	; 0xeb
 8002e86:	22b9      	movs	r2, #185	; 0xb9
 8002e88:	21c8      	movs	r1, #200	; 0xc8
 8002e8a:	2041      	movs	r0, #65	; 0x41
 8002e8c:	f000 faa9 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002e90:	f248 4330 	movw	r3, #33840	; 0x8430
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	23ea      	movs	r3, #234	; 0xea
 8002e98:	22b8      	movs	r2, #184	; 0xb8
 8002e9a:	21c9      	movs	r1, #201	; 0xc9
 8002e9c:	2042      	movs	r0, #66	; 0x42
 8002e9e:	f000 faa0 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <pause_third_lcd>:

void pause_third_lcd(){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8002eae:	f248 4330 	movw	r3, #33840	; 0x8430
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	23b9      	movs	r3, #185	; 0xb9
 8002eb6:	22b9      	movs	r2, #185	; 0xb9
 8002eb8:	2196      	movs	r1, #150	; 0x96
 8002eba:	2041      	movs	r0, #65	; 0x41
 8002ebc:	f000 fa91 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8002ec0:	f248 4330 	movw	r3, #33840	; 0x8430
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	23b8      	movs	r3, #184	; 0xb8
 8002ec8:	22b8      	movs	r2, #184	; 0xb8
 8002eca:	2197      	movs	r1, #151	; 0x97
 8002ecc:	2042      	movs	r0, #66	; 0x42
 8002ece:	f000 fa88 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	23eb      	movs	r3, #235	; 0xeb
 8002ed8:	22b9      	movs	r2, #185	; 0xb9
 8002eda:	21c8      	movs	r1, #200	; 0xc8
 8002edc:	2041      	movs	r0, #65	; 0x41
 8002ede:	f000 fa80 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	23ea      	movs	r3, #234	; 0xea
 8002ee8:	22b8      	movs	r2, #184	; 0xb8
 8002eea:	21c9      	movs	r1, #201	; 0xc9
 8002eec:	2042      	movs	r0, #66	; 0x42
 8002eee:	f000 fa78 	bl	80033e2 <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <point_head_lcd>:

void point_head_lcd(struct Point head){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	463b      	mov	r3, r7
 8002f00:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(head.x, head.y, GREEN, RADIUS_SNAKE, 1);
 8002f04:	6838      	ldr	r0, [r7, #0]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f12:	f000 ff04 	bl	8003d1e <lcd_DrawCircle>
	lcd_DrawCircle(head.x, head.y, BLACK, 1, 1);
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2301      	movs	r3, #1
 8002f20:	2200      	movs	r2, #0
 8002f22:	f000 fefc 	bl	8003d1e <lcd_DrawCircle>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <point_snake_lcd>:

void point_snake_lcd(struct Point snake){
 8002f2e:	b590      	push	{r4, r7, lr}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af02      	add	r7, sp, #8
 8002f34:	463b      	mov	r3, r7
 8002f36:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(snake.x, snake.y, GREEN, RADIUS_SNAKE, 1);
 8002f3a:	6838      	ldr	r0, [r7, #0]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2304      	movs	r3, #4
 8002f44:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f48:	f000 fee9 	bl	8003d1e <lcd_DrawCircle>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b03      	subs	r3, #3
 8002f52:	b298      	uxth	r0, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8002f5c:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3304      	adds	r3, #4
 8002f62:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8002f64:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2 - 1,
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3304      	adds	r3, #4
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8002f70:	9400      	str	r4, [sp, #0]
 8002f72:	f000 f9b2 	bl	80032da <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b03      	subs	r3, #3
 8002f7c:	b298      	uxth	r0, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b02      	subs	r3, #2
 8002f84:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8002f86:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3303      	adds	r3, #3
 8002f8c:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 1, snake.y + RADIUS_SNAKE/2 + 2, BROWN);
 8002f8e:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2 - 1, snake.y - RADIUS_SNAKE/2,
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3304      	adds	r3, #4
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8002f9a:	9400      	str	r4, [sp, #0]
 8002f9c:	f000 f99d 	bl	80032da <lcd_DrawLine>
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b02      	subs	r3, #2
 8002fa6:	b298      	uxth	r0, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b03      	subs	r3, #3
 8002fae:	b299      	uxth	r1, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8002fb0:	683b      	ldr	r3, [r7, #0]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	b29a      	uxth	r2, r3
				 snake.x + RADIUS_SNAKE/2 + 2, snake.y + RADIUS_SNAKE/2 + 1, BROWN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
	lcd_DrawLine(snake.x - RADIUS_SNAKE/2,	   snake.y - RADIUS_SNAKE/2 - 1,
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3303      	adds	r3, #3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8002fc4:	9400      	str	r4, [sp, #0]
 8002fc6:	f000 f988 	bl	80032da <lcd_DrawLine>
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd90      	pop	{r4, r7, pc}

08002fd2 <point_food_lcd>:

void point_food_lcd(struct Point food){
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	463b      	mov	r3, r7
 8002fda:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(food.x, food.y, RED, RADIUS_SNAKE, 1);
 8002fde:	6838      	ldr	r0, [r7, #0]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2304      	movs	r3, #4
 8002fe8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002fec:	f000 fe97 	bl	8003d1e <lcd_DrawCircle>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <point_clr>:

void point_clr(struct Point clr){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	463b      	mov	r3, r7
 8003000:	e883 0003 	stmia.w	r3, {r0, r1}
	lcd_DrawCircle(clr.x, clr.y, WHITE, RADIUS_SNAKE, 1);
 8003004:	6838      	ldr	r0, [r7, #0]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	2301      	movs	r3, #1
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2304      	movs	r3, #4
 800300e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003012:	f000 fe84 	bl	8003d1e <lcd_DrawCircle>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <reset_7seg>:

void reset_7seg(){
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
	led7_SetDigit(0, 1, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2101      	movs	r1, #1
 8003026:	2000      	movs	r0, #0
 8003028:	f000 ffcc 	bl	8003fc4 <led7_SetDigit>
	led7_SetDigit(0, 2, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2102      	movs	r1, #2
 8003030:	2000      	movs	r0, #0
 8003032:	f000 ffc7 	bl	8003fc4 <led7_SetDigit>
	led7_SetDigit(0, 3, 0);
 8003036:	2200      	movs	r2, #0
 8003038:	2103      	movs	r1, #3
 800303a:	2000      	movs	r0, #0
 800303c:	f000 ffc2 	bl	8003fc4 <led7_SetDigit>
	led7_SetDigit(0, 4, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2104      	movs	r1, #4
 8003044:	2000      	movs	r0, #0
 8003046:	f000 ffbd 	bl	8003fc4 <led7_SetDigit>
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <mode_7seg>:

void mode_7seg(){
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	switch (status) {
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <mode_7seg+0x44>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b0d      	cmp	r3, #13
 800305a:	d012      	beq.n	8003082 <mode_7seg+0x32>
 800305c:	2b0d      	cmp	r3, #13
 800305e:	dc16      	bgt.n	800308e <mode_7seg+0x3e>
 8003060:	2b0b      	cmp	r3, #11
 8003062:	d002      	beq.n	800306a <mode_7seg+0x1a>
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d006      	beq.n	8003076 <mode_7seg+0x26>
			break;
		case TIME:
			led7_SetDigit(3, 2, 0);
			break;
		default:
			break;
 8003068:	e011      	b.n	800308e <mode_7seg+0x3e>
			led7_SetDigit(1, 2, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2102      	movs	r1, #2
 800306e:	2001      	movs	r0, #1
 8003070:	f000 ffa8 	bl	8003fc4 <led7_SetDigit>
			break;
 8003074:	e00c      	b.n	8003090 <mode_7seg+0x40>
			led7_SetDigit(2, 2, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2102      	movs	r1, #2
 800307a:	2002      	movs	r0, #2
 800307c:	f000 ffa2 	bl	8003fc4 <led7_SetDigit>
			break;
 8003080:	e006      	b.n	8003090 <mode_7seg+0x40>
			led7_SetDigit(3, 2, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2102      	movs	r1, #2
 8003086:	2003      	movs	r0, #3
 8003088:	f000 ff9c 	bl	8003fc4 <led7_SetDigit>
			break;
 800308c:	e000      	b.n	8003090 <mode_7seg+0x40>
			break;
 800308e:	bf00      	nop
	}
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000270 	.word	0x20000270

08003098 <update_7seg_time>:

void update_7seg_time(){
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	led7_SetDigit(counter_time / 10, 3, 0);
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <update_7seg_time+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <update_7seg_time+0x44>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	2200      	movs	r2, #0
 80030aa:	2103      	movs	r1, #3
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 ff89 	bl	8003fc4 <led7_SetDigit>
	led7_SetDigit(counter_time % 10, 4, 0);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <update_7seg_time+0x40>)
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <update_7seg_time+0x44>)
 80030b8:	fba3 2301 	umull	r2, r3, r3, r1
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	1aca      	subs	r2, r1, r3
 80030c8:	4613      	mov	r3, r2
 80030ca:	2200      	movs	r2, #0
 80030cc:	2104      	movs	r1, #4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 ff78 	bl	8003fc4 <led7_SetDigit>
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	2000027c 	.word	0x2000027c
 80030dc:	cccccccd 	.word	0xcccccccd

080030e0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80030ea:	4a04      	ldr	r2, [pc, #16]	; (80030fc <LCD_WR_REG+0x1c>)
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	8013      	strh	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	600ffffe 	.word	0x600ffffe

08003100 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <LCD_WR_DATA+0x1c>)
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	8053      	strh	r3, [r2, #2]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	600ffffe 	.word	0x600ffffe

08003120 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <LCD_RD_DATA+0x20>)
 8003128:	885b      	ldrh	r3, [r3, #2]
 800312a:	b29b      	uxth	r3, r3
 800312c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	b29b      	uxth	r3, r3
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	600ffffe 	.word	0x600ffffe

08003144 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4623      	mov	r3, r4
 8003154:	80fb      	strh	r3, [r7, #6]
 8003156:	4603      	mov	r3, r0
 8003158:	80bb      	strh	r3, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	807b      	strh	r3, [r7, #2]
 800315e:	4613      	mov	r3, r2
 8003160:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8003162:	202a      	movs	r0, #42	; 0x2a
 8003164:	f7ff ffbc 	bl	80030e0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ffc6 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	b29b      	uxth	r3, r3
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ffc0 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	b29b      	uxth	r3, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ffba 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ffb4 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8003198:	202b      	movs	r0, #43	; 0x2b
 800319a:	f7ff ffa1 	bl	80030e0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800319e:	88bb      	ldrh	r3, [r7, #4]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ffab 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80031aa:	88bb      	ldrh	r3, [r7, #4]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ffa5 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80031b6:	883b      	ldrh	r3, [r7, #0]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff9f 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80031c2:	883b      	ldrh	r3, [r7, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff99 	bl	8003100 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80031ce:	202c      	movs	r0, #44	; 0x2c
 80031d0:	f7ff ff86 	bl	80030e0 <LCD_WR_REG>
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd90      	pop	{r4, r7, pc}

080031dc <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <lcd_Clear+0x60>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <lcd_Clear+0x60>)
 80031f0:	885b      	ldrh	r3, [r3, #2]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2100      	movs	r1, #0
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7ff ffa3 	bl	8003144 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	81fb      	strh	r3, [r7, #14]
 8003202:	e011      	b.n	8003228 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8003204:	2300      	movs	r3, #0
 8003206:	81bb      	strh	r3, [r7, #12]
 8003208:	e006      	b.n	8003218 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff77 	bl	8003100 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8003212:	89bb      	ldrh	r3, [r7, #12]
 8003214:	3301      	adds	r3, #1
 8003216:	81bb      	strh	r3, [r7, #12]
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <lcd_Clear+0x60>)
 800321a:	885b      	ldrh	r3, [r3, #2]
 800321c:	89ba      	ldrh	r2, [r7, #12]
 800321e:	429a      	cmp	r2, r3
 8003220:	d3f3      	bcc.n	800320a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	3301      	adds	r3, #1
 8003226:	81fb      	strh	r3, [r7, #14]
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <lcd_Clear+0x60>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	89fa      	ldrh	r2, [r7, #14]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3e8      	bcc.n	8003204 <lcd_Clear+0x28>
		}
	}
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000600 	.word	0x20000600

08003240 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	4604      	mov	r4, r0
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4623      	mov	r3, r4
 8003250:	80fb      	strh	r3, [r7, #6]
 8003252:	4603      	mov	r3, r0
 8003254:	80bb      	strh	r3, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	807b      	strh	r3, [r7, #2]
 800325a:	4613      	mov	r3, r2
 800325c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	883b      	ldrh	r3, [r7, #0]
 8003266:	3b01      	subs	r3, #1
 8003268:	b29b      	uxth	r3, r3
 800326a:	88b9      	ldrh	r1, [r7, #4]
 800326c:	88f8      	ldrh	r0, [r7, #6]
 800326e:	f7ff ff69 	bl	8003144 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8003272:	88bb      	ldrh	r3, [r7, #4]
 8003274:	81fb      	strh	r3, [r7, #14]
 8003276:	e010      	b.n	800329a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	81bb      	strh	r3, [r7, #12]
 800327c:	e006      	b.n	800328c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800327e:	8c3b      	ldrh	r3, [r7, #32]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff3d 	bl	8003100 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8003286:	89bb      	ldrh	r3, [r7, #12]
 8003288:	3301      	adds	r3, #1
 800328a:	81bb      	strh	r3, [r7, #12]
 800328c:	89ba      	ldrh	r2, [r7, #12]
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	429a      	cmp	r2, r3
 8003292:	d3f4      	bcc.n	800327e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8003294:	89fb      	ldrh	r3, [r7, #14]
 8003296:	3301      	adds	r3, #1
 8003298:	81fb      	strh	r3, [r7, #14]
 800329a:	89fa      	ldrh	r2, [r7, #14]
 800329c:	883b      	ldrh	r3, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d3ea      	bcc.n	8003278 <lcd_Fill+0x38>
		}
	}
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd90      	pop	{r4, r7, pc}

080032ac <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
 80032b6:	460b      	mov	r3, r1
 80032b8:	80bb      	strh	r3, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80032be:	88bb      	ldrh	r3, [r7, #4]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	88b9      	ldrh	r1, [r7, #4]
 80032c4:	88f8      	ldrh	r0, [r7, #6]
 80032c6:	f7ff ff3d 	bl	8003144 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff17 	bl	8003100 <LCD_WR_DATA>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80032da:	b590      	push	{r4, r7, lr}
 80032dc:	b08d      	sub	sp, #52	; 0x34
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4604      	mov	r4, r0
 80032e2:	4608      	mov	r0, r1
 80032e4:	4611      	mov	r1, r2
 80032e6:	461a      	mov	r2, r3
 80032e8:	4623      	mov	r3, r4
 80032ea:	80fb      	strh	r3, [r7, #6]
 80032ec:	4603      	mov	r3, r0
 80032ee:	80bb      	strh	r3, [r7, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	807b      	strh	r3, [r7, #2]
 80032f4:	4613      	mov	r3, r2
 80032f6:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8003300:	887a      	ldrh	r2, [r7, #2]
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8003308:	883a      	ldrh	r2, [r7, #0]
 800330a:	88bb      	ldrh	r3, [r7, #4]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8003314:	88bb      	ldrh	r3, [r7, #4]
 8003316:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	dd02      	ble.n	8003324 <lcd_DrawLine+0x4a>
 800331e:	2301      	movs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e00b      	b.n	800333c <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <lcd_DrawLine+0x56>
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e005      	b.n	800333c <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	425b      	negs	r3, r3
 800333a:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	dd02      	ble.n	8003348 <lcd_DrawLine+0x6e>
 8003342:	2301      	movs	r3, #1
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	e00b      	b.n	8003360 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <lcd_DrawLine+0x7a>
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e005      	b.n	8003360 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	425b      	negs	r3, r3
 800335e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	429a      	cmp	r2, r3
 8003366:	dd02      	ble.n	800336e <lcd_DrawLine+0x94>
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e001      	b.n	8003372 <lcd_DrawLine+0x98>
	else distance=delta_y;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8003372:	2300      	movs	r3, #0
 8003374:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003376:	e02b      	b.n	80033d0 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	b29b      	uxth	r3, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	b291      	uxth	r1, r2
 8003380:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff91 	bl	80032ac <lcd_DrawPoint>
		xerr+=delta_x;
 800338a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	4413      	add	r3, r2
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 800339a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	429a      	cmp	r2, r3
 80033a0:	dd07      	ble.n	80033b2 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80033a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	4413      	add	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dd07      	ble.n	80033ca <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80033ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033cc:	3301      	adds	r3, #1
 80033ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80033d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dacf      	bge.n	8003378 <lcd_DrawLine+0x9e>
		}
	}
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3734      	adds	r7, #52	; 0x34
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}

080033e2 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80033e2:	b590      	push	{r4, r7, lr}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af02      	add	r7, sp, #8
 80033e8:	4604      	mov	r4, r0
 80033ea:	4608      	mov	r0, r1
 80033ec:	4611      	mov	r1, r2
 80033ee:	461a      	mov	r2, r3
 80033f0:	4623      	mov	r3, r4
 80033f2:	80fb      	strh	r3, [r7, #6]
 80033f4:	4603      	mov	r3, r0
 80033f6:	80bb      	strh	r3, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8003400:	88bc      	ldrh	r4, [r7, #4]
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	88b9      	ldrh	r1, [r7, #4]
 8003406:	88f8      	ldrh	r0, [r7, #6]
 8003408:	8b3b      	ldrh	r3, [r7, #24]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4623      	mov	r3, r4
 800340e:	f7ff ff64 	bl	80032da <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8003412:	883c      	ldrh	r4, [r7, #0]
 8003414:	88fa      	ldrh	r2, [r7, #6]
 8003416:	88b9      	ldrh	r1, [r7, #4]
 8003418:	88f8      	ldrh	r0, [r7, #6]
 800341a:	8b3b      	ldrh	r3, [r7, #24]
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	4623      	mov	r3, r4
 8003420:	f7ff ff5b 	bl	80032da <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8003424:	883c      	ldrh	r4, [r7, #0]
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	8839      	ldrh	r1, [r7, #0]
 800342a:	88f8      	ldrh	r0, [r7, #6]
 800342c:	8b3b      	ldrh	r3, [r7, #24]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4623      	mov	r3, r4
 8003432:	f7ff ff52 	bl	80032da <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8003436:	883c      	ldrh	r4, [r7, #0]
 8003438:	887a      	ldrh	r2, [r7, #2]
 800343a:	88b9      	ldrh	r1, [r7, #4]
 800343c:	8878      	ldrh	r0, [r7, #2]
 800343e:	8b3b      	ldrh	r3, [r7, #24]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4623      	mov	r3, r4
 8003444:	f7ff ff49 	bl	80032da <lcd_DrawLine>
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bd90      	pop	{r4, r7, pc}

08003450 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4623      	mov	r3, r4
 8003460:	80fb      	strh	r3, [r7, #6]
 8003462:	4603      	mov	r3, r0
 8003464:	80bb      	strh	r3, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
 800346a:	4613      	mov	r3, r2
 800346c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800346e:	2300      	movs	r3, #0
 8003470:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8003476:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800347a:	085b      	lsrs	r3, r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	08db      	lsrs	r3, r3, #3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	4413      	add	r3, r2
 800349a:	b29a      	uxth	r2, r3
 800349c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	fb12 f303 	smulbb	r3, r2, r3
 80034a6:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	3b20      	subs	r3, #32
 80034ac:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	4413      	add	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29c      	uxth	r4, r3
 80034bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	88bb      	ldrh	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	88b9      	ldrh	r1, [r7, #4]
 80034ce:	88f8      	ldrh	r0, [r7, #6]
 80034d0:	4622      	mov	r2, r4
 80034d2:	f7ff fe37 	bl	8003144 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	827b      	strh	r3, [r7, #18]
 80034da:	e086      	b.n	80035ea <lcd_ShowChar+0x19a>
	{
		if(sizey==12)temp=ascii_1206[character][i];
 80034dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d10b      	bne.n	80034fc <lcd_ShowChar+0xac>
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	8a79      	ldrh	r1, [r7, #18]
 80034e8:	4845      	ldr	r0, [pc, #276]	; (8003600 <lcd_ShowChar+0x1b0>)
 80034ea:	4613      	mov	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4403      	add	r3, r0
 80034f4:	440b      	add	r3, r1
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	75fb      	strb	r3, [r7, #23]
 80034fa:	e028      	b.n	800354e <lcd_ShowChar+0xfe>
		else if(sizey==16)temp=ascii_1608[character][i];
 80034fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003500:	2b10      	cmp	r3, #16
 8003502:	d108      	bne.n	8003516 <lcd_ShowChar+0xc6>
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	8a7b      	ldrh	r3, [r7, #18]
 8003508:	493e      	ldr	r1, [pc, #248]	; (8003604 <lcd_ShowChar+0x1b4>)
 800350a:	0112      	lsls	r2, r2, #4
 800350c:	440a      	add	r2, r1
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	75fb      	strb	r3, [r7, #23]
 8003514:	e01b      	b.n	800354e <lcd_ShowChar+0xfe>
		else if(sizey==24)temp=ascii_2412[character][i];
 8003516:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800351a:	2b18      	cmp	r3, #24
 800351c:	d10b      	bne.n	8003536 <lcd_ShowChar+0xe6>
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	8a79      	ldrh	r1, [r7, #18]
 8003522:	4839      	ldr	r0, [pc, #228]	; (8003608 <lcd_ShowChar+0x1b8>)
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	4403      	add	r3, r0
 800352e:	440b      	add	r3, r1
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	75fb      	strb	r3, [r7, #23]
 8003534:	e00b      	b.n	800354e <lcd_ShowChar+0xfe>
		else if(sizey==32)temp=ascii_3216[character][i];
 8003536:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800353a:	2b20      	cmp	r3, #32
 800353c:	d15b      	bne.n	80035f6 <lcd_ShowChar+0x1a6>
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	8a7b      	ldrh	r3, [r7, #18]
 8003542:	4932      	ldr	r1, [pc, #200]	; (800360c <lcd_ShowChar+0x1bc>)
 8003544:	0192      	lsls	r2, r2, #6
 8003546:	440a      	add	r2, r1
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800354e:	2300      	movs	r3, #0
 8003550:	75bb      	strb	r3, [r7, #22]
 8003552:	e044      	b.n	80035de <lcd_ShowChar+0x18e>
		{
			if(!mode)
 8003554:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003558:	2b00      	cmp	r3, #0
 800355a:	d120      	bne.n	800359e <lcd_ShowChar+0x14e>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800355c:	7dfa      	ldrb	r2, [r7, #23]
 800355e:	7dbb      	ldrb	r3, [r7, #22]
 8003560:	fa42 f303 	asr.w	r3, r2, r3
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <lcd_ShowChar+0x126>
 800356c:	883b      	ldrh	r3, [r7, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fdc6 	bl	8003100 <LCD_WR_DATA>
 8003574:	e003      	b.n	800357e <lcd_ShowChar+0x12e>
				else LCD_WR_DATA(bc);
 8003576:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fdc1 	bl	8003100 <LCD_WR_DATA>
				m++;
 800357e:	7d7b      	ldrb	r3, [r7, #21]
 8003580:	3301      	adds	r3, #1
 8003582:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8003584:	7d7b      	ldrb	r3, [r7, #21]
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	fbb3 f1f2 	udiv	r1, r3, r2
 800358c:	fb01 f202 	mul.w	r2, r1, r2
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11f      	bne.n	80035d8 <lcd_ShowChar+0x188>
				{
					m=0;
 8003598:	2300      	movs	r3, #0
 800359a:	757b      	strb	r3, [r7, #21]
					break;
 800359c:	e022      	b.n	80035e4 <lcd_ShowChar+0x194>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800359e:	7dfa      	ldrb	r2, [r7, #23]
 80035a0:	7dbb      	ldrb	r3, [r7, #22]
 80035a2:	fa42 f303 	asr.w	r3, r2, r3
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <lcd_ShowChar+0x16a>
 80035ae:	883a      	ldrh	r2, [r7, #0]
 80035b0:	88b9      	ldrh	r1, [r7, #4]
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fe79 	bl	80032ac <lcd_DrawPoint>
				x++;
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	3301      	adds	r3, #1
 80035be:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	8a3b      	ldrh	r3, [r7, #16]
 80035c4:	1ad2      	subs	r2, r2, r3
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d105      	bne.n	80035d8 <lcd_ShowChar+0x188>
				{
					x=x0;
 80035cc:	8a3b      	ldrh	r3, [r7, #16]
 80035ce:	80fb      	strh	r3, [r7, #6]
					y++;
 80035d0:	88bb      	ldrh	r3, [r7, #4]
 80035d2:	3301      	adds	r3, #1
 80035d4:	80bb      	strh	r3, [r7, #4]
					break;
 80035d6:	e005      	b.n	80035e4 <lcd_ShowChar+0x194>
		for(t=0;t<8;t++)
 80035d8:	7dbb      	ldrb	r3, [r7, #22]
 80035da:	3301      	adds	r3, #1
 80035dc:	75bb      	strb	r3, [r7, #22]
 80035de:	7dbb      	ldrb	r3, [r7, #22]
 80035e0:	2b07      	cmp	r3, #7
 80035e2:	d9b7      	bls.n	8003554 <lcd_ShowChar+0x104>
	for(i=0;i<TypefaceNum;i++)
 80035e4:	8a7b      	ldrh	r3, [r7, #18]
 80035e6:	3301      	adds	r3, #1
 80035e8:	827b      	strh	r3, [r7, #18]
 80035ea:	8a7a      	ldrh	r2, [r7, #18]
 80035ec:	89bb      	ldrh	r3, [r7, #12]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	f4ff af74 	bcc.w	80034dc <lcd_ShowChar+0x8c>
 80035f4:	e000      	b.n	80035f8 <lcd_ShowChar+0x1a8>
		else return;
 80035f6:	bf00      	nop
				}
			}
		}
	}
}
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd90      	pop	{r4, r7, pc}
 80035fe:	bf00      	nop
 8003600:	0800dfa8 	.word	0x0800dfa8
 8003604:	0800e41c 	.word	0x0800e41c
 8003608:	0800ea0c 	.word	0x0800ea0c
 800360c:	0800fbdc 	.word	0x0800fbdc

08003610 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	460a      	mov	r2, r1
 800361a:	71fb      	strb	r3, [r7, #7]
 800361c:	4613      	mov	r3, r2
 800361e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8003620:	2301      	movs	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003624:	e004      	b.n	8003630 <mypow+0x20>
 8003626:	79fa      	ldrb	r2, [r7, #7]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	79bb      	ldrb	r3, [r7, #6]
 8003632:	1e5a      	subs	r2, r3, #1
 8003634:	71ba      	strb	r2, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f5      	bne.n	8003626 <mypow+0x16>
	return result;
 800363a:	68fb      	ldr	r3, [r7, #12]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af04      	add	r7, sp, #16
 800364e:	4604      	mov	r4, r0
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4623      	mov	r3, r4
 8003658:	80fb      	strh	r3, [r7, #6]
 800365a:	4603      	mov	r3, r0
 800365c:	80bb      	strh	r3, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	807b      	strh	r3, [r7, #2]
 8003662:	4613      	mov	r3, r2
 8003664:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8003666:	2300      	movs	r3, #0
 8003668:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800366a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	e059      	b.n	800372c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8003678:	887c      	ldrh	r4, [r7, #2]
 800367a:	787a      	ldrb	r2, [r7, #1]
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	200a      	movs	r0, #10
 800368a:	f7ff ffc1 	bl	8003610 <mypow>
 800368e:	4603      	mov	r3, r0
 8003690:	fbb4 f1f3 	udiv	r1, r4, r3
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <lcd_ShowIntNum+0xf8>)
 8003696:	fba3 2301 	umull	r2, r3, r3, r1
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	1aca      	subs	r2, r1, r3
 80036a6:	4613      	mov	r3, r2
 80036a8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80036aa:	7bbb      	ldrb	r3, [r7, #14]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d121      	bne.n	80036f4 <lcd_ShowIntNum+0xac>
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	787b      	ldrb	r3, [r7, #1]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	429a      	cmp	r2, r3
 80036b8:	da1c      	bge.n	80036f4 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80036ba:	7b3b      	ldrb	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d117      	bne.n	80036f0 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	7b7b      	ldrb	r3, [r7, #13]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	fb12 f303 	smulbb	r3, r2, r3
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	4413      	add	r3, r2
 80036d2:	b298      	uxth	r0, r3
 80036d4:	8c3a      	ldrh	r2, [r7, #32]
 80036d6:	88b9      	ldrh	r1, [r7, #4]
 80036d8:	2300      	movs	r3, #0
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4613      	mov	r3, r2
 80036e8:	2220      	movs	r2, #32
 80036ea:	f7ff feb1 	bl	8003450 <lcd_ShowChar>
				continue;
 80036ee:	e01a      	b.n	8003726 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	7b7b      	ldrb	r3, [r7, #13]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	fb12 f303 	smulbb	r3, r2, r3
 8003700:	b29a      	uxth	r2, r3
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	4413      	add	r3, r2
 8003706:	b298      	uxth	r0, r3
 8003708:	7b3b      	ldrb	r3, [r7, #12]
 800370a:	3330      	adds	r3, #48	; 0x30
 800370c:	b2da      	uxtb	r2, r3
 800370e:	8c3c      	ldrh	r4, [r7, #32]
 8003710:	88b9      	ldrh	r1, [r7, #4]
 8003712:	2300      	movs	r3, #0
 8003714:	9302      	str	r3, [sp, #8]
 8003716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4623      	mov	r3, r4
 8003722:	f7ff fe95 	bl	8003450 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3301      	adds	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	787b      	ldrb	r3, [r7, #1]
 8003730:	429a      	cmp	r2, r3
 8003732:	d3a1      	bcc.n	8003678 <lcd_ShowIntNum+0x30>
	}
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	bf00      	nop
 8003740:	cccccccd 	.word	0xcccccccd

08003744 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b08b      	sub	sp, #44	; 0x2c
 8003748:	af04      	add	r7, sp, #16
 800374a:	4604      	mov	r4, r0
 800374c:	4608      	mov	r0, r1
 800374e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003752:	4611      	mov	r1, r2
 8003754:	461a      	mov	r2, r3
 8003756:	4623      	mov	r3, r4
 8003758:	81fb      	strh	r3, [r7, #14]
 800375a:	4603      	mov	r3, r0
 800375c:	81bb      	strh	r3, [r7, #12]
 800375e:	460b      	mov	r3, r1
 8003760:	71fb      	strb	r3, [r7, #7]
 8003762:	4613      	mov	r3, r2
 8003764:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8003766:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 800376e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003772:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800384c <lcd_ShowFloatNum+0x108>
 8003776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800377a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800377e:	ee17 3a90 	vmov	r3, s15
 8003782:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]
 8003788:	e057      	b.n	800383a <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 800378a:	8abc      	ldrh	r4, [r7, #20]
 800378c:	79fa      	ldrb	r2, [r7, #7]
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	200a      	movs	r0, #10
 800379c:	f7ff ff38 	bl	8003610 <mypow>
 80037a0:	4603      	mov	r3, r0
 80037a2:	fbb4 f1f3 	udiv	r1, r4, r3
 80037a6:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <lcd_ShowFloatNum+0x10c>)
 80037a8:	fba3 2301 	umull	r2, r3, r3, r1
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	1aca      	subs	r2, r1, r3
 80037b8:	4613      	mov	r3, r2
 80037ba:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 80037bc:	7dfa      	ldrb	r2, [r7, #23]
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	3b02      	subs	r3, #2
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d11d      	bne.n	8003802 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	3b02      	subs	r3, #2
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	7dbb      	ldrb	r3, [r7, #22]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	fb12 f303 	smulbb	r3, r2, r3
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	4413      	add	r3, r2
 80037da:	b298      	uxth	r0, r3
 80037dc:	88ba      	ldrh	r2, [r7, #4]
 80037de:	89b9      	ldrh	r1, [r7, #12]
 80037e0:	2300      	movs	r3, #0
 80037e2:	9302      	str	r3, [sp, #8]
 80037e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	222e      	movs	r2, #46	; 0x2e
 80037f2:	f7ff fe2d 	bl	8003450 <lcd_ShowChar>
			t++;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
 80037f8:	3301      	adds	r3, #1
 80037fa:	75fb      	strb	r3, [r7, #23]
			len+=1;
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	3301      	adds	r3, #1
 8003800:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	b29a      	uxth	r2, r3
 8003806:	7dbb      	ldrb	r3, [r7, #22]
 8003808:	b29b      	uxth	r3, r3
 800380a:	fb12 f303 	smulbb	r3, r2, r3
 800380e:	b29a      	uxth	r2, r3
 8003810:	89fb      	ldrh	r3, [r7, #14]
 8003812:	4413      	add	r3, r2
 8003814:	b298      	uxth	r0, r3
 8003816:	7cfb      	ldrb	r3, [r7, #19]
 8003818:	3330      	adds	r3, #48	; 0x30
 800381a:	b2da      	uxtb	r2, r3
 800381c:	88bc      	ldrh	r4, [r7, #4]
 800381e:	89b9      	ldrh	r1, [r7, #12]
 8003820:	2300      	movs	r3, #0
 8003822:	9302      	str	r3, [sp, #8]
 8003824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4623      	mov	r3, r4
 8003830:	f7ff fe0e 	bl	8003450 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	3301      	adds	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
 800383a:	7dfa      	ldrb	r2, [r7, #23]
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	429a      	cmp	r2, r3
 8003840:	d3a3      	bcc.n	800378a <lcd_ShowFloatNum+0x46>
	}
}
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	42c80000 	.word	0x42c80000
 8003850:	cccccccd 	.word	0xcccccccd

08003854 <lcd_ShowPicture>:

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	4604      	mov	r4, r0
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4623      	mov	r3, r4
 8003864:	80fb      	strh	r3, [r7, #6]
 8003866:	4603      	mov	r3, r0
 8003868:	80bb      	strh	r3, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	807b      	strh	r3, [r7, #2]
 800386e:	4613      	mov	r3, r2
 8003870:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	4413      	add	r3, r2
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29c      	uxth	r4, r3
 8003882:	88ba      	ldrh	r2, [r7, #4]
 8003884:	883b      	ldrh	r3, [r7, #0]
 8003886:	4413      	add	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	88b9      	ldrh	r1, [r7, #4]
 8003890:	88f8      	ldrh	r0, [r7, #6]
 8003892:	4622      	mov	r2, r4
 8003894:	f7ff fc56 	bl	8003144 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8003898:	2300      	movs	r3, #0
 800389a:	82fb      	strh	r3, [r7, #22]
 800389c:	e027      	b.n	80038ee <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 800389e:	2300      	movs	r3, #0
 80038a0:	82bb      	strh	r3, [r7, #20]
 80038a2:	e01d      	b.n	80038e0 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	3301      	adds	r3, #1
 80038b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b8:	4413      	add	r3, r2
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	b21a      	sxth	r2, r3
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b21b      	sxth	r3, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fc16 	bl	8003100 <LCD_WR_DATA>
			k++;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	3301      	adds	r3, #1
 80038d8:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 80038da:	8abb      	ldrh	r3, [r7, #20]
 80038dc:	3301      	adds	r3, #1
 80038de:	82bb      	strh	r3, [r7, #20]
 80038e0:	8aba      	ldrh	r2, [r7, #20]
 80038e2:	883b      	ldrh	r3, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d3dd      	bcc.n	80038a4 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 80038e8:	8afb      	ldrh	r3, [r7, #22]
 80038ea:	3301      	adds	r3, #1
 80038ec:	82fb      	strh	r3, [r7, #22]
 80038ee:	8afa      	ldrh	r2, [r7, #22]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d3d3      	bcc.n	800389e <lcd_ShowPicture+0x4a>
		}
	}
}
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd90      	pop	{r4, r7, pc}

08003900 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <lcd_SetDir+0x44>)
 800391c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003920:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <lcd_SetDir+0x44>)
 8003924:	22f0      	movs	r2, #240	; 0xf0
 8003926:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8003928:	e006      	b.n	8003938 <lcd_SetDir+0x38>
		lcddev.width=240;
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <lcd_SetDir+0x44>)
 800392c:	22f0      	movs	r2, #240	; 0xf0
 800392e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <lcd_SetDir+0x44>)
 8003932:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003936:	805a      	strh	r2, [r3, #2]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	20000600 	.word	0x20000600

08003948 <lcd_init>:


void lcd_init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800394c:	2200      	movs	r2, #0
 800394e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003952:	48aa      	ldr	r0, [pc, #680]	; (8003bfc <lcd_init+0x2b4>)
 8003954:	f003 ff46 	bl	80077e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003958:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800395c:	f002 fc44 	bl	80061e8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8003960:	2201      	movs	r2, #1
 8003962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003966:	48a5      	ldr	r0, [pc, #660]	; (8003bfc <lcd_init+0x2b4>)
 8003968:	f003 ff3c 	bl	80077e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800396c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003970:	f002 fc3a 	bl	80061e8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8003974:	2000      	movs	r0, #0
 8003976:	f7ff ffc3 	bl	8003900 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800397a:	20d3      	movs	r0, #211	; 0xd3
 800397c:	f7ff fbb0 	bl	80030e0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8003980:	f7ff fbce 	bl	8003120 <LCD_RD_DATA>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	4b9d      	ldr	r3, [pc, #628]	; (8003c00 <lcd_init+0x2b8>)
 800398a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800398c:	f7ff fbc8 	bl	8003120 <LCD_RD_DATA>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	4b9a      	ldr	r3, [pc, #616]	; (8003c00 <lcd_init+0x2b8>)
 8003996:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8003998:	f7ff fbc2 	bl	8003120 <LCD_RD_DATA>
 800399c:	4603      	mov	r3, r0
 800399e:	461a      	mov	r2, r3
 80039a0:	4b97      	ldr	r3, [pc, #604]	; (8003c00 <lcd_init+0x2b8>)
 80039a2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80039a4:	4b96      	ldr	r3, [pc, #600]	; (8003c00 <lcd_init+0x2b8>)
 80039a6:	889b      	ldrh	r3, [r3, #4]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b94      	ldr	r3, [pc, #592]	; (8003c00 <lcd_init+0x2b8>)
 80039ae:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80039b0:	f7ff fbb6 	bl	8003120 <LCD_RD_DATA>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b91      	ldr	r3, [pc, #580]	; (8003c00 <lcd_init+0x2b8>)
 80039ba:	889b      	ldrh	r3, [r3, #4]
 80039bc:	4313      	orrs	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b8f      	ldr	r3, [pc, #572]	; (8003c00 <lcd_init+0x2b8>)
 80039c2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80039c4:	20cf      	movs	r0, #207	; 0xcf
 80039c6:	f7ff fb8b 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f7ff fb98 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80039d0:	20c1      	movs	r0, #193	; 0xc1
 80039d2:	f7ff fb95 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80039d6:	2030      	movs	r0, #48	; 0x30
 80039d8:	f7ff fb92 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80039dc:	20ed      	movs	r0, #237	; 0xed
 80039de:	f7ff fb7f 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80039e2:	2064      	movs	r0, #100	; 0x64
 80039e4:	f7ff fb8c 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80039e8:	2003      	movs	r0, #3
 80039ea:	f7ff fb89 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80039ee:	2012      	movs	r0, #18
 80039f0:	f7ff fb86 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80039f4:	2081      	movs	r0, #129	; 0x81
 80039f6:	f7ff fb83 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80039fa:	20e8      	movs	r0, #232	; 0xe8
 80039fc:	f7ff fb70 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8003a00:	2085      	movs	r0, #133	; 0x85
 8003a02:	f7ff fb7d 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8003a06:	2010      	movs	r0, #16
 8003a08:	f7ff fb7a 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8003a0c:	207a      	movs	r0, #122	; 0x7a
 8003a0e:	f7ff fb77 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8003a12:	20cb      	movs	r0, #203	; 0xcb
 8003a14:	f7ff fb64 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8003a18:	2039      	movs	r0, #57	; 0x39
 8003a1a:	f7ff fb71 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8003a1e:	202c      	movs	r0, #44	; 0x2c
 8003a20:	f7ff fb6e 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7ff fb6b 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8003a2a:	2034      	movs	r0, #52	; 0x34
 8003a2c:	f7ff fb68 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8003a30:	2002      	movs	r0, #2
 8003a32:	f7ff fb65 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8003a36:	20f7      	movs	r0, #247	; 0xf7
 8003a38:	f7ff fb52 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8003a3c:	2020      	movs	r0, #32
 8003a3e:	f7ff fb5f 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8003a42:	20ea      	movs	r0, #234	; 0xea
 8003a44:	f7ff fb4c 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7ff fb59 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7ff fb56 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8003a54:	20c0      	movs	r0, #192	; 0xc0
 8003a56:	f7ff fb43 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8003a5a:	201b      	movs	r0, #27
 8003a5c:	f7ff fb50 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8003a60:	20c1      	movs	r0, #193	; 0xc1
 8003a62:	f7ff fb3d 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8003a66:	2001      	movs	r0, #1
 8003a68:	f7ff fb4a 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8003a6c:	20c5      	movs	r0, #197	; 0xc5
 8003a6e:	f7ff fb37 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8003a72:	2030      	movs	r0, #48	; 0x30
 8003a74:	f7ff fb44 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8003a78:	2030      	movs	r0, #48	; 0x30
 8003a7a:	f7ff fb41 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8003a7e:	20c7      	movs	r0, #199	; 0xc7
 8003a80:	f7ff fb2e 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8003a84:	20b7      	movs	r0, #183	; 0xb7
 8003a86:	f7ff fb3b 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8003a8a:	2036      	movs	r0, #54	; 0x36
 8003a8c:	f7ff fb28 	bl	80030e0 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8003a90:	2008      	movs	r0, #8
 8003a92:	f7ff fb35 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8003a96:	203a      	movs	r0, #58	; 0x3a
 8003a98:	f7ff fb22 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8003a9c:	2055      	movs	r0, #85	; 0x55
 8003a9e:	f7ff fb2f 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8003aa2:	20b1      	movs	r0, #177	; 0xb1
 8003aa4:	f7ff fb1c 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7ff fb29 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8003aae:	201a      	movs	r0, #26
 8003ab0:	f7ff fb26 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8003ab4:	20b6      	movs	r0, #182	; 0xb6
 8003ab6:	f7ff fb13 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8003aba:	200a      	movs	r0, #10
 8003abc:	f7ff fb20 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8003ac0:	20a2      	movs	r0, #162	; 0xa2
 8003ac2:	f7ff fb1d 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8003ac6:	20f2      	movs	r0, #242	; 0xf2
 8003ac8:	f7ff fb0a 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff fb17 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8003ad2:	2026      	movs	r0, #38	; 0x26
 8003ad4:	f7ff fb04 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f7ff fb11 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8003ade:	20e0      	movs	r0, #224	; 0xe0
 8003ae0:	f7ff fafe 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8003ae4:	200f      	movs	r0, #15
 8003ae6:	f7ff fb0b 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8003aea:	202a      	movs	r0, #42	; 0x2a
 8003aec:	f7ff fb08 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8003af0:	2028      	movs	r0, #40	; 0x28
 8003af2:	f7ff fb05 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003af6:	2008      	movs	r0, #8
 8003af8:	f7ff fb02 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8003afc:	200e      	movs	r0, #14
 8003afe:	f7ff faff 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8003b02:	2008      	movs	r0, #8
 8003b04:	f7ff fafc 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8003b08:	2054      	movs	r0, #84	; 0x54
 8003b0a:	f7ff faf9 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8003b0e:	20a9      	movs	r0, #169	; 0xa9
 8003b10:	f7ff faf6 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8003b14:	2043      	movs	r0, #67	; 0x43
 8003b16:	f7ff faf3 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8003b1a:	200a      	movs	r0, #10
 8003b1c:	f7ff faf0 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8003b20:	200f      	movs	r0, #15
 8003b22:	f7ff faed 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003b26:	2000      	movs	r0, #0
 8003b28:	f7ff faea 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7ff fae7 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003b32:	2000      	movs	r0, #0
 8003b34:	f7ff fae4 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7ff fae1 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8003b3e:	20e1      	movs	r0, #225	; 0xe1
 8003b40:	f7ff face 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7ff fadb 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8003b4a:	2015      	movs	r0, #21
 8003b4c:	f7ff fad8 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8003b50:	2017      	movs	r0, #23
 8003b52:	f7ff fad5 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8003b56:	2007      	movs	r0, #7
 8003b58:	f7ff fad2 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8003b5c:	2011      	movs	r0, #17
 8003b5e:	f7ff facf 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8003b62:	2006      	movs	r0, #6
 8003b64:	f7ff facc 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8003b68:	202b      	movs	r0, #43	; 0x2b
 8003b6a:	f7ff fac9 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8003b6e:	2056      	movs	r0, #86	; 0x56
 8003b70:	f7ff fac6 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8003b74:	203c      	movs	r0, #60	; 0x3c
 8003b76:	f7ff fac3 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8003b7a:	2005      	movs	r0, #5
 8003b7c:	f7ff fac0 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8003b80:	2010      	movs	r0, #16
 8003b82:	f7ff fabd 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8003b86:	200f      	movs	r0, #15
 8003b88:	f7ff faba 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003b8c:	203f      	movs	r0, #63	; 0x3f
 8003b8e:	f7ff fab7 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8003b92:	203f      	movs	r0, #63	; 0x3f
 8003b94:	f7ff fab4 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8003b98:	200f      	movs	r0, #15
 8003b9a:	f7ff fab1 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8003b9e:	202b      	movs	r0, #43	; 0x2b
 8003ba0:	f7ff fa9e 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7ff faab 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003baa:	2000      	movs	r0, #0
 8003bac:	f7ff faa8 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f7ff faa5 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8003bb6:	203f      	movs	r0, #63	; 0x3f
 8003bb8:	f7ff faa2 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8003bbc:	202a      	movs	r0, #42	; 0x2a
 8003bbe:	f7ff fa8f 	bl	80030e0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7ff fa9c 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7ff fa99 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7ff fa96 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8003bd4:	20ef      	movs	r0, #239	; 0xef
 8003bd6:	f7ff fa93 	bl	8003100 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8003bda:	2011      	movs	r0, #17
 8003bdc:	f7ff fa80 	bl	80030e0 <LCD_WR_REG>
	HAL_Delay(120);
 8003be0:	2078      	movs	r0, #120	; 0x78
 8003be2:	f002 fb01 	bl	80061e8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8003be6:	2029      	movs	r0, #41	; 0x29
 8003be8:	f7ff fa7a 	bl	80030e0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8003bec:	2201      	movs	r2, #1
 8003bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf2:	4804      	ldr	r0, [pc, #16]	; (8003c04 <lcd_init+0x2bc>)
 8003bf4:	f003 fdf6 	bl	80077e4 <HAL_GPIO_WritePin>
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	20000600 	.word	0x20000600
 8003c04:	40020000 	.word	0x40020000

08003c08 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	b298      	uxth	r0, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	8b3a      	ldrh	r2, [r7, #24]
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7ff fb3b 	bl	80032ac <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b298      	uxth	r0, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	8b3a      	ldrh	r2, [r7, #24]
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7ff fb2b 	bl	80032ac <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	b298      	uxth	r0, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	8b3a      	ldrh	r2, [r7, #24]
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7ff fb1b 	bl	80032ac <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	b298      	uxth	r0, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8b3a      	ldrh	r2, [r7, #24]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7ff fb0b 	bl	80032ac <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	b298      	uxth	r0, r3
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	8b3a      	ldrh	r2, [r7, #24]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f7ff fafb 	bl	80032ac <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	b298      	uxth	r0, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	8b3a      	ldrh	r2, [r7, #24]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f7ff faeb 	bl	80032ac <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	b298      	uxth	r0, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	8b3a      	ldrh	r2, [r7, #24]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	f7ff fadb 	bl	80032ac <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	b298      	uxth	r0, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	8b3a      	ldrh	r2, [r7, #24]
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7ff facb 	bl	80032ac <lcd_DrawPoint>
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b08a      	sub	sp, #40	; 0x28
 8003d22:	af02      	add	r7, sp, #8
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	f1c3 0303 	rsb	r3, r3, #3
 8003d3e:	613b      	str	r3, [r7, #16]


	if (fill)
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04f      	beq.n	8003de6 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8003d46:	e029      	b.n	8003d9c <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e00a      	b.n	8003d64 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f7ff ff55 	bl	8003c08 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	3301      	adds	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	ddf0      	ble.n	8003d4e <lcd_DrawCircle+0x30>

			if (d < 0) {
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	da06      	bge.n	8003d80 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	009a      	lsls	r2, r3, #2
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	3306      	adds	r3, #6
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	e00a      	b.n	8003d96 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	009a      	lsls	r2, r3, #2
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	330a      	adds	r3, #10
 8003d8e:	613b      	str	r3, [r7, #16]
				y--;
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	ddd1      	ble.n	8003d48 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8003da4:	e023      	b.n	8003dee <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff ff29 	bl	8003c08 <_draw_circle_8>
			if (d < 0) {
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	da06      	bge.n	8003dca <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	009a      	lsls	r2, r3, #2
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3306      	adds	r3, #6
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	e00a      	b.n	8003de0 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	330a      	adds	r3, #10
 8003dd8:	613b      	str	r3, [r7, #16]
				y--;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	61bb      	str	r3, [r7, #24]
			x++;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3301      	adds	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	dddb      	ble.n	8003da6 <lcd_DrawCircle+0x88>
}
 8003dee:	bf00      	nop
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8003df6:	b590      	push	{r4, r7, lr}
 8003df8:	b08b      	sub	sp, #44	; 0x2c
 8003dfa:	af04      	add	r7, sp, #16
 8003dfc:	60ba      	str	r2, [r7, #8]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	81fb      	strh	r3, [r7, #14]
 8003e04:	460b      	mov	r3, r1
 8003e06:	81bb      	strh	r3, [r7, #12]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8003e14:	e034      	b.n	8003e80 <lcd_ShowStr+0x8a>
	{
		if(!bHz)
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d131      	bne.n	8003e80 <lcd_ShowStr+0x8a>
		{
//			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
			if(*str>0x80)bHz=1;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b80      	cmp	r3, #128	; 0x80
 8003e22:	d902      	bls.n	8003e2a <lcd_ShowStr+0x34>
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
 8003e28:	e02a      	b.n	8003e80 <lcd_ShowStr+0x8a>
			else
			{
				if(*str==0x0D)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b0d      	cmp	r3, #13
 8003e30:	d10b      	bne.n	8003e4a <lcd_ShowStr+0x54>
				{
					y+=sizey;
 8003e32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	89bb      	ldrh	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8003e3e:	8abb      	ldrh	r3, [r7, #20]
 8003e40:	81fb      	strh	r3, [r7, #14]
					str++;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	3301      	adds	r3, #1
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	e017      	b.n	8003e7a <lcd_ShowStr+0x84>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	88fc      	ldrh	r4, [r7, #6]
 8003e50:	89b9      	ldrh	r1, [r7, #12]
 8003e52:	89f8      	ldrh	r0, [r7, #14]
 8003e54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003e58:	9302      	str	r3, [sp, #8]
 8003e5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4623      	mov	r3, r4
 8003e66:	f7ff faf3 	bl	8003450 <lcd_ShowChar>
					x+=sizey/2;
 8003e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	4413      	add	r3, r2
 8003e78:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1c6      	bne.n	8003e16 <lcd_ShowStr+0x20>
			}
		}
	}
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd90      	pop	{r4, r7, pc}
	...

08003e94 <led7_init>:
uint8_t led7seg[4] = {0, 1, 2, 3}; //4 index
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;
uint16_t led7_index = 0;

void led7_init(){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	2140      	movs	r1, #64	; 0x40
 8003e9c:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <led7_init+0x14>)
 8003e9e:	f003 fca1 	bl	80077e4 <HAL_GPIO_WritePin>
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021800 	.word	0x40021800

08003eac <led7_Scan>:

void led7_Scan(){
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8003eb0:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <led7_Scan+0x104>)
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <led7_Scan+0x104>)
 8003eba:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8003ebc:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <led7_Scan+0x108>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b3d      	ldr	r3, [pc, #244]	; (8003fb8 <led7_Scan+0x10c>)
 8003ec4:	5c9b      	ldrb	r3, [r3, r2]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	b21a      	sxth	r2, r3
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <led7_Scan+0x104>)
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b21b      	sxth	r3, r3
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b21b      	sxth	r3, r3
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <led7_Scan+0x104>)
 8003ed8:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8003eda:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <led7_Scan+0x108>)
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d846      	bhi.n	8003f70 <led7_Scan+0xc4>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <led7_Scan+0x3c>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f17 	.word	0x08003f17
 8003ef0:	08003f35 	.word	0x08003f35
 8003ef4:	08003f53 	.word	0x08003f53
	case 0:
		spi_buffer |= 0x00b0;
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <led7_Scan+0x104>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	4b2b      	ldr	r3, [pc, #172]	; (8003fb0 <led7_Scan+0x104>)
 8003f04:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <led7_Scan+0x104>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <led7_Scan+0x104>)
 8003f12:	801a      	strh	r2, [r3, #0]
		break;
 8003f14:	e02d      	b.n	8003f72 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8003f16:	4b26      	ldr	r3, [pc, #152]	; (8003fb0 <led7_Scan+0x104>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <led7_Scan+0x104>)
 8003f22:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8003f24:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <led7_Scan+0x104>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	f023 0320 	bic.w	r3, r3, #32
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b20      	ldr	r3, [pc, #128]	; (8003fb0 <led7_Scan+0x104>)
 8003f30:	801a      	strh	r2, [r3, #0]
		break;
 8003f32:	e01e      	b.n	8003f72 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <led7_Scan+0x104>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	; (8003fb0 <led7_Scan+0x104>)
 8003f40:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <led7_Scan+0x104>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	f023 0310 	bic.w	r3, r3, #16
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <led7_Scan+0x104>)
 8003f4e:	801a      	strh	r2, [r3, #0]
		break;
 8003f50:	e00f      	b.n	8003f72 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <led7_Scan+0x104>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <led7_Scan+0x104>)
 8003f5e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8003f60:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <led7_Scan+0x104>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <led7_Scan+0x104>)
 8003f6c:	801a      	strh	r2, [r3, #0]
		break;
 8003f6e:	e000      	b.n	8003f72 <led7_Scan+0xc6>
	default:
		break;
 8003f70:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <led7_Scan+0x108>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	3301      	adds	r3, #1
 8003f78:	425a      	negs	r2, r3
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	f002 0203 	and.w	r2, r2, #3
 8003f82:	bf58      	it	pl
 8003f84:	4253      	negpl	r3, r2
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <led7_Scan+0x108>)
 8003f8a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2140      	movs	r1, #64	; 0x40
 8003f90:	480a      	ldr	r0, [pc, #40]	; (8003fbc <led7_Scan+0x110>)
 8003f92:	f003 fc27 	bl	80077e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8003f96:	2301      	movs	r3, #1
 8003f98:	2202      	movs	r2, #2
 8003f9a:	4905      	ldr	r1, [pc, #20]	; (8003fb0 <led7_Scan+0x104>)
 8003f9c:	4808      	ldr	r0, [pc, #32]	; (8003fc0 <led7_Scan+0x114>)
 8003f9e:	f005 f936 	bl	800920e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	4805      	ldr	r0, [pc, #20]	; (8003fbc <led7_Scan+0x110>)
 8003fa8:	f003 fc1c 	bl	80077e4 <HAL_GPIO_WritePin>
}
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000026 	.word	0x20000026
 8003fb4:	20000606 	.word	0x20000606
 8003fb8:	20000018 	.word	0x20000018
 8003fbc:	40021800 	.word	0x40021800
 8003fc0:	20000688 	.word	0x20000688

08003fc4 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	db0e      	blt.n	8003ff6 <led7_SetDigit+0x32>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b09      	cmp	r3, #9
 8003fdc:	dc0b      	bgt.n	8003ff6 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <led7_SetDigit+0x40>)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	b2d9      	uxtb	r1, r3
 8003fec:	4a06      	ldr	r2, [pc, #24]	; (8004008 <led7_SetDigit+0x44>)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	701a      	strb	r2, [r3, #0]
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000001c 	.word	0x2000001c
 8004008:	20000018 	.word	0x20000018

0800400c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004010:	f002 f878 	bl	8006104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004014:	f000 f82c 	bl	8004070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004018:	f7fe f808 	bl	800202c <MX_GPIO_Init>
  MX_DMA_Init();
 800401c:	f7fd f94e 	bl	80012bc <MX_DMA_Init>
  MX_ADC1_Init();
 8004020:	f7fc ffa8 	bl	8000f74 <MX_ADC1_Init>
  MX_FSMC_Init();
 8004024:	f7fd fd50 	bl	8001ac8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8004028:	f7fe f92e 	bl	8002288 <MX_I2C1_Init>
  MX_SPI1_Init();
 800402c:	f000 fbee 	bl	800480c <MX_SPI1_Init>
  MX_TIM2_Init();
 8004030:	f001 f856 	bl	80050e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004034:	f001 ffe8 	bl	8006008 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004038:	f001 f802 	bl	8005040 <MX_TIM1_Init>
  MX_TIM13_Init();
 800403c:	f001 f89c 	bl	8005178 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8004040:	f002 f80c 	bl	800605c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8004044:	f000 f87e 	bl	8004144 <system_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Scan touch screen
	  // 50ms task
	  if(flag_timer2 == 1){
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <main+0x60>)
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d1fb      	bne.n	8004048 <main+0x3c>
		  flag_timer2 = 0;
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <main+0x60>)
 8004052:	2200      	movs	r2, #0
 8004054:	801a      	strh	r2, [r3, #0]
//		  if(++counterTouch % 2 == 0){
//			  counterTouch = 0;
//			  touch_Scan();
//		  }
		  touch_Scan();
 8004056:	f001 ff85 	bl	8005f64 <touch_Scan>
		  button_Scan();
 800405a:	f7fd f8c3 	bl	80011e4 <button_Scan>

		  input_process();
 800405e:	f7fd fa0b 	bl	8001478 <input_process>
		  fsm_ingame();
 8004062:	f7fd fc6d 	bl	8001940 <fsm_ingame>

		  test_led();
 8004066:	f000 f8a3 	bl	80041b0 <test_led>
	  if(flag_timer2 == 1){
 800406a:	e7ed      	b.n	8004048 <main+0x3c>
 800406c:	20000676 	.word	0x20000676

08004070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b094      	sub	sp, #80	; 0x50
 8004074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004076:	f107 0320 	add.w	r3, r7, #32
 800407a:	2230      	movs	r2, #48	; 0x30
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f008 f8c1 	bl	800c206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	2300      	movs	r3, #0
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	4b28      	ldr	r3, [pc, #160]	; (800413c <SystemClock_Config+0xcc>)
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <SystemClock_Config+0xcc>)
 800409e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a2:	6413      	str	r3, [r2, #64]	; 0x40
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <SystemClock_Config+0xcc>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040b0:	2300      	movs	r3, #0
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	4b22      	ldr	r3, [pc, #136]	; (8004140 <SystemClock_Config+0xd0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <SystemClock_Config+0xd0>)
 80040ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <SystemClock_Config+0xd0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040cc:	2302      	movs	r3, #2
 80040ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040d0:	2301      	movs	r3, #1
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040d4:	2310      	movs	r3, #16
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040d8:	2302      	movs	r3, #2
 80040da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040dc:	2300      	movs	r3, #0
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80040e0:	2308      	movs	r3, #8
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80040e4:	23a8      	movs	r3, #168	; 0xa8
 80040e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040e8:	2302      	movs	r3, #2
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040ec:	2304      	movs	r3, #4
 80040ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040f0:	f107 0320 	add.w	r3, r7, #32
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 fb69 	bl	80087cc <HAL_RCC_OscConfig>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004100:	f000 f87c 	bl	80041fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004104:	230f      	movs	r3, #15
 8004106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004108:	2302      	movs	r3, #2
 800410a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004116:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800411a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	2105      	movs	r1, #5
 8004122:	4618      	mov	r0, r3
 8004124:	f004 fdca 	bl	8008cbc <HAL_RCC_ClockConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800412e:	f000 f865 	bl	80041fc <Error_Handler>
  }
}
 8004132:	bf00      	nop
 8004134:	3750      	adds	r7, #80	; 0x50
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800
 8004140:	40007000 	.word	0x40007000

08004144 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
	  timer_init();
 8004148:	f000 fa84 	bl	8004654 <timer_init>
	  button_init();
 800414c:	f7fd f83e 	bl	80011cc <button_init>
	  lcd_init();
 8004150:	f7ff fbfa 	bl	8003948 <lcd_init>
	  sensor_init();
 8004154:	f000 f858 	bl	8004208 <sensor_init>
	  touch_init();
 8004158:	f001 fef4 	bl	8005f44 <touch_init>
	  led7_init();
 800415c:	f7ff fe9a 	bl	8003e94 <led7_init>
	  //ds3231_init();
	  //uart_init_esp();

	  home_lcd();		// Hien thi man hinh vua moi dau
 8004160:	f7fe f8c0 	bl	80022e4 <home_lcd>
	  snake_init();		// Khoi tao ran
 8004164:	f000 f8a2 	bl	80042ac <snake_init>

	  strcpy(history[0].name, "abc");
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <system_init+0x5c>)
 800416a:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <system_init+0x60>)
 800416c:	6810      	ldr	r0, [r2, #0]
 800416e:	6018      	str	r0, [r3, #0]
	  history[0].score = 1000;
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <system_init+0x5c>)
 8004172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004176:	815a      	strh	r2, [r3, #10]
	  strcpy(history[1].name, "def");
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <system_init+0x64>)
 800417a:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <system_init+0x68>)
 800417c:	6810      	ldr	r0, [r2, #0]
 800417e:	6018      	str	r0, [r3, #0]
	  history[1].score = 124;
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <system_init+0x5c>)
 8004182:	227c      	movs	r2, #124	; 0x7c
 8004184:	82da      	strh	r2, [r3, #22]

	  setTimer2(50);
 8004186:	2032      	movs	r0, #50	; 0x32
 8004188:	f000 fa72 	bl	8004670 <setTimer2>
	  setTimer3(50);
 800418c:	2032      	movs	r0, #50	; 0x32
 800418e:	f000 fa8b 	bl	80046a8 <setTimer3>
	  setTimer4(3000);
 8004192:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004196:	f000 faa3 	bl	80046e0 <setTimer4>
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000200 	.word	0x20000200
 80041a4:	0800dec0 	.word	0x0800dec0
 80041a8:	2000020c 	.word	0x2000020c
 80041ac:	0800dec4 	.word	0x0800dec4

080041b0 <test_led>:

uint8_t counter_led = 0;
void test_led(){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	if (++counter_led % 20 == 0){
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <test_led+0x40>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <test_led+0x40>)
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <test_led+0x40>)
 80041c2:	781a      	ldrb	r2, [r3, #0]
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <test_led+0x44>)
 80041c6:	fba3 1302 	umull	r1, r3, r3, r2
 80041ca:	0919      	lsrs	r1, r3, #4
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <test_led+0x3a>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80041dc:	2110      	movs	r1, #16
 80041de:	4806      	ldr	r0, [pc, #24]	; (80041f8 <test_led+0x48>)
 80041e0:	f003 fb19 	bl	8007816 <HAL_GPIO_TogglePin>
		counter_led = 0;
 80041e4:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <test_led+0x40>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
	}
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000668 	.word	0x20000668
 80041f4:	cccccccd 	.word	0xcccccccd
 80041f8:	40021000 	.word	0x40021000

080041fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004200:	b672      	cpsid	i
}
 8004202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004204:	e7fe      	b.n	8004204 <Error_Handler+0x8>
	...

08004208 <sensor_init>:

#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 800420c:	2205      	movs	r2, #5
 800420e:	4903      	ldr	r1, [pc, #12]	; (800421c <sensor_init+0x14>)
 8004210:	4803      	ldr	r0, [pc, #12]	; (8004220 <sensor_init+0x18>)
 8004212:	f002 f851 	bl	80062b8 <HAL_ADC_Start_DMA>
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2000066c 	.word	0x2000066c
 8004220:	2000013c 	.word	0x2000013c

08004224 <sensor_Read>:

void sensor_Read(){
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8004228:	2205      	movs	r2, #5
 800422a:	4903      	ldr	r1, [pc, #12]	; (8004238 <sensor_Read+0x14>)
 800422c:	4803      	ldr	r0, [pc, #12]	; (800423c <sensor_Read+0x18>)
 800422e:	f002 f843 	bl	80062b8 <HAL_ADC_Start_DMA>
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000066c 	.word	0x2000066c
 800423c:	2000013c 	.word	0x2000013c

08004240 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <sensor_GetLight+0x14>)
 8004246:	889b      	ldrh	r3, [r3, #4]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000066c 	.word	0x2000066c

08004258 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <sensor_GetPotentiometer+0x14>)
 800425e:	88db      	ldrh	r3, [r3, #6]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	2000066c 	.word	0x2000066c

08004270 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <sensor_GetTemperature+0x30>)
 8004276:	891b      	ldrh	r3, [r3, #8]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004280:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80042a4 <sensor_GetTemperature+0x34>
 8004284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004288:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80042a8 <sensor_GetTemperature+0x38>
 800428c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004290:	eef0 7a66 	vmov.f32	s15, s13
}
 8004294:	eeb0 0a67 	vmov.f32	s0, s15
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	2000066c 	.word	0x2000066c
 80042a4:	43a50000 	.word	0x43a50000
 80042a8:	457ff000 	.word	0x457ff000

080042ac <snake_init>:
 *      Author: ADMIN
 */

#include "snake.h"

void snake_init(){
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
	snake[0].x = (POS_X_MAX - POS_X_MIN) / 2;
 80042b2:	4b19      	ldr	r3, [pc, #100]	; (8004318 <snake_init+0x6c>)
 80042b4:	2277      	movs	r2, #119	; 0x77
 80042b6:	601a      	str	r2, [r3, #0]
	snake[0].y = (POS_Y_MAX - POS_Y_MIN) / 2;
 80042b8:	4b17      	ldr	r3, [pc, #92]	; (8004318 <snake_init+0x6c>)
 80042ba:	225a      	movs	r2, #90	; 0x5a
 80042bc:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80042be:	2301      	movs	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	e00d      	b.n	80042e0 <snake_init+0x34>
		snake[i].x = 0;
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <snake_init+0x6c>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2100      	movs	r1, #0
 80042ca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 80042ce:	4a12      	ldr	r2, [pc, #72]	; (8004318 <snake_init+0x6c>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	2200      	movs	r2, #0
 80042d8:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3301      	adds	r3, #1
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b63      	cmp	r3, #99	; 0x63
 80042e4:	ddee      	ble.n	80042c4 <snake_init+0x18>
	}
	move = UP;
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <snake_init+0x70>)
 80042e8:	2203      	movs	r2, #3
 80042ea:	601a      	str	r2, [r3, #0]
	length = 1;
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <snake_init+0x74>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
	current_score = 0;
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <snake_init+0x78>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
	counter_time_score = 0;
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <snake_init+0x7c>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
	counter_time = 60;
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <snake_init+0x80>)
 8004300:	223c      	movs	r2, #60	; 0x3c
 8004302:	601a      	str	r2, [r3, #0]
	tempFlag = 0;
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <snake_init+0x84>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	2000028c 	.word	0x2000028c
 800431c:	20000274 	.word	0x20000274
 8004320:	2000000c 	.word	0x2000000c
 8004324:	20000000 	.word	0x20000000
 8004328:	20000278 	.word	0x20000278
 800432c:	2000027c 	.word	0x2000027c
 8004330:	20000280 	.word	0x20000280

08004334 <is_collision_food>:

int is_collision_food(struct Point p){
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	463b      	mov	r3, r7
 800433c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	dd08      	ble.n	8004358 <is_collision_food+0x24>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2bee      	cmp	r3, #238	; 0xee
 800434a:	dc05      	bgt.n	8004358 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 800434c:	687b      	ldr	r3, [r7, #4]
	if (p.x <= POS_X_MIN || p.x >= POS_X_MAX ||
 800434e:	2b12      	cmp	r3, #18
 8004350:	dd02      	ble.n	8004358 <is_collision_food+0x24>
		p.y <= POS_Y_MIN || p.y >= POS_Y_MAX){
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2bc6      	cmp	r3, #198	; 0xc6
 8004356:	dd01      	ble.n	800435c <is_collision_food+0x28>
		return 1;
 8004358:	2301      	movs	r3, #1
 800435a:	e01c      	b.n	8004396 <is_collision_food+0x62>
	}
	for (int i = 0; i < length; i++){
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e013      	b.n	800438a <is_collision_food+0x56>
		if (p.x == snake[i].x && p.y == snake[i].y)
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	490f      	ldr	r1, [pc, #60]	; (80043a4 <is_collision_food+0x70>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800436c:	429a      	cmp	r2, r3
 800436e:	d109      	bne.n	8004384 <is_collision_food+0x50>
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	490c      	ldr	r1, [pc, #48]	; (80043a4 <is_collision_food+0x70>)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d101      	bne.n	8004384 <is_collision_food+0x50>
			return 1;
 8004380:	2301      	movs	r3, #1
 8004382:	e008      	b.n	8004396 <is_collision_food+0x62>
	for (int i = 0; i < length; i++){
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <is_collision_food+0x74>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d3e6      	bcc.n	8004362 <is_collision_food+0x2e>
	}
	return 0;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000028c 	.word	0x2000028c
 80043a8:	2000000c 	.word	0x2000000c

080043ac <is_collision>:

int is_collision(){
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <is_collision+0x74>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dd0b      	ble.n	80043d2 <is_collision+0x26>
 80043ba:	4b19      	ldr	r3, [pc, #100]	; (8004420 <is_collision+0x74>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2bee      	cmp	r3, #238	; 0xee
 80043c0:	dc07      	bgt.n	80043d2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80043c2:	4b17      	ldr	r3, [pc, #92]	; (8004420 <is_collision+0x74>)
 80043c4:	685b      	ldr	r3, [r3, #4]
	if (snake[0].x <= POS_X_MIN || snake[0].x >= POS_X_MAX ||
 80043c6:	2b12      	cmp	r3, #18
 80043c8:	dd03      	ble.n	80043d2 <is_collision+0x26>
		snake[0].y <= POS_Y_MIN || snake[0].y >= POS_Y_MAX){
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <is_collision+0x74>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2bc6      	cmp	r3, #198	; 0xc6
 80043d0:	dd01      	ble.n	80043d6 <is_collision+0x2a>
		return 1;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e01e      	b.n	8004414 <is_collision+0x68>
	}
	for (int i = 1; i < length; i++){
 80043d6:	2301      	movs	r3, #1
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	e015      	b.n	8004408 <is_collision+0x5c>
		if (snake[0].x == snake[i].x && snake[0].y == snake[i].y)
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <is_collision+0x74>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	490f      	ldr	r1, [pc, #60]	; (8004420 <is_collision+0x74>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d10a      	bne.n	8004402 <is_collision+0x56>
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <is_collision+0x74>)
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	490b      	ldr	r1, [pc, #44]	; (8004420 <is_collision+0x74>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	440b      	add	r3, r1
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d101      	bne.n	8004402 <is_collision+0x56>
			return 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	e008      	b.n	8004414 <is_collision+0x68>
	for (int i = 1; i < length; i++){
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3301      	adds	r3, #1
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <is_collision+0x78>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d3e4      	bcc.n	80043dc <is_collision+0x30>
	}
	return 0;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	2000028c 	.word	0x2000028c
 8004424:	2000000c 	.word	0x2000000c

08004428 <is_eat>:

int is_eat(){
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
	if (snake[0].x <= (food.x + 4) && snake[0].x >= (food.x - 4) &&
 800442c:	4b12      	ldr	r3, [pc, #72]	; (8004478 <is_eat+0x50>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <is_eat+0x54>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3304      	adds	r3, #4
 8004436:	429a      	cmp	r2, r3
 8004438:	dc1b      	bgt.n	8004472 <is_eat+0x4a>
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <is_eat+0x50>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <is_eat+0x54>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b04      	subs	r3, #4
 8004444:	429a      	cmp	r2, r3
 8004446:	db14      	blt.n	8004472 <is_eat+0x4a>
		snake[0].y <= (food.y + 4) && snake[0].y >= (food.y - 4) ){
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <is_eat+0x50>)
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <is_eat+0x54>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	3304      	adds	r3, #4
	if (snake[0].x <= (food.x + 4) && snake[0].x >= (food.x - 4) &&
 8004452:	429a      	cmp	r2, r3
 8004454:	dc0d      	bgt.n	8004472 <is_eat+0x4a>
		snake[0].y <= (food.y + 4) && snake[0].y >= (food.y - 4) ){
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <is_eat+0x50>)
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <is_eat+0x54>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	3b04      	subs	r3, #4
 8004460:	429a      	cmp	r2, r3
 8004462:	db06      	blt.n	8004472 <is_eat+0x4a>
		point_clr(food);
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <is_eat+0x54>)
 8004466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800446a:	f7fe fdc5 	bl	8002ff8 <point_clr>
		return 1;
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <is_eat+0x4c>
	}
	return 0;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	bd80      	pop	{r7, pc}
 8004478:	2000028c 	.word	0x2000028c
 800447c:	20000010 	.word	0x20000010

08004480 <get_rand>:

int get_rand(int max){
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	return 0 + (int)(rand()*(max - 0 + 1.0)/(1.0 + RAND_MAX));
 8004488:	f007 fd38 	bl	800befc <rand>
 800448c:	4603      	mov	r3, r0
 800448e:	4618      	mov	r0, r3
 8004490:	f7fc f840 	bl	8000514 <__aeabi_i2d>
 8004494:	4604      	mov	r4, r0
 8004496:	460d      	mov	r5, r1
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc f83b 	bl	8000514 <__aeabi_i2d>
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <get_rand+0x5c>)
 80044a4:	f7fb feea 	bl	800027c <__adddf3>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4620      	mov	r0, r4
 80044ae:	4629      	mov	r1, r5
 80044b0:	f7fc f89a 	bl	80005e8 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <get_rand+0x60>)
 80044c2:	f7fc f9bb 	bl	800083c <__aeabi_ddiv>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7fc fb3b 	bl	8000b48 <__aeabi_d2iz>
 80044d2:	4603      	mov	r3, r0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bdb0      	pop	{r4, r5, r7, pc}
 80044dc:	3ff00000 	.word	0x3ff00000
 80044e0:	41e00000 	.word	0x41e00000

080044e4 <rand_food>:

void rand_food(){
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
	struct Point p;
	p.x = get_rand(POS_X_MAX);
 80044ea:	20ef      	movs	r0, #239	; 0xef
 80044ec:	f7ff ffc8 	bl	8004480 <get_rand>
 80044f0:	4603      	mov	r3, r0
 80044f2:	603b      	str	r3, [r7, #0]
	p.y = get_rand(POS_Y_MAX);
 80044f4:	20c7      	movs	r0, #199	; 0xc7
 80044f6:	f7ff ffc3 	bl	8004480 <get_rand>
 80044fa:	4603      	mov	r3, r0
 80044fc:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 80044fe:	e009      	b.n	8004514 <rand_food+0x30>
		p.x = get_rand(POS_X_MAX);
 8004500:	20ef      	movs	r0, #239	; 0xef
 8004502:	f7ff ffbd 	bl	8004480 <get_rand>
 8004506:	4603      	mov	r3, r0
 8004508:	603b      	str	r3, [r7, #0]
		p.y = get_rand(POS_Y_MAX);
 800450a:	20c7      	movs	r0, #199	; 0xc7
 800450c:	f7ff ffb8 	bl	8004480 <get_rand>
 8004510:	4603      	mov	r3, r0
 8004512:	607b      	str	r3, [r7, #4]
	while (is_collision_food(p) == 1){
 8004514:	463b      	mov	r3, r7
 8004516:	e893 0003 	ldmia.w	r3, {r0, r1}
 800451a:	f7ff ff0b 	bl	8004334 <is_collision_food>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d0ed      	beq.n	8004500 <rand_food+0x1c>
	}
	food = p;
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <rand_food+0x60>)
 8004526:	461a      	mov	r2, r3
 8004528:	463b      	mov	r3, r7
 800452a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800452e:	e882 0003 	stmia.w	r2, {r0, r1}
	point_food_lcd(food);
 8004532:	4b04      	ldr	r3, [pc, #16]	; (8004544 <rand_food+0x60>)
 8004534:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004538:	f7fe fd4b 	bl	8002fd2 <point_food_lcd>
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000010 	.word	0x20000010

08004548 <move_snake>:

void move_snake(){
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
	point_clr(snake[length - 1]);
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <move_snake+0xb8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3b01      	subs	r3, #1
 8004554:	4a2b      	ldr	r2, [pc, #172]	; (8004604 <move_snake+0xbc>)
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800455e:	f7fe fd4b 	bl	8002ff8 <point_clr>
	for (int i = length - 1; i > 0; i--){
 8004562:	4b27      	ldr	r3, [pc, #156]	; (8004600 <move_snake+0xb8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3b01      	subs	r3, #1
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	e016      	b.n	800459a <move_snake+0x52>
		snake[i].x = snake[i-1].x;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3b01      	subs	r3, #1
 8004570:	4a24      	ldr	r2, [pc, #144]	; (8004604 <move_snake+0xbc>)
 8004572:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8004576:	4923      	ldr	r1, [pc, #140]	; (8004604 <move_snake+0xbc>)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		snake[i].y = snake[i-1].y;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3b01      	subs	r3, #1
 8004582:	4a20      	ldr	r2, [pc, #128]	; (8004604 <move_snake+0xbc>)
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	491e      	ldr	r1, [pc, #120]	; (8004604 <move_snake+0xbc>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	605a      	str	r2, [r3, #4]
	for (int i = length - 1; i > 0; i--){
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3b01      	subs	r3, #1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	dce5      	bgt.n	800456c <move_snake+0x24>
	}
	switch (move) {
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <move_snake+0xc0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d822      	bhi.n	80045f0 <move_snake+0xa8>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <move_snake+0x68>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045cd 	.word	0x080045cd
 80045b8:	080045d9 	.word	0x080045d9
 80045bc:	080045e5 	.word	0x080045e5
		case RIGHT:
			snake[0].x += 7;
 80045c0:	4b10      	ldr	r3, [pc, #64]	; (8004604 <move_snake+0xbc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3307      	adds	r3, #7
 80045c6:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <move_snake+0xbc>)
 80045c8:	6013      	str	r3, [r2, #0]
			break;
 80045ca:	e012      	b.n	80045f2 <move_snake+0xaa>
		case LEFT:
			snake[0].x -= 7;
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <move_snake+0xbc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3b07      	subs	r3, #7
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <move_snake+0xbc>)
 80045d4:	6013      	str	r3, [r2, #0]
			break;
 80045d6:	e00c      	b.n	80045f2 <move_snake+0xaa>
		case UP:
			snake[0].y -= 7;
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <move_snake+0xbc>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	3b07      	subs	r3, #7
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <move_snake+0xbc>)
 80045e0:	6053      	str	r3, [r2, #4]
			break;
 80045e2:	e006      	b.n	80045f2 <move_snake+0xaa>
		case DOWN:
			snake[0].y += 7;
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <move_snake+0xbc>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	3307      	adds	r3, #7
 80045ea:	4a06      	ldr	r2, [pc, #24]	; (8004604 <move_snake+0xbc>)
 80045ec:	6053      	str	r3, [r2, #4]
			break;
 80045ee:	e000      	b.n	80045f2 <move_snake+0xaa>
		default:
			break;
 80045f0:	bf00      	nop
	}
	reDraw_snake();
 80045f2:	f000 f80b 	bl	800460c <reDraw_snake>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
 8004604:	2000028c 	.word	0x2000028c
 8004608:	20000274 	.word	0x20000274

0800460c <reDraw_snake>:

void reDraw_snake(){
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
	point_head_lcd(snake[0]);
 8004612:	4b0e      	ldr	r3, [pc, #56]	; (800464c <reDraw_snake+0x40>)
 8004614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004618:	f7fe fc6e 	bl	8002ef8 <point_head_lcd>
	for (int i = 1; i < length; i++){
 800461c:	2301      	movs	r3, #1
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	e00a      	b.n	8004638 <reDraw_snake+0x2c>
		point_snake_lcd(snake[i]);
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <reDraw_snake+0x40>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800462e:	f7fe fc7e 	bl	8002f2e <point_snake_lcd>
	for (int i = 1; i < length; i++){
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3301      	adds	r3, #1
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <reDraw_snake+0x44>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d3ef      	bcc.n	8004622 <reDraw_snake+0x16>
	}
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	2000028c 	.word	0x2000028c
 8004650:	2000000c 	.word	0x2000000c

08004654 <timer_init>:

uint16_t flag_timer4 = 0;
uint16_t timer4_counter = 0;
uint16_t timer4_MUL = 0;

void timer_init(){
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004658:	4803      	ldr	r0, [pc, #12]	; (8004668 <timer_init+0x14>)
 800465a:	f005 fbf3 	bl	8009e44 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 800465e:	4803      	ldr	r0, [pc, #12]	; (800466c <timer_init+0x18>)
 8004660:	f005 fb88 	bl	8009d74 <HAL_TIM_Base_Start>
}
 8004664:	bf00      	nop
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000730 	.word	0x20000730
 800466c:	200006e8 	.word	0x200006e8

08004670 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800467a:	4a08      	ldr	r2, [pc, #32]	; (800469c <setTimer2+0x2c>)
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <setTimer2+0x2c>)
 8004682:	881a      	ldrh	r2, [r3, #0]
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <setTimer2+0x30>)
 8004686:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <setTimer2+0x34>)
 800468a:	2200      	movs	r2, #0
 800468c:	801a      	strh	r2, [r3, #0]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	2000067a 	.word	0x2000067a
 80046a0:	20000678 	.word	0x20000678
 80046a4:	20000676 	.word	0x20000676

080046a8 <setTimer3>:

void setTimer3(uint16_t duration){
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 80046b2:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <setTimer3+0x2c>)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <setTimer3+0x2c>)
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <setTimer3+0x30>)
 80046be:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <setTimer3+0x34>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	801a      	strh	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000680 	.word	0x20000680
 80046d8:	2000067e 	.word	0x2000067e
 80046dc:	2000067c 	.word	0x2000067c

080046e0 <setTimer4>:

void setTimer4(uint16_t duration){
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <setTimer4+0x2c>)
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <setTimer4+0x2c>)
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <setTimer4+0x30>)
 80046f6:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <setTimer4+0x34>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	801a      	strh	r2, [r3, #0]
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000686 	.word	0x20000686
 8004710:	20000684 	.word	0x20000684
 8004714:	20000682 	.word	0x20000682

08004718 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d140      	bne.n	80047ac <HAL_TIM_PeriodElapsedCallback+0x94>
		if(timer2_counter > 0){
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800473c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0){
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004746:	4b1c      	ldr	r3, [pc, #112]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004748:	2201      	movs	r2, #1
 800474a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800474e:	881a      	ldrh	r2, [r3, #0]
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004752:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d010      	beq.n	800477e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004766:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0){
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004772:	2201      	movs	r2, #1
 8004774:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004778:	881a      	ldrh	r2, [r3, #0]
 800477a:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800477c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004790:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0){
 8004792:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800479c:	2201      	movs	r2, #1
 800479e:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80047a6:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80047a8:	f7ff fb80 	bl	8003eac <led7_Scan>
	}
}
 80047ac:	bf00      	nop
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000678 	.word	0x20000678
 80047b8:	20000676 	.word	0x20000676
 80047bc:	2000067a 	.word	0x2000067a
 80047c0:	2000067e 	.word	0x2000067e
 80047c4:	2000067c 	.word	0x2000067c
 80047c8:	20000680 	.word	0x20000680
 80047cc:	20000684 	.word	0x20000684
 80047d0:	20000682 	.word	0x20000682
 80047d4:	20000686 	.word	0x20000686

080047d8 <delay_us>:

void delay_us (uint16_t us){
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <delay_us+0x30>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80047ea:	bf00      	nop
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <delay_us+0x30>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d3f9      	bcc.n	80047ec <delay_us+0x14>
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	200006e8 	.word	0x200006e8

0800480c <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <MX_SPI1_Init+0x64>)
 8004812:	4a18      	ldr	r2, [pc, #96]	; (8004874 <MX_SPI1_Init+0x68>)
 8004814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <MX_SPI1_Init+0x64>)
 8004818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800481c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <MX_SPI1_Init+0x64>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <MX_SPI1_Init+0x64>)
 8004826:	2200      	movs	r2, #0
 8004828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <MX_SPI1_Init+0x64>)
 800482c:	2200      	movs	r2, #0
 800482e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <MX_SPI1_Init+0x64>)
 8004832:	2200      	movs	r2, #0
 8004834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <MX_SPI1_Init+0x64>)
 8004838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800483c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <MX_SPI1_Init+0x64>)
 8004840:	2200      	movs	r2, #0
 8004842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <MX_SPI1_Init+0x64>)
 8004846:	2200      	movs	r2, #0
 8004848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <MX_SPI1_Init+0x64>)
 800484c:	2200      	movs	r2, #0
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <MX_SPI1_Init+0x64>)
 8004852:	2200      	movs	r2, #0
 8004854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <MX_SPI1_Init+0x64>)
 8004858:	220a      	movs	r2, #10
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800485c:	4804      	ldr	r0, [pc, #16]	; (8004870 <MX_SPI1_Init+0x64>)
 800485e:	f004 fc4d 	bl	80090fc <HAL_SPI_Init>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004868:	f7ff fcc8 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000688 	.word	0x20000688
 8004874:	40013000 	.word	0x40013000

08004878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_MspInit+0x4c>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	4a0f      	ldr	r2, [pc, #60]	; (80048c4 <HAL_MspInit+0x4c>)
 8004888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800488c:	6453      	str	r3, [r2, #68]	; 0x44
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_MspInit+0x4c>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004896:	607b      	str	r3, [r7, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	603b      	str	r3, [r7, #0]
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_MspInit+0x4c>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <HAL_MspInit+0x4c>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a8:	6413      	str	r3, [r2, #64]	; 0x40
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_MspInit+0x4c>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800

080048c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <HAL_ADC_MspInit+0x110>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d171      	bne.n	80049ce <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_ADC_MspInit+0x114>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <HAL_ADC_MspInit+0x114>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6453      	str	r3, [r2, #68]	; 0x44
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <HAL_ADC_MspInit+0x114>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b34      	ldr	r3, [pc, #208]	; (80049dc <HAL_ADC_MspInit+0x114>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_ADC_MspInit+0x114>)
 8004910:	f043 0304 	orr.w	r3, r3, #4
 8004914:	6313      	str	r3, [r2, #48]	; 0x30
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_ADC_MspInit+0x114>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	4b2d      	ldr	r3, [pc, #180]	; (80049dc <HAL_ADC_MspInit+0x114>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <HAL_ADC_MspInit+0x114>)
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b2a      	ldr	r3, [pc, #168]	; (80049dc <HAL_ADC_MspInit+0x114>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800493e:	2307      	movs	r3, #7
 8004940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004942:	2303      	movs	r3, #3
 8004944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800494a:	f107 0314 	add.w	r3, r7, #20
 800494e:	4619      	mov	r1, r3
 8004950:	4823      	ldr	r0, [pc, #140]	; (80049e0 <HAL_ADC_MspInit+0x118>)
 8004952:	f002 fd93 	bl	800747c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004956:	2303      	movs	r3, #3
 8004958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800495a:	2303      	movs	r3, #3
 800495c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004962:	f107 0314 	add.w	r3, r7, #20
 8004966:	4619      	mov	r1, r3
 8004968:	481e      	ldr	r0, [pc, #120]	; (80049e4 <HAL_ADC_MspInit+0x11c>)
 800496a:	f002 fd87 	bl	800747c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800496e:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 8004970:	4a1e      	ldr	r2, [pc, #120]	; (80049ec <HAL_ADC_MspInit+0x124>)
 8004972:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004974:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004980:	4b19      	ldr	r3, [pc, #100]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 8004988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800498c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800498e:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 8004990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004994:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 8004998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800499c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 80049a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049b2:	480d      	ldr	r0, [pc, #52]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 80049b4:	f002 f960 	bl	8006c78 <HAL_DMA_Init>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80049be:	f7ff fc1d 	bl	80041fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
 80049c8:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <HAL_ADC_MspInit+0x120>)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80049ce:	bf00      	nop
 80049d0:	3728      	adds	r7, #40	; 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40012000 	.word	0x40012000
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40020800 	.word	0x40020800
 80049e4:	40020400 	.word	0x40020400
 80049e8:	20000608 	.word	0x20000608
 80049ec:	40026410 	.word	0x40026410

080049f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_I2C_MspInit+0x84>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d12b      	bne.n	8004a6a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_I2C_MspInit+0x88>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <HAL_I2C_MspInit+0x88>)
 8004a1c:	f043 0302 	orr.w	r3, r3, #2
 8004a20:	6313      	str	r3, [r2, #48]	; 0x30
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <HAL_I2C_MspInit+0x88>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a2e:	23c0      	movs	r3, #192	; 0xc0
 8004a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a32:	2312      	movs	r3, #18
 8004a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a3e:	2304      	movs	r3, #4
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	4619      	mov	r1, r3
 8004a48:	480c      	ldr	r0, [pc, #48]	; (8004a7c <HAL_I2C_MspInit+0x8c>)
 8004a4a:	f002 fd17 	bl	800747c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_I2C_MspInit+0x88>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <HAL_I2C_MspInit+0x88>)
 8004a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_I2C_MspInit+0x88>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a6a:	bf00      	nop
 8004a6c:	3728      	adds	r7, #40	; 0x28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40005400 	.word	0x40005400
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40020400 	.word	0x40020400

08004a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_SPI_MspInit+0x84>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d12b      	bne.n	8004afa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <HAL_SPI_MspInit+0x88>)
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	4a17      	ldr	r2, [pc, #92]	; (8004b08 <HAL_SPI_MspInit+0x88>)
 8004aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <HAL_SPI_MspInit+0x88>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <HAL_SPI_MspInit+0x88>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <HAL_SPI_MspInit+0x88>)
 8004ac8:	f043 0302 	orr.w	r3, r3, #2
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_SPI_MspInit+0x88>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004ada:	2338      	movs	r3, #56	; 0x38
 8004adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004aea:	2305      	movs	r3, #5
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aee:	f107 0314 	add.w	r3, r7, #20
 8004af2:	4619      	mov	r1, r3
 8004af4:	4805      	ldr	r0, [pc, #20]	; (8004b0c <HAL_SPI_MspInit+0x8c>)
 8004af6:	f002 fcc1 	bl	800747c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004afa:	bf00      	nop
 8004afc:	3728      	adds	r7, #40	; 0x28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40013000 	.word	0x40013000
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40020400 	.word	0x40020400

08004b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <HAL_TIM_Base_MspInit+0x98>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d10e      	bne.n	8004b40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	4b21      	ldr	r3, [pc, #132]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	4a20      	ldr	r2, [pc, #128]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6453      	str	r3, [r2, #68]	; 0x44
 8004b32:	4b1e      	ldr	r3, [pc, #120]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004b3e:	e02e      	b.n	8004b9e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d116      	bne.n	8004b78 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	4b17      	ldr	r3, [pc, #92]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a16      	ldr	r2, [pc, #88]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5a:	4b14      	ldr	r3, [pc, #80]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	201c      	movs	r0, #28
 8004b6c:	f002 f84d 	bl	8006c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b70:	201c      	movs	r0, #28
 8004b72:	f002 f866 	bl	8006c42 <HAL_NVIC_EnableIRQ>
}
 8004b76:	e012      	b.n	8004b9e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <HAL_TIM_Base_MspInit+0xa0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10d      	bne.n	8004b9e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b90:	6413      	str	r3, [r2, #64]	; 0x40
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_TIM_Base_MspInit+0x9c>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40001c00 	.word	0x40001c00

08004bb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	f107 030c 	add.w	r3, r7, #12
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <HAL_TIM_MspPostInit+0x68>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d11e      	bne.n	8004c14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_TIM_MspPostInit+0x6c>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <HAL_TIM_MspPostInit+0x6c>)
 8004be0:	f043 0320 	orr.w	r3, r3, #32
 8004be4:	6313      	str	r3, [r2, #48]	; 0x30
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <HAL_TIM_MspPostInit+0x6c>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004c04:	2309      	movs	r3, #9
 8004c06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c08:	f107 030c 	add.w	r3, r7, #12
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4805      	ldr	r0, [pc, #20]	; (8004c24 <HAL_TIM_MspPostInit+0x70>)
 8004c10:	f002 fc34 	bl	800747c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8004c14:	bf00      	nop
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40001c00 	.word	0x40001c00
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40021400 	.word	0x40021400

08004c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08c      	sub	sp, #48	; 0x30
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c30:	f107 031c 	add.w	r3, r7, #28
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3a      	ldr	r2, [pc, #232]	; (8004d30 <HAL_UART_MspInit+0x108>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d135      	bne.n	8004cb6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	4a38      	ldr	r2, [pc, #224]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004c54:	f043 0310 	orr.w	r3, r3, #16
 8004c58:	6453      	str	r3, [r2, #68]	; 0x44
 8004c5a:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4a31      	ldr	r2, [pc, #196]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6313      	str	r3, [r2, #48]	; 0x30
 8004c76:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c90:	2303      	movs	r3, #3
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c94:	2307      	movs	r3, #7
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c98:	f107 031c 	add.w	r3, r7, #28
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4826      	ldr	r0, [pc, #152]	; (8004d38 <HAL_UART_MspInit+0x110>)
 8004ca0:	f002 fbec 	bl	800747c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2025      	movs	r0, #37	; 0x25
 8004caa:	f001 ffae 	bl	8006c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cae:	2025      	movs	r0, #37	; 0x25
 8004cb0:	f001 ffc7 	bl	8006c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004cb4:	e038      	b.n	8004d28 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <HAL_UART_MspInit+0x114>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d133      	bne.n	8004d28 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cce:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6313      	str	r3, [r2, #48]	; 0x30
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <HAL_UART_MspInit+0x10c>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d04:	2303      	movs	r3, #3
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d08:	2307      	movs	r3, #7
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0c:	f107 031c 	add.w	r3, r7, #28
 8004d10:	4619      	mov	r1, r3
 8004d12:	4809      	ldr	r0, [pc, #36]	; (8004d38 <HAL_UART_MspInit+0x110>)
 8004d14:	f002 fbb2 	bl	800747c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	2026      	movs	r0, #38	; 0x26
 8004d1e:	f001 ff74 	bl	8006c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d22:	2026      	movs	r0, #38	; 0x26
 8004d24:	f001 ff8d 	bl	8006c42 <HAL_NVIC_EnableIRQ>
}
 8004d28:	bf00      	nop
 8004d2a:	3730      	adds	r7, #48	; 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40011000 	.word	0x40011000
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40020000 	.word	0x40020000
 8004d3c:	40004400 	.word	0x40004400

08004d40 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004d46:	1d3b      	adds	r3, r7, #4
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004d54:	4b1c      	ldr	r3, [pc, #112]	; (8004dc8 <HAL_FSMC_MspInit+0x88>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d131      	bne.n	8004dc0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <HAL_FSMC_MspInit+0x88>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_FSMC_MspInit+0x8c>)
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_FSMC_MspInit+0x8c>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6393      	str	r3, [r2, #56]	; 0x38
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <HAL_FSMC_MspInit+0x8c>)
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8004d7e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8004d82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d84:	2302      	movs	r3, #2
 8004d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004d90:	230c      	movs	r3, #12
 8004d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	480d      	ldr	r0, [pc, #52]	; (8004dd0 <HAL_FSMC_MspInit+0x90>)
 8004d9a:	f002 fb6f 	bl	800747c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004d9e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8004da2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da4:	2302      	movs	r3, #2
 8004da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dac:	2303      	movs	r3, #3
 8004dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004db0:	230c      	movs	r3, #12
 8004db2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <HAL_FSMC_MspInit+0x94>)
 8004dba:	f002 fb5f 	bl	800747c <HAL_GPIO_Init>
 8004dbe:	e000      	b.n	8004dc2 <HAL_FSMC_MspInit+0x82>
    return;
 8004dc0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200006e0 	.word	0x200006e0
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40020c00 	.word	0x40020c00

08004dd8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004de0:	f7ff ffae 	bl	8004d40 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004df0:	e7fe      	b.n	8004df0 <NMI_Handler+0x4>

08004df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004df6:	e7fe      	b.n	8004df6 <HardFault_Handler+0x4>

08004df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dfc:	e7fe      	b.n	8004dfc <MemManage_Handler+0x4>

08004dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e02:	e7fe      	b.n	8004e02 <BusFault_Handler+0x4>

08004e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <UsageFault_Handler+0x4>

08004e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e38:	f001 f9b6 	bl	80061a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e44:	4802      	ldr	r0, [pc, #8]	; (8004e50 <TIM2_IRQHandler+0x10>)
 8004e46:	f005 f8c6 	bl	8009fd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000730 	.word	0x20000730

08004e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e58:	4802      	ldr	r0, [pc, #8]	; (8004e64 <USART1_IRQHandler+0x10>)
 8004e5a:	f006 f801 	bl	800ae60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200007c4 	.word	0x200007c4

08004e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e6c:	4802      	ldr	r0, [pc, #8]	; (8004e78 <USART2_IRQHandler+0x10>)
 8004e6e:	f005 fff7 	bl	800ae60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000808 	.word	0x20000808

08004e7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <DMA2_Stream0_IRQHandler+0x10>)
 8004e82:	f002 f891 	bl	8006fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000608 	.word	0x20000608

08004e90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
	return 1;
 8004e94:	2301      	movs	r3, #1
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <_kill>:

int _kill(int pid, int sig)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004eaa:	f007 f9fb 	bl	800c2a4 <__errno>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2216      	movs	r2, #22
 8004eb2:	601a      	str	r2, [r3, #0]
	return -1;
 8004eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <_exit>:

void _exit (int status)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ffe7 	bl	8004ea0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ed2:	e7fe      	b.n	8004ed2 <_exit+0x12>

08004ed4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e00a      	b.n	8004efc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ee6:	f3af 8000 	nop.w
 8004eea:	4601      	mov	r1, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	60ba      	str	r2, [r7, #8]
 8004ef2:	b2ca      	uxtb	r2, r1
 8004ef4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	dbf0      	blt.n	8004ee6 <_read+0x12>
	}

return len;
 8004f04:	687b      	ldr	r3, [r7, #4]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b086      	sub	sp, #24
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e009      	b.n	8004f34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	60ba      	str	r2, [r7, #8]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	3301      	adds	r3, #1
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	dbf1      	blt.n	8004f20 <_write+0x12>
	}
	return len;
 8004f3c:	687b      	ldr	r3, [r7, #4]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <_close>:

int _close(int file)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
	return -1;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f6e:	605a      	str	r2, [r3, #4]
	return 0;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <_isatty>:

int _isatty(int file)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
	return 1;
 8004f86:	2301      	movs	r3, #1
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
	return 0;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fb8:	4a14      	ldr	r2, [pc, #80]	; (800500c <_sbrk+0x5c>)
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <_sbrk+0x60>)
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fc4:	4b13      	ldr	r3, [pc, #76]	; (8005014 <_sbrk+0x64>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d102      	bne.n	8004fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fcc:	4b11      	ldr	r3, [pc, #68]	; (8005014 <_sbrk+0x64>)
 8004fce:	4a12      	ldr	r2, [pc, #72]	; (8005018 <_sbrk+0x68>)
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <_sbrk+0x64>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d207      	bcs.n	8004ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fe0:	f007 f960 	bl	800c2a4 <__errno>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	220c      	movs	r2, #12
 8004fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295
 8004fee:	e009      	b.n	8005004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ff0:	4b08      	ldr	r3, [pc, #32]	; (8005014 <_sbrk+0x64>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <_sbrk+0x64>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	4a05      	ldr	r2, [pc, #20]	; (8005014 <_sbrk+0x64>)
 8005000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005002:	68fb      	ldr	r3, [r7, #12]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20020000 	.word	0x20020000
 8005010:	00000400 	.word	0x00000400
 8005014:	200006e4 	.word	0x200006e4
 8005018:	200009a0 	.word	0x200009a0

0800501c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005020:	4b06      	ldr	r3, [pc, #24]	; (800503c <SystemInit+0x20>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	4a05      	ldr	r2, [pc, #20]	; (800503c <SystemInit+0x20>)
 8005028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800502c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005054:	463b      	mov	r3, r7
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <MX_TIM1_Init+0x98>)
 800505e:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <MX_TIM1_Init+0x9c>)
 8005060:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8005062:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <MX_TIM1_Init+0x98>)
 8005064:	2253      	movs	r2, #83	; 0x53
 8005066:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005068:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <MX_TIM1_Init+0x98>)
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800506e:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <MX_TIM1_Init+0x98>)
 8005070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005074:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005076:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <MX_TIM1_Init+0x98>)
 8005078:	2200      	movs	r2, #0
 800507a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800507c:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <MX_TIM1_Init+0x98>)
 800507e:	2200      	movs	r2, #0
 8005080:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <MX_TIM1_Init+0x98>)
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005088:	4813      	ldr	r0, [pc, #76]	; (80050d8 <MX_TIM1_Init+0x98>)
 800508a:	f004 fe23 	bl	8009cd4 <HAL_TIM_Base_Init>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005094:	f7ff f8b2 	bl	80041fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800509c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800509e:	f107 0308 	add.w	r3, r7, #8
 80050a2:	4619      	mov	r1, r3
 80050a4:	480c      	ldr	r0, [pc, #48]	; (80050d8 <MX_TIM1_Init+0x98>)
 80050a6:	f005 f961 	bl	800a36c <HAL_TIM_ConfigClockSource>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80050b0:	f7ff f8a4 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80050bc:	463b      	mov	r3, r7
 80050be:	4619      	mov	r1, r3
 80050c0:	4805      	ldr	r0, [pc, #20]	; (80050d8 <MX_TIM1_Init+0x98>)
 80050c2:	f005 fd2d 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80050cc:	f7ff f896 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80050d0:	bf00      	nop
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	200006e8 	.word	0x200006e8
 80050dc:	40010000 	.word	0x40010000

080050e0 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	609a      	str	r2, [r3, #8]
 80050f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050f4:	463b      	mov	r3, r7
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <MX_TIM2_Init+0x94>)
 80050fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005102:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <MX_TIM2_Init+0x94>)
 8005106:	f240 3247 	movw	r2, #839	; 0x347
 800510a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800510c:	4b19      	ldr	r3, [pc, #100]	; (8005174 <MX_TIM2_Init+0x94>)
 800510e:	2200      	movs	r2, #0
 8005110:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8005112:	4b18      	ldr	r3, [pc, #96]	; (8005174 <MX_TIM2_Init+0x94>)
 8005114:	2263      	movs	r2, #99	; 0x63
 8005116:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005118:	4b16      	ldr	r3, [pc, #88]	; (8005174 <MX_TIM2_Init+0x94>)
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <MX_TIM2_Init+0x94>)
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005124:	4813      	ldr	r0, [pc, #76]	; (8005174 <MX_TIM2_Init+0x94>)
 8005126:	f004 fdd5 	bl	8009cd4 <HAL_TIM_Base_Init>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005130:	f7ff f864 	bl	80041fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005138:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800513a:	f107 0308 	add.w	r3, r7, #8
 800513e:	4619      	mov	r1, r3
 8005140:	480c      	ldr	r0, [pc, #48]	; (8005174 <MX_TIM2_Init+0x94>)
 8005142:	f005 f913 	bl	800a36c <HAL_TIM_ConfigClockSource>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800514c:	f7ff f856 	bl	80041fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005150:	2300      	movs	r3, #0
 8005152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005154:	2300      	movs	r3, #0
 8005156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005158:	463b      	mov	r3, r7
 800515a:	4619      	mov	r1, r3
 800515c:	4805      	ldr	r0, [pc, #20]	; (8005174 <MX_TIM2_Init+0x94>)
 800515e:	f005 fcdf 	bl	800ab20 <HAL_TIMEx_MasterConfigSynchronization>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005168:	f7ff f848 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800516c:	bf00      	nop
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000730 	.word	0x20000730

08005178 <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	609a      	str	r2, [r3, #8]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	611a      	str	r2, [r3, #16]
 800518c:	615a      	str	r2, [r3, #20]
 800518e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005190:	4b1e      	ldr	r3, [pc, #120]	; (800520c <MX_TIM13_Init+0x94>)
 8005192:	4a1f      	ldr	r2, [pc, #124]	; (8005210 <MX_TIM13_Init+0x98>)
 8005194:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <MX_TIM13_Init+0x94>)
 8005198:	f240 3247 	movw	r2, #839	; 0x347
 800519c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <MX_TIM13_Init+0x94>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <MX_TIM13_Init+0x94>)
 80051a6:	2263      	movs	r2, #99	; 0x63
 80051a8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051aa:	4b18      	ldr	r3, [pc, #96]	; (800520c <MX_TIM13_Init+0x94>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051b0:	4b16      	ldr	r3, [pc, #88]	; (800520c <MX_TIM13_Init+0x94>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80051b6:	4815      	ldr	r0, [pc, #84]	; (800520c <MX_TIM13_Init+0x94>)
 80051b8:	f004 fd8c 	bl	8009cd4 <HAL_TIM_Base_Init>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80051c2:	f7ff f81b 	bl	80041fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80051c6:	4811      	ldr	r0, [pc, #68]	; (800520c <MX_TIM13_Init+0x94>)
 80051c8:	f004 feac 	bl	8009f24 <HAL_TIM_PWM_Init>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80051d2:	f7ff f813 	bl	80041fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051d6:	2360      	movs	r3, #96	; 0x60
 80051d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	2200      	movs	r2, #0
 80051ea:	4619      	mov	r1, r3
 80051ec:	4807      	ldr	r0, [pc, #28]	; (800520c <MX_TIM13_Init+0x94>)
 80051ee:	f004 fffb 	bl	800a1e8 <HAL_TIM_PWM_ConfigChannel>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80051f8:	f7ff f800 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80051fc:	4803      	ldr	r0, [pc, #12]	; (800520c <MX_TIM13_Init+0x94>)
 80051fe:	f7ff fcd9 	bl	8004bb4 <HAL_TIM_MspPostInit>

}
 8005202:	bf00      	nop
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000778 	.word	0x20000778
 8005210:	40001c00 	.word	0x40001c00

08005214 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e025      	b.n	8005274 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522c:	2b00      	cmp	r3, #0
 800522e:	da06      	bge.n	800523e <TP_Write_Byte+0x2a>
 8005230:	2201      	movs	r2, #1
 8005232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005236:	4813      	ldr	r0, [pc, #76]	; (8005284 <TP_Write_Byte+0x70>)
 8005238:	f002 fad4 	bl	80077e4 <HAL_GPIO_WritePin>
 800523c:	e005      	b.n	800524a <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800523e:	2200      	movs	r2, #0
 8005240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005244:	480f      	ldr	r0, [pc, #60]	; (8005284 <TP_Write_Byte+0x70>)
 8005246:	f002 facd 	bl	80077e4 <HAL_GPIO_WritePin>
		num<<=1;
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005250:	2200      	movs	r2, #0
 8005252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005256:	480c      	ldr	r0, [pc, #48]	; (8005288 <TP_Write_Byte+0x74>)
 8005258:	f002 fac4 	bl	80077e4 <HAL_GPIO_WritePin>
		delay_us(1);
 800525c:	2001      	movs	r0, #1
 800525e:	f7ff fabb 	bl	80047d8 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005262:	2201      	movs	r2, #1
 8005264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005268:	4807      	ldr	r0, [pc, #28]	; (8005288 <TP_Write_Byte+0x74>)
 800526a:	f002 fabb 	bl	80077e4 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	3301      	adds	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	2b07      	cmp	r3, #7
 8005278:	d9d6      	bls.n	8005228 <TP_Write_Byte+0x14>
	}
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40020800 	.word	0x40020800
 8005288:	40021800 	.word	0x40021800

0800528c <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 800529a:	2300      	movs	r3, #0
 800529c:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800529e:	2200      	movs	r2, #0
 80052a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052a4:	482f      	ldr	r0, [pc, #188]	; (8005364 <TP_Read_AD+0xd8>)
 80052a6:	f002 fa9d 	bl	80077e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80052aa:	2200      	movs	r2, #0
 80052ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052b0:	482d      	ldr	r0, [pc, #180]	; (8005368 <TP_Read_AD+0xdc>)
 80052b2:	f002 fa97 	bl	80077e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	482a      	ldr	r0, [pc, #168]	; (8005364 <TP_Read_AD+0xd8>)
 80052bc:	f002 fa92 	bl	80077e4 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff ffa6 	bl	8005214 <TP_Write_Byte>
	delay_us(6);
 80052c8:	2006      	movs	r0, #6
 80052ca:	f7ff fa85 	bl	80047d8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80052ce:	2200      	movs	r2, #0
 80052d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052d4:	4823      	ldr	r0, [pc, #140]	; (8005364 <TP_Read_AD+0xd8>)
 80052d6:	f002 fa85 	bl	80077e4 <HAL_GPIO_WritePin>
	delay_us(1);
 80052da:	2001      	movs	r0, #1
 80052dc:	f7ff fa7c 	bl	80047d8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80052e0:	2201      	movs	r2, #1
 80052e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052e6:	481f      	ldr	r0, [pc, #124]	; (8005364 <TP_Read_AD+0xd8>)
 80052e8:	f002 fa7c 	bl	80077e4 <HAL_GPIO_WritePin>
	delay_us(1);
 80052ec:	2001      	movs	r0, #1
 80052ee:	f7ff fa73 	bl	80047d8 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052f8:	481a      	ldr	r0, [pc, #104]	; (8005364 <TP_Read_AD+0xd8>)
 80052fa:	f002 fa73 	bl	80077e4 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	e01f      	b.n	8005344 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8005304:	89bb      	ldrh	r3, [r7, #12]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800530a:	2200      	movs	r2, #0
 800530c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005310:	4814      	ldr	r0, [pc, #80]	; (8005364 <TP_Read_AD+0xd8>)
 8005312:	f002 fa67 	bl	80077e4 <HAL_GPIO_WritePin>
		delay_us(1);
 8005316:	2001      	movs	r0, #1
 8005318:	f7ff fa5e 	bl	80047d8 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800531c:	2201      	movs	r2, #1
 800531e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005322:	4810      	ldr	r0, [pc, #64]	; (8005364 <TP_Read_AD+0xd8>)
 8005324:	f002 fa5e 	bl	80077e4 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005328:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800532c:	480e      	ldr	r0, [pc, #56]	; (8005368 <TP_Read_AD+0xdc>)
 800532e:	f002 fa41 	bl	80077b4 <HAL_GPIO_ReadPin>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <TP_Read_AD+0xb2>
 8005338:	89bb      	ldrh	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	3301      	adds	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d9dc      	bls.n	8005304 <TP_Read_AD+0x78>
	}
	Num>>=4;
 800534a:	89bb      	ldrh	r3, [r7, #12]
 800534c:	091b      	lsrs	r3, r3, #4
 800534e:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8005350:	2201      	movs	r2, #1
 8005352:	2180      	movs	r1, #128	; 0x80
 8005354:	4803      	ldr	r0, [pc, #12]	; (8005364 <TP_Read_AD+0xd8>)
 8005356:	f002 fa45 	bl	80077e4 <HAL_GPIO_WritePin>
	return(Num);
 800535a:	89bb      	ldrh	r3, [r7, #12]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021800 	.word	0x40021800
 8005368:	40020800 	.word	0x40020800

0800536c <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8005376:	2300      	movs	r3, #0
 8005378:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 800537a:	2300      	movs	r3, #0
 800537c:	83fb      	strh	r3, [r7, #30]
 800537e:	e00e      	b.n	800539e <TP_Read_XOY+0x32>
 8005380:	8bfc      	ldrh	r4, [r7, #30]
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ff81 	bl	800528c <TP_Read_AD>
 800538a:	4603      	mov	r3, r0
 800538c:	461a      	mov	r2, r3
 800538e:	0063      	lsls	r3, r4, #1
 8005390:	3320      	adds	r3, #32
 8005392:	443b      	add	r3, r7
 8005394:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005398:	8bfb      	ldrh	r3, [r7, #30]
 800539a:	3301      	adds	r3, #1
 800539c:	83fb      	strh	r3, [r7, #30]
 800539e:	8bfb      	ldrh	r3, [r7, #30]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d9ed      	bls.n	8005380 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	83fb      	strh	r3, [r7, #30]
 80053a8:	e035      	b.n	8005416 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 80053aa:	8bfb      	ldrh	r3, [r7, #30]
 80053ac:	3301      	adds	r3, #1
 80053ae:	83bb      	strh	r3, [r7, #28]
 80053b0:	e02b      	b.n	800540a <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 80053b2:	8bfb      	ldrh	r3, [r7, #30]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	3320      	adds	r3, #32
 80053b8:	443b      	add	r3, r7
 80053ba:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80053be:	8bbb      	ldrh	r3, [r7, #28]
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	3320      	adds	r3, #32
 80053c4:	443b      	add	r3, r7
 80053c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d91a      	bls.n	8005404 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 80053ce:	8bfb      	ldrh	r3, [r7, #30]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	3320      	adds	r3, #32
 80053d4:	443b      	add	r3, r7
 80053d6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80053da:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80053dc:	8bbb      	ldrh	r3, [r7, #28]
 80053de:	8bfa      	ldrh	r2, [r7, #30]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	3320      	adds	r3, #32
 80053e4:	443b      	add	r3, r7
 80053e6:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80053ea:	0053      	lsls	r3, r2, #1
 80053ec:	3320      	adds	r3, #32
 80053ee:	443b      	add	r3, r7
 80053f0:	460a      	mov	r2, r1
 80053f2:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 80053f6:	8bbb      	ldrh	r3, [r7, #28]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	3320      	adds	r3, #32
 80053fc:	443b      	add	r3, r7
 80053fe:	8b3a      	ldrh	r2, [r7, #24]
 8005400:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8005404:	8bbb      	ldrh	r3, [r7, #28]
 8005406:	3301      	adds	r3, #1
 8005408:	83bb      	strh	r3, [r7, #28]
 800540a:	8bbb      	ldrh	r3, [r7, #28]
 800540c:	2b04      	cmp	r3, #4
 800540e:	d9d0      	bls.n	80053b2 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 8005410:	8bfb      	ldrh	r3, [r7, #30]
 8005412:	3301      	adds	r3, #1
 8005414:	83fb      	strh	r3, [r7, #30]
 8005416:	8bfb      	ldrh	r3, [r7, #30]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d9c6      	bls.n	80053aa <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 800541c:	2300      	movs	r3, #0
 800541e:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8005420:	2301      	movs	r3, #1
 8005422:	83fb      	strh	r3, [r7, #30]
 8005424:	e00b      	b.n	800543e <TP_Read_XOY+0xd2>
 8005426:	8bfb      	ldrh	r3, [r7, #30]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	3320      	adds	r3, #32
 800542c:	443b      	add	r3, r7
 800542e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005432:	8b7b      	ldrh	r3, [r7, #26]
 8005434:	4413      	add	r3, r2
 8005436:	837b      	strh	r3, [r7, #26]
 8005438:	8bfb      	ldrh	r3, [r7, #30]
 800543a:	3301      	adds	r3, #1
 800543c:	83fb      	strh	r3, [r7, #30]
 800543e:	8bfb      	ldrh	r3, [r7, #30]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d9f0      	bls.n	8005426 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005444:	8b7b      	ldrh	r3, [r7, #26]
 8005446:	4a05      	ldr	r2, [pc, #20]	; (800545c <TP_Read_XOY+0xf0>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	085b      	lsrs	r3, r3, #1
 800544e:	833b      	strh	r3, [r7, #24]
	return temp;
 8005450:	8b3b      	ldrh	r3, [r7, #24]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3724      	adds	r7, #36	; 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd90      	pop	{r4, r7, pc}
 800545a:	bf00      	nop
 800545c:	aaaaaaab 	.word	0xaaaaaaab

08005460 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <TP_Read_XY+0x3c>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff ff7c 	bl	800536c <TP_Read_XOY>
 8005474:	4603      	mov	r3, r0
 8005476:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <TP_Read_XY+0x40>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff ff75 	bl	800536c <TP_Read_XOY>
 8005482:	4603      	mov	r3, r0
 8005484:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	89fa      	ldrh	r2, [r7, #14]
 800548a:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	89ba      	ldrh	r2, [r7, #12]
 8005490:	801a      	strh	r2, [r3, #0]
	return 1;
 8005492:	2301      	movs	r3, #1
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	200000a4 	.word	0x200000a4
 80054a0:	200000a5 	.word	0x200000a5

080054a4 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 80054ae:	f107 0212 	add.w	r2, r7, #18
 80054b2:	f107 0314 	add.w	r3, r7, #20
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ffd1 	bl	8005460 <TP_Read_XY>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <TP_Read_XY2+0x28>
 80054c8:	2300      	movs	r3, #0
 80054ca:	e049      	b.n	8005560 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 80054cc:	f107 020e 	add.w	r2, r7, #14
 80054d0:	f107 0310 	add.w	r3, r7, #16
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ffc2 	bl	8005460 <TP_Read_XY>
 80054dc:	4603      	mov	r3, r0
 80054de:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <TP_Read_XY2+0x46>
 80054e6:	2300      	movs	r3, #0
 80054e8:	e03a      	b.n	8005560 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 80054ea:	8a3a      	ldrh	r2, [r7, #16]
 80054ec:	8abb      	ldrh	r3, [r7, #20]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d804      	bhi.n	80054fc <TP_Read_XY2+0x58>
 80054f2:	8a3b      	ldrh	r3, [r7, #16]
 80054f4:	3363      	adds	r3, #99	; 0x63
 80054f6:	8aba      	ldrh	r2, [r7, #20]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	da08      	bge.n	800550e <TP_Read_XY2+0x6a>
 80054fc:	8aba      	ldrh	r2, [r7, #20]
 80054fe:	8a3b      	ldrh	r3, [r7, #16]
 8005500:	429a      	cmp	r2, r3
 8005502:	d82c      	bhi.n	800555e <TP_Read_XY2+0xba>
 8005504:	8abb      	ldrh	r3, [r7, #20]
 8005506:	3363      	adds	r3, #99	; 0x63
 8005508:	8a3a      	ldrh	r2, [r7, #16]
 800550a:	4293      	cmp	r3, r2
 800550c:	db27      	blt.n	800555e <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800550e:	89fa      	ldrh	r2, [r7, #14]
 8005510:	8a7b      	ldrh	r3, [r7, #18]
 8005512:	429a      	cmp	r2, r3
 8005514:	d804      	bhi.n	8005520 <TP_Read_XY2+0x7c>
 8005516:	89fb      	ldrh	r3, [r7, #14]
 8005518:	3363      	adds	r3, #99	; 0x63
 800551a:	8a7a      	ldrh	r2, [r7, #18]
 800551c:	4293      	cmp	r3, r2
 800551e:	da08      	bge.n	8005532 <TP_Read_XY2+0x8e>
 8005520:	8a7a      	ldrh	r2, [r7, #18]
 8005522:	89fb      	ldrh	r3, [r7, #14]
 8005524:	429a      	cmp	r2, r3
 8005526:	d81a      	bhi.n	800555e <TP_Read_XY2+0xba>
 8005528:	8a7b      	ldrh	r3, [r7, #18]
 800552a:	3363      	adds	r3, #99	; 0x63
 800552c:	89fa      	ldrh	r2, [r7, #14]
 800552e:	4293      	cmp	r3, r2
 8005530:	db15      	blt.n	800555e <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8005532:	8abb      	ldrh	r3, [r7, #20]
 8005534:	461a      	mov	r2, r3
 8005536:	8a3b      	ldrh	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	0fda      	lsrs	r2, r3, #31
 800553c:	4413      	add	r3, r2
 800553e:	105b      	asrs	r3, r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005546:	8a7b      	ldrh	r3, [r7, #18]
 8005548:	461a      	mov	r2, r3
 800554a:	89fb      	ldrh	r3, [r7, #14]
 800554c:	4413      	add	r3, r2
 800554e:	0fda      	lsrs	r2, r3, #31
 8005550:	4413      	add	r3, r2
 8005552:	105b      	asrs	r3, r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	801a      	strh	r2, [r3, #0]
		return 1;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <TP_Read_XY2+0xbc>
	}else return 0;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b085      	sub	sp, #20
 800556c:	af02      	add	r7, sp, #8
 800556e:	4603      	mov	r3, r0
 8005570:	80fb      	strh	r3, [r7, #6]
 8005572:	460b      	mov	r3, r1
 8005574:	80bb      	strh	r3, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	3b0c      	subs	r3, #12
 800557e:	b298      	uxth	r0, r3
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	330d      	adds	r3, #13
 8005584:	b29a      	uxth	r2, r3
 8005586:	88bc      	ldrh	r4, [r7, #4]
 8005588:	88b9      	ldrh	r1, [r7, #4]
 800558a:	887b      	ldrh	r3, [r7, #2]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4623      	mov	r3, r4
 8005590:	f7fd fea3 	bl	80032da <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8005594:	88bb      	ldrh	r3, [r7, #4]
 8005596:	3b0c      	subs	r3, #12
 8005598:	b299      	uxth	r1, r3
 800559a:	88bb      	ldrh	r3, [r7, #4]
 800559c:	330d      	adds	r3, #13
 800559e:	b29c      	uxth	r4, r3
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	88f8      	ldrh	r0, [r7, #6]
 80055a4:	887b      	ldrh	r3, [r7, #2]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	4623      	mov	r3, r4
 80055aa:	f7fd fe96 	bl	80032da <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	3301      	adds	r3, #1
 80055b2:	b298      	uxth	r0, r3
 80055b4:	88bb      	ldrh	r3, [r7, #4]
 80055b6:	3301      	adds	r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	4619      	mov	r1, r3
 80055be:	f7fd fe75 	bl	80032ac <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b298      	uxth	r0, r3
 80055c8:	88bb      	ldrh	r3, [r7, #4]
 80055ca:	3301      	adds	r3, #1
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	4619      	mov	r1, r3
 80055d2:	f7fd fe6b 	bl	80032ac <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	3301      	adds	r3, #1
 80055da:	b298      	uxth	r0, r3
 80055dc:	88bb      	ldrh	r3, [r7, #4]
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f7fd fe61 	bl	80032ac <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b298      	uxth	r0, r3
 80055f0:	88bb      	ldrh	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	887a      	ldrh	r2, [r7, #2]
 80055f8:	4619      	mov	r1, r3
 80055fa:	f7fd fe57 	bl	80032ac <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 80055fe:	88f8      	ldrh	r0, [r7, #6]
 8005600:	88b9      	ldrh	r1, [r7, #4]
 8005602:	887a      	ldrh	r2, [r7, #2]
 8005604:	2300      	movs	r3, #0
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2306      	movs	r3, #6
 800560a:	f7fe fb88 	bl	8003d1e <lcd_DrawCircle>
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bd90      	pop	{r4, r7, pc}
	...

08005618 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8005622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005626:	4843      	ldr	r0, [pc, #268]	; (8005734 <TP_Scan+0x11c>)
 8005628:	f002 f8c4 	bl	80077b4 <HAL_GPIO_ReadPin>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d157      	bne.n	80056e2 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <TP_Scan+0x2a>
 8005638:	493f      	ldr	r1, [pc, #252]	; (8005738 <TP_Scan+0x120>)
 800563a:	4840      	ldr	r0, [pc, #256]	; (800573c <TP_Scan+0x124>)
 800563c:	f7ff ff32 	bl	80054a4 <TP_Read_XY2>
 8005640:	e03c      	b.n	80056bc <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8005642:	493d      	ldr	r1, [pc, #244]	; (8005738 <TP_Scan+0x120>)
 8005644:	483d      	ldr	r0, [pc, #244]	; (800573c <TP_Scan+0x124>)
 8005646:	f7ff ff2d 	bl	80054a4 <TP_Read_XY2>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d035      	beq.n	80056bc <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8005650:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <TP_Scan+0x128>)
 8005652:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8005656:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <TP_Scan+0x128>)
 8005658:	899b      	ldrh	r3, [r3, #12]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <TP_Scan+0x128>)
 8005668:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800567c:	ee17 3a90 	vmov	r3, s15
 8005680:	b29a      	uxth	r2, r3
 8005682:	4b2f      	ldr	r3, [pc, #188]	; (8005740 <TP_Scan+0x128>)
 8005684:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8005686:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <TP_Scan+0x128>)
 8005688:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <TP_Scan+0x128>)
 800568e:	8adb      	ldrh	r3, [r3, #22]
 8005690:	ee07 3a90 	vmov	s15, r3
 8005694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800569c:	4b28      	ldr	r3, [pc, #160]	; (8005740 <TP_Scan+0x128>)
 800569e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b2:	ee17 3a90 	vmov	r3, s15
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <TP_Scan+0x128>)
 80056ba:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <TP_Scan+0x128>)
 80056be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	db2a      	blt.n	800571e <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <TP_Scan+0x128>)
 80056ca:	22c0      	movs	r2, #192	; 0xc0
 80056cc:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <TP_Scan+0x128>)
 80056d2:	899a      	ldrh	r2, [r3, #12]
 80056d4:	4b1a      	ldr	r3, [pc, #104]	; (8005740 <TP_Scan+0x128>)
 80056d6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <TP_Scan+0x128>)
 80056da:	8ada      	ldrh	r2, [r3, #22]
 80056dc:	4b18      	ldr	r3, [pc, #96]	; (8005740 <TP_Scan+0x128>)
 80056de:	83da      	strh	r2, [r3, #30]
 80056e0:	e01d      	b.n	800571e <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80056e2:	4b17      	ldr	r3, [pc, #92]	; (8005740 <TP_Scan+0x128>)
 80056e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	da09      	bge.n	8005702 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <TP_Scan+0x128>)
 80056f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <TP_Scan+0x128>)
 80056fc:	f883 2020 	strb.w	r2, [r3, #32]
 8005700:	e00d      	b.n	800571e <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <TP_Scan+0x128>)
 8005704:	2200      	movs	r2, #0
 8005706:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <TP_Scan+0x128>)
 800570a:	2200      	movs	r2, #0
 800570c:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <TP_Scan+0x128>)
 8005710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005714:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <TP_Scan+0x128>)
 8005718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800571c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <TP_Scan+0x128>)
 8005720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005724:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005728:	b2db      	uxtb	r3, r3
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40020800 	.word	0x40020800
 8005738:	20000086 	.word	0x20000086
 800573c:	2000007c 	.word	0x2000007c
 8005740:	20000070 	.word	0x20000070

08005744 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005748:	220e      	movs	r2, #14
 800574a:	4905      	ldr	r1, [pc, #20]	; (8005760 <TP_Save_Adjdata+0x1c>)
 800574c:	2000      	movs	r0, #0
 800574e:	f7fb fd1d 	bl	800118c <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8005752:	2100      	movs	r1, #0
 8005754:	200e      	movs	r0, #14
 8005756:	f7fb fcb9 	bl	80010cc <at24c_WriteOneByte>
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000094 	.word	0x20000094

08005764 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800576e:	200e      	movs	r0, #14
 8005770:	f7fb fc90 	bl	8001094 <at24c_ReadOneByte>
 8005774:	4603      	mov	r3, r0
 8005776:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800577e:	220e      	movs	r2, #14
 8005780:	4905      	ldr	r1, [pc, #20]	; (8005798 <TP_Get_Adjdata+0x34>)
 8005782:	2000      	movs	r0, #0
 8005784:	f7fb fce3 	bl	800114e <at24c_Read>
		return 1;
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <TP_Get_Adjdata+0x2a>
	}
	return 0;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000094 	.word	0x20000094
 800579c:	00000000 	.word	0x00000000

080057a0 <touch_Adjust>:


void touch_Adjust(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	; 0x38
 80057a4:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80057b2:	4b5f      	ldr	r3, [pc, #380]	; (8005930 <touch_Adjust+0x190>)
 80057b4:	881a      	ldrh	r2, [r3, #0]
 80057b6:	4b5e      	ldr	r3, [pc, #376]	; (8005930 <touch_Adjust+0x190>)
 80057b8:	885b      	ldrh	r3, [r3, #2]
 80057ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057be:	9100      	str	r1, [sp, #0]
 80057c0:	2100      	movs	r1, #0
 80057c2:	2000      	movs	r0, #0
 80057c4:	f7fd fd3c 	bl	8003240 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 80057c8:	2300      	movs	r3, #0
 80057ca:	9302      	str	r3, [sp, #8]
 80057cc:	2310      	movs	r3, #16
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80057da:	4a56      	ldr	r2, [pc, #344]	; (8005934 <touch_Adjust+0x194>)
 80057dc:	2128      	movs	r1, #40	; 0x28
 80057de:	2005      	movs	r0, #5
 80057e0:	f7fe fb09 	bl	8003df6 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80057e4:	2300      	movs	r3, #0
 80057e6:	9302      	str	r3, [sp, #8]
 80057e8:	2310      	movs	r3, #16
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80057f6:	4a50      	ldr	r2, [pc, #320]	; (8005938 <touch_Adjust+0x198>)
 80057f8:	2141      	movs	r1, #65	; 0x41
 80057fa:	2005      	movs	r0, #5
 80057fc:	f7fe fafb 	bl	8003df6 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8005800:	2300      	movs	r3, #0
 8005802:	9302      	str	r3, [sp, #8]
 8005804:	2310      	movs	r3, #16
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005812:	4a4a      	ldr	r2, [pc, #296]	; (800593c <touch_Adjust+0x19c>)
 8005814:	215a      	movs	r1, #90	; 0x5a
 8005816:	2005      	movs	r0, #5
 8005818:	f7fe faed 	bl	8003df6 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800581c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005820:	2114      	movs	r1, #20
 8005822:	2014      	movs	r0, #20
 8005824:	f7ff fea0 	bl	8005568 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005828:	4b45      	ldr	r3, [pc, #276]	; (8005940 <touch_Adjust+0x1a0>)
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005830:	4b43      	ldr	r3, [pc, #268]	; (8005940 <touch_Adjust+0x1a0>)
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8005838:	2032      	movs	r0, #50	; 0x32
 800583a:	f000 fcd5 	bl	80061e8 <HAL_Delay>
		tp_dev.scan(1);
 800583e:	4b40      	ldr	r3, [pc, #256]	; (8005940 <touch_Adjust+0x1a0>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2001      	movs	r0, #1
 8005844:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8005846:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <touch_Adjust+0x1a0>)
 8005848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800584c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d1f1      	bne.n	8005838 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8005854:	4b3a      	ldr	r3, [pc, #232]	; (8005940 <touch_Adjust+0x1a0>)
 8005856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800585a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800585e:	b2da      	uxtb	r2, r3
 8005860:	4b37      	ldr	r3, [pc, #220]	; (8005940 <touch_Adjust+0x1a0>)
 8005862:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8005866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800586a:	4a35      	ldr	r2, [pc, #212]	; (8005940 <touch_Adjust+0x1a0>)
 800586c:	8992      	ldrh	r2, [r2, #12]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	3328      	adds	r3, #40	; 0x28
 8005872:	443b      	add	r3, r7
 8005874:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8005878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800587c:	4a30      	ldr	r2, [pc, #192]	; (8005940 <touch_Adjust+0x1a0>)
 800587e:	8ad2      	ldrh	r2, [r2, #22]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	3328      	adds	r3, #40	; 0x28
 8005884:	443b      	add	r3, r7
 8005886:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 800588a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800588e:	3301      	adds	r3, #1
 8005890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8005894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005898:	3b01      	subs	r3, #1
 800589a:	2b03      	cmp	r3, #3
 800589c:	d8cc      	bhi.n	8005838 <touch_Adjust+0x98>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <touch_Adjust+0x104>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058d7 	.word	0x080058d7
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005945 	.word	0x08005945
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80058b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b8:	2114      	movs	r1, #20
 80058ba:	2014      	movs	r0, #20
 80058bc:	f7ff fe54 	bl	8005568 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <touch_Adjust+0x190>)
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	3b14      	subs	r3, #20
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80058cc:	2114      	movs	r1, #20
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fe4a 	bl	8005568 <TP_Drow_Touch_Point>
					break;
 80058d4:	e319      	b.n	8005f0a <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80058d6:	4b16      	ldr	r3, [pc, #88]	; (8005930 <touch_Adjust+0x190>)
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	3b14      	subs	r3, #20
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e2:	2114      	movs	r1, #20
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fe3f 	bl	8005568 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <touch_Adjust+0x190>)
 80058ec:	885b      	ldrh	r3, [r3, #2]
 80058ee:	3b14      	subs	r3, #20
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80058f6:	4619      	mov	r1, r3
 80058f8:	2014      	movs	r0, #20
 80058fa:	f7ff fe35 	bl	8005568 <TP_Drow_Touch_Point>
					break;
 80058fe:	e304      	b.n	8005f0a <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <touch_Adjust+0x190>)
 8005902:	885b      	ldrh	r3, [r3, #2]
 8005904:	3b14      	subs	r3, #20
 8005906:	b29b      	uxth	r3, r3
 8005908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590c:	4619      	mov	r1, r3
 800590e:	2014      	movs	r0, #20
 8005910:	f7ff fe2a 	bl	8005568 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <touch_Adjust+0x190>)
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	3b14      	subs	r3, #20
 800591a:	b298      	uxth	r0, r3
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <touch_Adjust+0x190>)
 800591e:	885b      	ldrh	r3, [r3, #2]
 8005920:	3b14      	subs	r3, #20
 8005922:	b29b      	uxth	r3, r3
 8005924:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005928:	4619      	mov	r1, r3
 800592a:	f7ff fe1d 	bl	8005568 <TP_Drow_Touch_Point>
					break;
 800592e:	e2ec      	b.n	8005f0a <touch_Adjust+0x76a>
 8005930:	20000600 	.word	0x20000600
 8005934:	0800dec8 	.word	0x0800dec8
 8005938:	0800dee4 	.word	0x0800dee4
 800593c:	0800defc 	.word	0x0800defc
 8005940:	20000070 	.word	0x20000070
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8005944:	883b      	ldrh	r3, [r7, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	88bb      	ldrh	r3, [r7, #4]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bfb8      	it	lt
 8005950:	425b      	neglt	r3, r3
 8005952:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8005954:	887b      	ldrh	r3, [r7, #2]
 8005956:	461a      	mov	r2, r3
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	bfb8      	it	lt
 8005960:	425b      	neglt	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	fb03 f303 	mul.w	r3, r3, r3
 800596a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	fb03 f303 	mul.w	r3, r3, r3
 8005972:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7fa fdba 	bl	80004f4 <__aeabi_ui2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	ec43 2b10 	vmov	d0, r2, r3
 8005988:	f007 fb50 	bl	800d02c <sqrt>
 800598c:	ec53 2b10 	vmov	r2, r3, d0
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	f7fb f900 	bl	8000b98 <__aeabi_d2uiz>
 8005998:	4603      	mov	r3, r0
 800599a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800599c:	893b      	ldrh	r3, [r7, #8]
 800599e:	461a      	mov	r2, r3
 80059a0:	89bb      	ldrh	r3, [r7, #12]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfb8      	it	lt
 80059a8:	425b      	neglt	r3, r3
 80059aa:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	461a      	mov	r2, r3
 80059b0:	89fb      	ldrh	r3, [r7, #14]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bfb8      	it	lt
 80059b8:	425b      	neglt	r3, r3
 80059ba:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	fb03 f303 	mul.w	r3, r3, r3
 80059c2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	fb03 f303 	mul.w	r3, r3, r3
 80059ca:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fa fd8e 	bl	80004f4 <__aeabi_ui2d>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	ec43 2b10 	vmov	d0, r2, r3
 80059e0:	f007 fb24 	bl	800d02c <sqrt>
 80059e4:	ec53 2b10 	vmov	r2, r3, d0
 80059e8:	4610      	mov	r0, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	f7fb f8d4 	bl	8000b98 <__aeabi_d2uiz>
 80059f0:	4603      	mov	r3, r0
 80059f2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80059f4:	8b7b      	ldrh	r3, [r7, #26]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059fe:	8b3b      	ldrh	r3, [r7, #24]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a0c:	ee16 0a90 	vmov	r0, s13
 8005a10:	f7fa fd92 	bl	8000538 <__aeabi_f2d>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8005a1c:	a384      	add	r3, pc, #528	; (adr r3, 8005c30 <touch_Adjust+0x490>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a26:	f7fb f851 	bl	8000acc <__aeabi_dcmplt>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <touch_Adjust+0x2b0>
 8005a30:	a381      	add	r3, pc, #516	; (adr r3, 8005c38 <touch_Adjust+0x498>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a3a:	f7fb f865 	bl	8000b08 <__aeabi_dcmpgt>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <touch_Adjust+0x2b0>
 8005a44:	8b7b      	ldrh	r3, [r7, #26]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <touch_Adjust+0x2b0>
 8005a4a:	8b3b      	ldrh	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d136      	bne.n	8005abe <touch_Adjust+0x31e>
					{
						cnt=0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005a56:	4b7a      	ldr	r3, [pc, #488]	; (8005c40 <touch_Adjust+0x4a0>)
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	3b14      	subs	r3, #20
 8005a5c:	b298      	uxth	r0, r3
 8005a5e:	4b78      	ldr	r3, [pc, #480]	; (8005c40 <touch_Adjust+0x4a0>)
 8005a60:	885b      	ldrh	r3, [r3, #2]
 8005a62:	3b14      	subs	r3, #20
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f7ff fd7c 	bl	8005568 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005a70:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005a74:	2114      	movs	r1, #20
 8005a76:	2014      	movs	r0, #20
 8005a78:	f7ff fd76 	bl	8005568 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	2310      	movs	r3, #16
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a8e:	4a6d      	ldr	r2, [pc, #436]	; (8005c44 <touch_Adjust+0x4a4>)
 8005a90:	2128      	movs	r1, #40	; 0x28
 8005a92:	2005      	movs	r0, #5
 8005a94:	f7fe f9af 	bl	8003df6 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9302      	str	r3, [sp, #8]
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005aaa:	4a67      	ldr	r2, [pc, #412]	; (8005c48 <touch_Adjust+0x4a8>)
 8005aac:	213c      	movs	r1, #60	; 0x3c
 8005aae:	2005      	movs	r0, #5
 8005ab0:	f7fe f9a1 	bl	8003df6 <lcd_ShowStr>
						HAL_Delay(1000);
 8005ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ab8:	f000 fb96 	bl	80061e8 <HAL_Delay>
 						continue;
 8005abc:	e225      	b.n	8005f0a <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8005abe:	883b      	ldrh	r3, [r7, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	893b      	ldrh	r3, [r7, #8]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfb8      	it	lt
 8005aca:	425b      	neglt	r3, r3
 8005acc:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfb8      	it	lt
 8005ada:	425b      	neglt	r3, r3
 8005adc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	fb03 f303 	mul.w	r3, r3, r3
 8005ae4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	fb03 f303 	mul.w	r3, r3, r3
 8005aec:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fcfd 	bl	80004f4 <__aeabi_ui2d>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	ec43 2b10 	vmov	d0, r2, r3
 8005b02:	f007 fa93 	bl	800d02c <sqrt>
 8005b06:	ec53 2b10 	vmov	r2, r3, d0
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f7fb f843 	bl	8000b98 <__aeabi_d2uiz>
 8005b12:	4603      	mov	r3, r0
 8005b14:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8005b16:	88bb      	ldrh	r3, [r7, #4]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	89bb      	ldrh	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfb8      	it	lt
 8005b22:	425b      	neglt	r3, r3
 8005b24:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	89fb      	ldrh	r3, [r7, #14]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bfb8      	it	lt
 8005b32:	425b      	neglt	r3, r3
 8005b34:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	fb03 f303 	mul.w	r3, r3, r3
 8005b3c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	fb03 f303 	mul.w	r3, r3, r3
 8005b44:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fa fcd1 	bl	80004f4 <__aeabi_ui2d>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	ec43 2b10 	vmov	d0, r2, r3
 8005b5a:	f007 fa67 	bl	800d02c <sqrt>
 8005b5e:	ec53 2b10 	vmov	r2, r3, d0
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	f7fb f817 	bl	8000b98 <__aeabi_d2uiz>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005b6e:	8b7b      	ldrh	r3, [r7, #26]
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b78:	8b3b      	ldrh	r3, [r7, #24]
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b86:	ee16 0a90 	vmov	r0, s13
 8005b8a:	f7fa fcd5 	bl	8000538 <__aeabi_f2d>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005b96:	a326      	add	r3, pc, #152	; (adr r3, 8005c30 <touch_Adjust+0x490>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ba0:	f7fa ff94 	bl	8000acc <__aeabi_dcmplt>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <touch_Adjust+0x41e>
 8005baa:	a323      	add	r3, pc, #140	; (adr r3, 8005c38 <touch_Adjust+0x498>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb4:	f7fa ffa8 	bl	8000b08 <__aeabi_dcmpgt>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d046      	beq.n	8005c4c <touch_Adjust+0x4ac>
					{
						cnt=0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005bc4:	4b1e      	ldr	r3, [pc, #120]	; (8005c40 <touch_Adjust+0x4a0>)
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	3b14      	subs	r3, #20
 8005bca:	b298      	uxth	r0, r3
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <touch_Adjust+0x4a0>)
 8005bce:	885b      	ldrh	r3, [r3, #2]
 8005bd0:	3b14      	subs	r3, #20
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f7ff fcc5 	bl	8005568 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005bde:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005be2:	2114      	movs	r1, #20
 8005be4:	2014      	movs	r0, #20
 8005be6:	f7ff fcbf 	bl	8005568 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005bea:	2300      	movs	r3, #0
 8005bec:	9302      	str	r3, [sp, #8]
 8005bee:	2310      	movs	r3, #16
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005bfc:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <touch_Adjust+0x4a4>)
 8005bfe:	2128      	movs	r1, #40	; 0x28
 8005c00:	2005      	movs	r0, #5
 8005c02:	f7fe f8f8 	bl	8003df6 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005c06:	2300      	movs	r3, #0
 8005c08:	9302      	str	r3, [sp, #8]
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <touch_Adjust+0x4a8>)
 8005c1a:	213c      	movs	r1, #60	; 0x3c
 8005c1c:	2005      	movs	r0, #5
 8005c1e:	f7fe f8ea 	bl	8003df6 <lcd_ShowStr>
						HAL_Delay(1000);
 8005c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c26:	f000 fadf 	bl	80061e8 <HAL_Delay>
						continue;
 8005c2a:	e16e      	b.n	8005f0a <touch_Adjust+0x76a>
 8005c2c:	f3af 8000 	nop.w
 8005c30:	66666666 	.word	0x66666666
 8005c34:	3fee6666 	.word	0x3fee6666
 8005c38:	cccccccd 	.word	0xcccccccd
 8005c3c:	3ff0cccc 	.word	0x3ff0cccc
 8005c40:	20000600 	.word	0x20000600
 8005c44:	0800df10 	.word	0x0800df10
 8005c48:	0800df30 	.word	0x0800df30
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8005c4c:	88bb      	ldrh	r3, [r7, #4]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bfb8      	it	lt
 8005c58:	425b      	neglt	r3, r3
 8005c5a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	897b      	ldrh	r3, [r7, #10]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bfb8      	it	lt
 8005c68:	425b      	neglt	r3, r3
 8005c6a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	fb03 f303 	mul.w	r3, r3, r3
 8005c72:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	fb03 f303 	mul.w	r3, r3, r3
 8005c7a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005c7c:	6a3a      	ldr	r2, [r7, #32]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fa fc36 	bl	80004f4 <__aeabi_ui2d>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	ec43 2b10 	vmov	d0, r2, r3
 8005c90:	f007 f9cc 	bl	800d02c <sqrt>
 8005c94:	ec53 2b10 	vmov	r2, r3, d0
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f7fa ff7c 	bl	8000b98 <__aeabi_d2uiz>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8005ca4:	883b      	ldrh	r3, [r7, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	89bb      	ldrh	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bfb8      	it	lt
 8005cb0:	425b      	neglt	r3, r3
 8005cb2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bfb8      	it	lt
 8005cc0:	425b      	neglt	r3, r3
 8005cc2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	fb03 f303 	mul.w	r3, r3, r3
 8005cca:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	fb03 f303 	mul.w	r3, r3, r3
 8005cd2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005cd4:	6a3a      	ldr	r2, [r7, #32]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fa fc0a 	bl	80004f4 <__aeabi_ui2d>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	ec43 2b10 	vmov	d0, r2, r3
 8005ce8:	f007 f9a0 	bl	800d02c <sqrt>
 8005cec:	ec53 2b10 	vmov	r2, r3, d0
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f7fa ff50 	bl	8000b98 <__aeabi_d2uiz>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005cfc:	8b7b      	ldrh	r3, [r7, #26]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d06:	8b3b      	ldrh	r3, [r7, #24]
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d14:	ee16 0a90 	vmov	r0, s13
 8005d18:	f7fa fc0e 	bl	8000538 <__aeabi_f2d>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005d24:	a383      	add	r3, pc, #524	; (adr r3, 8005f34 <touch_Adjust+0x794>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d2e:	f7fa fecd 	bl	8000acc <__aeabi_dcmplt>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <touch_Adjust+0x5ac>
 8005d38:	a380      	add	r3, pc, #512	; (adr r3, 8005f3c <touch_Adjust+0x79c>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d42:	f7fa fee1 	bl	8000b08 <__aeabi_dcmpgt>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d036      	beq.n	8005dba <touch_Adjust+0x61a>
					{
						cnt=0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005d52:	4b71      	ldr	r3, [pc, #452]	; (8005f18 <touch_Adjust+0x778>)
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	3b14      	subs	r3, #20
 8005d58:	b298      	uxth	r0, r3
 8005d5a:	4b6f      	ldr	r3, [pc, #444]	; (8005f18 <touch_Adjust+0x778>)
 8005d5c:	885b      	ldrh	r3, [r3, #2]
 8005d5e:	3b14      	subs	r3, #20
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d66:	4619      	mov	r1, r3
 8005d68:	f7ff fbfe 	bl	8005568 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005d6c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005d70:	2114      	movs	r1, #20
 8005d72:	2014      	movs	r0, #20
 8005d74:	f7ff fbf8 	bl	8005568 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9302      	str	r3, [sp, #8]
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005d8a:	4a64      	ldr	r2, [pc, #400]	; (8005f1c <touch_Adjust+0x77c>)
 8005d8c:	2128      	movs	r1, #40	; 0x28
 8005d8e:	2005      	movs	r0, #5
 8005d90:	f7fe f831 	bl	8003df6 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005d94:	2300      	movs	r3, #0
 8005d96:	9302      	str	r3, [sp, #8]
 8005d98:	2310      	movs	r3, #16
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005da6:	4a5e      	ldr	r2, [pc, #376]	; (8005f20 <touch_Adjust+0x780>)
 8005da8:	213c      	movs	r1, #60	; 0x3c
 8005daa:	2005      	movs	r0, #5
 8005dac:	f7fe f823 	bl	8003df6 <lcd_ShowStr>

						HAL_Delay(1000);
 8005db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db4:	f000 fa18 	bl	80061e8 <HAL_Delay>
 							continue;
 8005db8:	e0a7      	b.n	8005f0a <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8005dba:	4b57      	ldr	r3, [pc, #348]	; (8005f18 <touch_Adjust+0x778>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	3b28      	subs	r3, #40	; 0x28
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005dc8:	88bb      	ldrh	r3, [r7, #4]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	883b      	ldrh	r3, [r7, #0]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ddc:	4b51      	ldr	r3, [pc, #324]	; (8005f24 <touch_Adjust+0x784>)
 8005dde:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8005de2:	4b4d      	ldr	r3, [pc, #308]	; (8005f18 <touch_Adjust+0x778>)
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dee:	4b4d      	ldr	r3, [pc, #308]	; (8005f24 <touch_Adjust+0x784>)
 8005df0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005df4:	88bb      	ldrh	r3, [r7, #4]
 8005df6:	461a      	mov	r2, r3
 8005df8:	883b      	ldrh	r3, [r7, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e18:	ee17 3a90 	vmov	r3, s15
 8005e1c:	b21a      	sxth	r2, r3
 8005e1e:	4b41      	ldr	r3, [pc, #260]	; (8005f24 <touch_Adjust+0x784>)
 8005e20:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8005e22:	4b3d      	ldr	r3, [pc, #244]	; (8005f18 <touch_Adjust+0x778>)
 8005e24:	885b      	ldrh	r3, [r3, #2]
 8005e26:	3b28      	subs	r3, #40	; 0x28
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e30:	897b      	ldrh	r3, [r7, #10]
 8005e32:	461a      	mov	r2, r3
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e44:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <touch_Adjust+0x784>)
 8005e46:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8005e4a:	4b33      	ldr	r3, [pc, #204]	; (8005f18 <touch_Adjust+0x778>)
 8005e4c:	885b      	ldrh	r3, [r3, #2]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e56:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <touch_Adjust+0x784>)
 8005e58:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005e5c:	897b      	ldrh	r3, [r7, #10]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	4413      	add	r3, r2
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e80:	ee17 3a90 	vmov	r3, s15
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <touch_Adjust+0x784>)
 8005e88:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005e8a:	4b23      	ldr	r3, [pc, #140]	; (8005f18 <touch_Adjust+0x778>)
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	3b14      	subs	r3, #20
 8005e90:	b298      	uxth	r0, r3
 8005e92:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <touch_Adjust+0x778>)
 8005e94:	885b      	ldrh	r3, [r3, #2]
 8005e96:	3b14      	subs	r3, #20
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	f7ff fb62 	bl	8005568 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005eb6:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <touch_Adjust+0x788>)
 8005eb8:	2128      	movs	r1, #40	; 0x28
 8005eba:	2005      	movs	r0, #5
 8005ebc:	f7fd ff9b 	bl	8003df6 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9302      	str	r3, [sp, #8]
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ed2:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <touch_Adjust+0x78c>)
 8005ed4:	213c      	movs	r1, #60	; 0x3c
 8005ed6:	2005      	movs	r0, #5
 8005ed8:	f7fd ff8d 	bl	8003df6 <lcd_ShowStr>
					HAL_Delay(1000);
 8005edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ee0:	f000 f982 	bl	80061e8 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	2310      	movs	r3, #16
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <touch_Adjust+0x790>)
 8005ef8:	2128      	movs	r1, #40	; 0x28
 8005efa:	2005      	movs	r0, #5
 8005efc:	f7fd ff7b 	bl	8003df6 <lcd_ShowStr>
					TP_Save_Adjdata();
 8005f00:	f7ff fc20 	bl	8005744 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8005f04:	f7ff fc2e 	bl	8005764 <TP_Get_Adjdata>
					return;
 8005f08:	e000      	b.n	8005f0c <touch_Adjust+0x76c>
		HAL_Delay(50);
 8005f0a:	e495      	b.n	8005838 <touch_Adjust+0x98>
			}
		}
 	}
}
 8005f0c:	3728      	adds	r7, #40	; 0x28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	f3af 8000 	nop.w
 8005f18:	20000600 	.word	0x20000600
 8005f1c:	0800df10 	.word	0x0800df10
 8005f20:	0800df30 	.word	0x0800df30
 8005f24:	20000070 	.word	0x20000070
 8005f28:	0800df50 	.word	0x0800df50
 8005f2c:	0800df70 	.word	0x0800df70
 8005f30:	0800df90 	.word	0x0800df90
 8005f34:	66666666 	.word	0x66666666
 8005f38:	3fee6666 	.word	0x3fee6666
 8005f3c:	cccccccd 	.word	0xcccccccd
 8005f40:	3ff0cccc 	.word	0x3ff0cccc

08005f44 <touch_init>:

void touch_init(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8005f48:	4904      	ldr	r1, [pc, #16]	; (8005f5c <touch_init+0x18>)
 8005f4a:	4805      	ldr	r0, [pc, #20]	; (8005f60 <touch_init+0x1c>)
 8005f4c:	f7ff fa88 	bl	8005460 <TP_Read_XY>
	at24c_init();
 8005f50:	f7fb f89a 	bl	8001088 <at24c_init>
	TP_Get_Adjdata();
 8005f54:	f7ff fc06 	bl	8005764 <TP_Get_Adjdata>
}
 8005f58:	bf00      	nop
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20000086 	.word	0x20000086
 8005f60:	2000007c 	.word	0x2000007c

08005f64 <touch_Scan>:

void touch_Scan(){
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <touch_Scan+0x10>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	4798      	blx	r3
}
 8005f70:	bf00      	nop
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20000070 	.word	0x20000070

08005f78 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8005f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f80:	4805      	ldr	r0, [pc, #20]	; (8005f98 <touch_IsTouched+0x20>)
 8005f82:	f001 fc17 	bl	80077b4 <HAL_GPIO_ReadPin>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40020800 	.word	0x40020800

08005f9c <touch_GetX>:

uint16_t touch_GetX(){
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <touch_GetX+0x14>)
 8005fa2:	899b      	ldrh	r3, [r3, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000070 	.word	0x20000070

08005fb4 <touch_GetY>:

uint16_t touch_GetY(){
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005fb8:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <touch_GetY+0x14>)
 8005fba:	8adb      	ldrh	r3, [r3, #22]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	20000070 	.word	0x20000070

08005fcc <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a08      	ldr	r2, [pc, #32]	; (8005ffc <HAL_UART_RxCpltCallback+0x30>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8005fde:	230a      	movs	r3, #10
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	4907      	ldr	r1, [pc, #28]	; (8006000 <HAL_UART_RxCpltCallback+0x34>)
 8005fe4:	4807      	ldr	r0, [pc, #28]	; (8006004 <HAL_UART_RxCpltCallback+0x38>)
 8005fe6:	f004 fe78 	bl	800acda <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8005fea:	2201      	movs	r2, #1
 8005fec:	4904      	ldr	r1, [pc, #16]	; (8006000 <HAL_UART_RxCpltCallback+0x34>)
 8005fee:	4805      	ldr	r0, [pc, #20]	; (8006004 <HAL_UART_RxCpltCallback+0x38>)
 8005ff0:	f004 ff05 	bl	800adfe <HAL_UART_Receive_IT>
	}
}
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40011000 	.word	0x40011000
 8006000:	200007c0 	.word	0x200007c0
 8006004:	200007c4 	.word	0x200007c4

08006008 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 800600e:	4a12      	ldr	r2, [pc, #72]	; (8006058 <MX_USART1_UART_Init+0x50>)
 8006010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 8006014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 800601c:	2200      	movs	r2, #0
 800601e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 8006022:	2200      	movs	r2, #0
 8006024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 8006028:	2200      	movs	r2, #0
 800602a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 800602e:	220c      	movs	r2, #12
 8006030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 8006034:	2200      	movs	r2, #0
 8006036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 800603a:	2200      	movs	r2, #0
 800603c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800603e:	4805      	ldr	r0, [pc, #20]	; (8006054 <MX_USART1_UART_Init+0x4c>)
 8006040:	f004 fdfe 	bl	800ac40 <HAL_UART_Init>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800604a:	f7fe f8d7 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800604e:	bf00      	nop
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	200007c4 	.word	0x200007c4
 8006058:	40011000 	.word	0x40011000

0800605c <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006060:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006062:	4a12      	ldr	r2, [pc, #72]	; (80060ac <MX_USART2_UART_Init+0x50>)
 8006064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800606c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006070:	2200      	movs	r2, #0
 8006072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006076:	2200      	movs	r2, #0
 8006078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 800607c:	2200      	movs	r2, #0
 800607e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006082:	220c      	movs	r2, #12
 8006084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006088:	2200      	movs	r2, #0
 800608a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 800608e:	2200      	movs	r2, #0
 8006090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006092:	4805      	ldr	r0, [pc, #20]	; (80060a8 <MX_USART2_UART_Init+0x4c>)
 8006094:	f004 fdd4 	bl	800ac40 <HAL_UART_Init>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800609e:	f7fe f8ad 	bl	80041fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000808 	.word	0x20000808
 80060ac:	40004400 	.word	0x40004400

080060b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80060b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060b4:	480d      	ldr	r0, [pc, #52]	; (80060ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80060b6:	490e      	ldr	r1, [pc, #56]	; (80060f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80060b8:	4a0e      	ldr	r2, [pc, #56]	; (80060f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80060ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060bc:	e002      	b.n	80060c4 <LoopCopyDataInit>

080060be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060c2:	3304      	adds	r3, #4

080060c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060c8:	d3f9      	bcc.n	80060be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80060cc:	4c0b      	ldr	r4, [pc, #44]	; (80060fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80060ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060d0:	e001      	b.n	80060d6 <LoopFillZerobss>

080060d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060d4:	3204      	adds	r2, #4

080060d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060d8:	d3fb      	bcc.n	80060d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060da:	f7fe ff9f 	bl	800501c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060de:	f006 f8e7 	bl	800c2b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060e2:	f7fd ff93 	bl	800400c <main>
  bx  lr    
 80060e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80060e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80060ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060f0:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80060f4:	080f2500 	.word	0x080f2500
  ldr r2, =_sbss
 80060f8:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80060fc:	2000099c 	.word	0x2000099c

08006100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006100:	e7fe      	b.n	8006100 <ADC_IRQHandler>
	...

08006104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_Init+0x40>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <HAL_Init+0x40>)
 800610e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_Init+0x40>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a0a      	ldr	r2, [pc, #40]	; (8006144 <HAL_Init+0x40>)
 800611a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800611e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006120:	4b08      	ldr	r3, [pc, #32]	; (8006144 <HAL_Init+0x40>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a07      	ldr	r2, [pc, #28]	; (8006144 <HAL_Init+0x40>)
 8006126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800612c:	2003      	movs	r0, #3
 800612e:	f000 fd61 	bl	8006bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006132:	200f      	movs	r0, #15
 8006134:	f000 f808 	bl	8006148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006138:	f7fe fb9e 	bl	8004878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40023c00 	.word	0x40023c00

08006148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006150:	4b12      	ldr	r3, [pc, #72]	; (800619c <HAL_InitTick+0x54>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b12      	ldr	r3, [pc, #72]	; (80061a0 <HAL_InitTick+0x58>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	4619      	mov	r1, r3
 800615a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800615e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006162:	fbb2 f3f3 	udiv	r3, r2, r3
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fd79 	bl	8006c5e <HAL_SYSTICK_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e00e      	b.n	8006194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b0f      	cmp	r3, #15
 800617a:	d80a      	bhi.n	8006192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800617c:	2200      	movs	r2, #0
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	f000 fd41 	bl	8006c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <HAL_InitTick+0x5c>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	2000006c 	.word	0x2000006c
 80061a0:	200000ac 	.word	0x200000ac
 80061a4:	200000a8 	.word	0x200000a8

080061a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_IncTick+0x20>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <HAL_IncTick+0x24>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4413      	add	r3, r2
 80061b8:	4a04      	ldr	r2, [pc, #16]	; (80061cc <HAL_IncTick+0x24>)
 80061ba:	6013      	str	r3, [r2, #0]
}
 80061bc:	bf00      	nop
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	200000ac 	.word	0x200000ac
 80061cc:	2000084c 	.word	0x2000084c

080061d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return uwTick;
 80061d4:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <HAL_GetTick+0x14>)
 80061d6:	681b      	ldr	r3, [r3, #0]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	2000084c 	.word	0x2000084c

080061e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061f0:	f7ff ffee 	bl	80061d0 <HAL_GetTick>
 80061f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d005      	beq.n	800620e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <HAL_Delay+0x44>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800620e:	bf00      	nop
 8006210:	f7ff ffde 	bl	80061d0 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	429a      	cmp	r2, r3
 800621e:	d8f7      	bhi.n	8006210 <HAL_Delay+0x28>
  {
  }
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200000ac 	.word	0x200000ac

08006230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e033      	b.n	80062ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fe fb3a 	bl	80048c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b00      	cmp	r3, #0
 800626c:	d118      	bne.n	80062a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006276:	f023 0302 	bic.w	r3, r3, #2
 800627a:	f043 0202 	orr.w	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa68 	bl	8006758 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	f043 0201 	orr.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
 800629e:	e001      	b.n	80062a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_ADC_Start_DMA+0x1e>
 80062d2:	2302      	movs	r3, #2
 80062d4:	e0e9      	b.n	80064aa <HAL_ADC_Start_DMA+0x1f2>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d018      	beq.n	800631e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80062fc:	4b6d      	ldr	r3, [pc, #436]	; (80064b4 <HAL_ADC_Start_DMA+0x1fc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a6d      	ldr	r2, [pc, #436]	; (80064b8 <HAL_ADC_Start_DMA+0x200>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	0c9a      	lsrs	r2, r3, #18
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006310:	e002      	b.n	8006318 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	3b01      	subs	r3, #1
 8006316:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f9      	bne.n	8006312 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632c:	d107      	bne.n	800633e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800633c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	f040 80a1 	bne.w	8006490 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006378:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638c:	d106      	bne.n	800639c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	f023 0206 	bic.w	r2, r3, #6
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	645a      	str	r2, [r3, #68]	; 0x44
 800639a:	e002      	b.n	80063a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063aa:	4b44      	ldr	r3, [pc, #272]	; (80064bc <HAL_ADC_Start_DMA+0x204>)
 80063ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	4a43      	ldr	r2, [pc, #268]	; (80064c0 <HAL_ADC_Start_DMA+0x208>)
 80063b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	4a42      	ldr	r2, [pc, #264]	; (80064c4 <HAL_ADC_Start_DMA+0x20c>)
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	4a41      	ldr	r2, [pc, #260]	; (80064c8 <HAL_ADC_Start_DMA+0x210>)
 80063c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80063ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80063de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	334c      	adds	r3, #76	; 0x4c
 80063fa:	4619      	mov	r1, r3
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f000 fce8 	bl	8006dd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2b00      	cmp	r3, #0
 800640e:	d12a      	bne.n	8006466 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2d      	ldr	r2, [pc, #180]	; (80064cc <HAL_ADC_Start_DMA+0x214>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d015      	beq.n	8006446 <HAL_ADC_Start_DMA+0x18e>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2c      	ldr	r2, [pc, #176]	; (80064d0 <HAL_ADC_Start_DMA+0x218>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d105      	bne.n	8006430 <HAL_ADC_Start_DMA+0x178>
 8006424:	4b25      	ldr	r3, [pc, #148]	; (80064bc <HAL_ADC_Start_DMA+0x204>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <HAL_ADC_Start_DMA+0x21c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d136      	bne.n	80064a8 <HAL_ADC_Start_DMA+0x1f0>
 800643a:	4b20      	ldr	r3, [pc, #128]	; (80064bc <HAL_ADC_Start_DMA+0x204>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d130      	bne.n	80064a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d129      	bne.n	80064a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	e020      	b.n	80064a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a18      	ldr	r2, [pc, #96]	; (80064cc <HAL_ADC_Start_DMA+0x214>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d11b      	bne.n	80064a8 <HAL_ADC_Start_DMA+0x1f0>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d114      	bne.n	80064a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800648c:	609a      	str	r2, [r3, #8]
 800648e:	e00b      	b.n	80064a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	f043 0210 	orr.w	r2, r3, #16
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a0:	f043 0201 	orr.w	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	2000006c 	.word	0x2000006c
 80064b8:	431bde83 	.word	0x431bde83
 80064bc:	40012300 	.word	0x40012300
 80064c0:	08006951 	.word	0x08006951
 80064c4:	08006a0b 	.word	0x08006a0b
 80064c8:	08006a27 	.word	0x08006a27
 80064cc:	40012000 	.word	0x40012000
 80064d0:	40012100 	.word	0x40012100
 80064d4:	40012200 	.word	0x40012200

080064d8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x1c>
 800652c:	2302      	movs	r3, #2
 800652e:	e105      	b.n	800673c <HAL_ADC_ConfigChannel+0x228>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b09      	cmp	r3, #9
 800653e:	d925      	bls.n	800658c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68d9      	ldr	r1, [r3, #12]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	4613      	mov	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4413      	add	r3, r2
 8006554:	3b1e      	subs	r3, #30
 8006556:	2207      	movs	r2, #7
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	43da      	mvns	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	400a      	ands	r2, r1
 8006564:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68d9      	ldr	r1, [r3, #12]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	4618      	mov	r0, r3
 8006578:	4603      	mov	r3, r0
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	4403      	add	r3, r0
 800657e:	3b1e      	subs	r3, #30
 8006580:	409a      	lsls	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	e022      	b.n	80065d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6919      	ldr	r1, [r3, #16]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	2207      	movs	r2, #7
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43da      	mvns	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	400a      	ands	r2, r1
 80065ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6919      	ldr	r1, [r3, #16]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	4618      	mov	r0, r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4403      	add	r3, r0
 80065c8:	409a      	lsls	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d824      	bhi.n	8006624 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	3b05      	subs	r3, #5
 80065ec:	221f      	movs	r2, #31
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	43da      	mvns	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	400a      	ands	r2, r1
 80065fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	4618      	mov	r0, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	3b05      	subs	r3, #5
 8006616:	fa00 f203 	lsl.w	r2, r0, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	635a      	str	r2, [r3, #52]	; 0x34
 8006622:	e04c      	b.n	80066be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b0c      	cmp	r3, #12
 800662a:	d824      	bhi.n	8006676 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	3b23      	subs	r3, #35	; 0x23
 800663e:	221f      	movs	r2, #31
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	43da      	mvns	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	400a      	ands	r2, r1
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	4618      	mov	r0, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	3b23      	subs	r3, #35	; 0x23
 8006668:	fa00 f203 	lsl.w	r2, r0, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
 8006674:	e023      	b.n	80066be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	3b41      	subs	r3, #65	; 0x41
 8006688:	221f      	movs	r2, #31
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43da      	mvns	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	400a      	ands	r2, r1
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	4618      	mov	r0, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	3b41      	subs	r3, #65	; 0x41
 80066b2:	fa00 f203 	lsl.w	r2, r0, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066be:	4b22      	ldr	r3, [pc, #136]	; (8006748 <HAL_ADC_ConfigChannel+0x234>)
 80066c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_ADC_ConfigChannel+0x238>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d109      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x1cc>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b12      	cmp	r3, #18
 80066d2:	d105      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a19      	ldr	r2, [pc, #100]	; (800674c <HAL_ADC_ConfigChannel+0x238>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d123      	bne.n	8006732 <HAL_ADC_ConfigChannel+0x21e>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d003      	beq.n	80066fa <HAL_ADC_ConfigChannel+0x1e6>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b11      	cmp	r3, #17
 80066f8:	d11b      	bne.n	8006732 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b10      	cmp	r3, #16
 800670c:	d111      	bne.n	8006732 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800670e:	4b10      	ldr	r3, [pc, #64]	; (8006750 <HAL_ADC_ConfigChannel+0x23c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a10      	ldr	r2, [pc, #64]	; (8006754 <HAL_ADC_ConfigChannel+0x240>)
 8006714:	fba2 2303 	umull	r2, r3, r2, r3
 8006718:	0c9a      	lsrs	r2, r3, #18
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006724:	e002      	b.n	800672c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	3b01      	subs	r3, #1
 800672a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f9      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	40012300 	.word	0x40012300
 800674c:	40012000 	.word	0x40012000
 8006750:	2000006c 	.word	0x2000006c
 8006754:	431bde83 	.word	0x431bde83

08006758 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006760:	4b79      	ldr	r3, [pc, #484]	; (8006948 <ADC_Init+0x1f0>)
 8006762:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	431a      	orrs	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800678c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6859      	ldr	r1, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	021a      	lsls	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80067b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6859      	ldr	r1, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6899      	ldr	r1, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	4a58      	ldr	r2, [pc, #352]	; (800694c <ADC_Init+0x1f4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d022      	beq.n	8006836 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6899      	ldr	r1, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6899      	ldr	r1, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	609a      	str	r2, [r3, #8]
 8006834:	e00f      	b.n	8006856 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0202 	bic.w	r2, r2, #2
 8006864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6899      	ldr	r1, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7e1b      	ldrb	r3, [r3, #24]
 8006870:	005a      	lsls	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01b      	beq.n	80068bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80068a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	3b01      	subs	r3, #1
 80068b0:	035a      	lsls	r2, r3, #13
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e007      	b.n	80068cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	051a      	lsls	r2, r3, #20
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6899      	ldr	r1, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800690e:	025a      	lsls	r2, r3, #9
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6899      	ldr	r1, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	029a      	lsls	r2, r3, #10
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	609a      	str	r2, [r3, #8]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	40012300 	.word	0x40012300
 800694c:	0f000001 	.word	0x0f000001

08006950 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006966:	2b00      	cmp	r3, #0
 8006968:	d13c      	bne.n	80069e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d12b      	bne.n	80069dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	d127      	bne.n	80069dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d119      	bne.n	80069dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0220 	bic.w	r2, r2, #32
 80069b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d4:	f043 0201 	orr.w	r2, r3, #1
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f7ff fd7b 	bl	80064d8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80069e2:	e00e      	b.n	8006a02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7ff fd85 	bl	8006500 <HAL_ADC_ErrorCallback>
}
 80069f6:	e004      	b.n	8006a02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	4798      	blx	r3
}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fd67 	bl	80064ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2240      	movs	r2, #64	; 0x40
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	f043 0204 	orr.w	r2, r3, #4
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff fd5a 	bl	8006500 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <__NVIC_SetPriorityGrouping+0x44>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a70:	4013      	ands	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a86:	4a04      	ldr	r2, [pc, #16]	; (8006a98 <__NVIC_SetPriorityGrouping+0x44>)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	60d3      	str	r3, [r2, #12]
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	e000ed00 	.word	0xe000ed00

08006a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	f003 0307 	and.w	r3, r3, #7
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	e000ed00 	.word	0xe000ed00

08006ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	db0b      	blt.n	8006ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	f003 021f 	and.w	r2, r3, #31
 8006ad0:	4907      	ldr	r1, [pc, #28]	; (8006af0 <__NVIC_EnableIRQ+0x38>)
 8006ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	2001      	movs	r0, #1
 8006ada:	fa00 f202 	lsl.w	r2, r0, r2
 8006ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e100 	.word	0xe000e100

08006af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	db0a      	blt.n	8006b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	490c      	ldr	r1, [pc, #48]	; (8006b40 <__NVIC_SetPriority+0x4c>)
 8006b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b12:	0112      	lsls	r2, r2, #4
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	440b      	add	r3, r1
 8006b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b1c:	e00a      	b.n	8006b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	4908      	ldr	r1, [pc, #32]	; (8006b44 <__NVIC_SetPriority+0x50>)
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	3b04      	subs	r3, #4
 8006b2c:	0112      	lsls	r2, r2, #4
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	440b      	add	r3, r1
 8006b32:	761a      	strb	r2, [r3, #24]
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	e000e100 	.word	0xe000e100
 8006b44:	e000ed00 	.word	0xe000ed00

08006b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b089      	sub	sp, #36	; 0x24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	f1c3 0307 	rsb	r3, r3, #7
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	bf28      	it	cs
 8006b66:	2304      	movcs	r3, #4
 8006b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d902      	bls.n	8006b78 <NVIC_EncodePriority+0x30>
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	3b03      	subs	r3, #3
 8006b76:	e000      	b.n	8006b7a <NVIC_EncodePriority+0x32>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43da      	mvns	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b90:	f04f 31ff 	mov.w	r1, #4294967295
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	43d9      	mvns	r1, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ba0:	4313      	orrs	r3, r2
         );
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3724      	adds	r7, #36	; 0x24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bc0:	d301      	bcc.n	8006bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e00f      	b.n	8006be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bc6:	4a0a      	ldr	r2, [pc, #40]	; (8006bf0 <SysTick_Config+0x40>)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bce:	210f      	movs	r1, #15
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd4:	f7ff ff8e 	bl	8006af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bd8:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <SysTick_Config+0x40>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bde:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <SysTick_Config+0x40>)
 8006be0:	2207      	movs	r2, #7
 8006be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	e000e010 	.word	0xe000e010

08006bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff29 	bl	8006a54 <__NVIC_SetPriorityGrouping>
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	4603      	mov	r3, r0
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c1c:	f7ff ff3e 	bl	8006a9c <__NVIC_GetPriorityGrouping>
 8006c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	6978      	ldr	r0, [r7, #20]
 8006c28:	f7ff ff8e 	bl	8006b48 <NVIC_EncodePriority>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c32:	4611      	mov	r1, r2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff ff5d 	bl	8006af4 <__NVIC_SetPriority>
}
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	4603      	mov	r3, r0
 8006c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff ff31 	bl	8006ab8 <__NVIC_EnableIRQ>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff ffa2 	bl	8006bb0 <SysTick_Config>
 8006c6c:	4603      	mov	r3, r0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006c84:	f7ff faa4 	bl	80061d0 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e099      	b.n	8006dc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cb4:	e00f      	b.n	8006cd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cb6:	f7ff fa8b 	bl	80061d0 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b05      	cmp	r3, #5
 8006cc2:	d908      	bls.n	8006cd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e078      	b.n	8006dc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e8      	bne.n	8006cb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <HAL_DMA_Init+0x158>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	d107      	bne.n	8006d40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0307 	bic.w	r3, r3, #7
 8006d56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d117      	bne.n	8006d9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00e      	beq.n	8006d9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb01 	bl	8007384 <DMA_CheckFifoParam>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2240      	movs	r2, #64	; 0x40
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006d96:	2301      	movs	r3, #1
 8006d98:	e016      	b.n	8006dc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fab8 	bl	8007318 <DMA_CalcBaseAndBitshift>
 8006da8:	4603      	mov	r3, r0
 8006daa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db0:	223f      	movs	r2, #63	; 0x3f
 8006db2:	409a      	lsls	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	f010803f 	.word	0xf010803f

08006dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_DMA_Start_IT+0x26>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e040      	b.n	8006e7c <HAL_DMA_Start_IT+0xa8>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d12f      	bne.n	8006e6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fa4a 	bl	80072bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e2c:	223f      	movs	r2, #63	; 0x3f
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0216 	orr.w	r2, r2, #22
 8006e42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d007      	beq.n	8006e5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0208 	orr.w	r2, r2, #8
 8006e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	e005      	b.n	8006e7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
 8006e78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e92:	f7ff f99d 	bl	80061d0 <HAL_GetTick>
 8006e96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d008      	beq.n	8006eb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e052      	b.n	8006f5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0216 	bic.w	r2, r2, #22
 8006ec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	695a      	ldr	r2, [r3, #20]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <HAL_DMA_Abort+0x62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0208 	bic.w	r2, r2, #8
 8006ef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f06:	e013      	b.n	8006f30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f08:	f7ff f962 	bl	80061d0 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	d90c      	bls.n	8006f30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2203      	movs	r2, #3
 8006f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e015      	b.n	8006f5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e4      	bne.n	8006f08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f42:	223f      	movs	r2, #63	; 0x3f
 8006f44:	409a      	lsls	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d004      	beq.n	8006f82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2280      	movs	r2, #128	; 0x80
 8006f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e00c      	b.n	8006f9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2205      	movs	r2, #5
 8006f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fb4:	4b8e      	ldr	r3, [pc, #568]	; (80071f0 <HAL_DMA_IRQHandler+0x248>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a8e      	ldr	r2, [pc, #568]	; (80071f4 <HAL_DMA_IRQHandler+0x24c>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	0a9b      	lsrs	r3, r3, #10
 8006fc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	409a      	lsls	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d01a      	beq.n	8007014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d013      	beq.n	8007014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0204 	bic.w	r2, r2, #4
 8006ffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007000:	2208      	movs	r2, #8
 8007002:	409a      	lsls	r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007018:	2201      	movs	r2, #1
 800701a:	409a      	lsls	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4013      	ands	r3, r2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d012      	beq.n	800704a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007036:	2201      	movs	r2, #1
 8007038:	409a      	lsls	r2, r3
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007042:	f043 0202 	orr.w	r2, r3, #2
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704e:	2204      	movs	r2, #4
 8007050:	409a      	lsls	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4013      	ands	r3, r2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d012      	beq.n	8007080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	2204      	movs	r2, #4
 800706e:	409a      	lsls	r2, r3
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007078:	f043 0204 	orr.w	r2, r3, #4
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007084:	2210      	movs	r2, #16
 8007086:	409a      	lsls	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d043      	beq.n	8007118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d03c      	beq.n	8007118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a2:	2210      	movs	r2, #16
 80070a4:	409a      	lsls	r2, r3
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d018      	beq.n	80070ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d108      	bne.n	80070d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d024      	beq.n	8007118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	4798      	blx	r3
 80070d6:	e01f      	b.n	8007118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01b      	beq.n	8007118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
 80070e8:	e016      	b.n	8007118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d107      	bne.n	8007108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0208 	bic.w	r2, r2, #8
 8007106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711c:	2220      	movs	r2, #32
 800711e:	409a      	lsls	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4013      	ands	r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 808f 	beq.w	8007248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8087 	beq.w	8007248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713e:	2220      	movs	r2, #32
 8007140:	409a      	lsls	r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b05      	cmp	r3, #5
 8007150:	d136      	bne.n	80071c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0216 	bic.w	r2, r2, #22
 8007160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695a      	ldr	r2, [r3, #20]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d103      	bne.n	8007182 <HAL_DMA_IRQHandler+0x1da>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0208 	bic.w	r2, r2, #8
 8007190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007196:	223f      	movs	r2, #63	; 0x3f
 8007198:	409a      	lsls	r2, r3
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d07e      	beq.n	80072b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
        }
        return;
 80071be:	e079      	b.n	80072b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d01d      	beq.n	800720a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10d      	bne.n	80071f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d031      	beq.n	8007248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
 80071ec:	e02c      	b.n	8007248 <HAL_DMA_IRQHandler+0x2a0>
 80071ee:	bf00      	nop
 80071f0:	2000006c 	.word	0x2000006c
 80071f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d023      	beq.n	8007248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
 8007208:	e01e      	b.n	8007248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10f      	bne.n	8007238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0210 	bic.w	r2, r2, #16
 8007226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724c:	2b00      	cmp	r3, #0
 800724e:	d032      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d022      	beq.n	80072a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2205      	movs	r2, #5
 8007260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	3301      	adds	r3, #1
 8007278:	60bb      	str	r3, [r7, #8]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	429a      	cmp	r2, r3
 800727e:	d307      	bcc.n	8007290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f2      	bne.n	8007274 <HAL_DMA_IRQHandler+0x2cc>
 800728e:	e000      	b.n	8007292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d005      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
 80072b2:	e000      	b.n	80072b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80072b4:	bf00      	nop
    }
  }
}
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b40      	cmp	r3, #64	; 0x40
 80072e8:	d108      	bne.n	80072fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072fa:	e007      	b.n	800730c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	60da      	str	r2, [r3, #12]
}
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	b2db      	uxtb	r3, r3
 8007326:	3b10      	subs	r3, #16
 8007328:	4a14      	ldr	r2, [pc, #80]	; (800737c <DMA_CalcBaseAndBitshift+0x64>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	091b      	lsrs	r3, r3, #4
 8007330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007332:	4a13      	ldr	r2, [pc, #76]	; (8007380 <DMA_CalcBaseAndBitshift+0x68>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b03      	cmp	r3, #3
 8007344:	d909      	bls.n	800735a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	1d1a      	adds	r2, r3, #4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	659a      	str	r2, [r3, #88]	; 0x58
 8007358:	e007      	b.n	800736a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	aaaaaaab 	.word	0xaaaaaaab
 8007380:	080f23b4 	.word	0x080f23b4

08007384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d11f      	bne.n	80073de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b03      	cmp	r3, #3
 80073a2:	d856      	bhi.n	8007452 <DMA_CheckFifoParam+0xce>
 80073a4:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <DMA_CheckFifoParam+0x28>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073bd 	.word	0x080073bd
 80073b0:	080073cf 	.word	0x080073cf
 80073b4:	080073bd 	.word	0x080073bd
 80073b8:	08007453 	.word	0x08007453
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d046      	beq.n	8007456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073cc:	e043      	b.n	8007456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073d6:	d140      	bne.n	800745a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073dc:	e03d      	b.n	800745a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e6:	d121      	bne.n	800742c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	d837      	bhi.n	800745e <DMA_CheckFifoParam+0xda>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <DMA_CheckFifoParam+0x70>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	08007405 	.word	0x08007405
 80073f8:	0800740b 	.word	0x0800740b
 80073fc:	08007405 	.word	0x08007405
 8007400:	0800741d 	.word	0x0800741d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	73fb      	strb	r3, [r7, #15]
      break;
 8007408:	e030      	b.n	800746c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d025      	beq.n	8007462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800741a:	e022      	b.n	8007462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007424:	d11f      	bne.n	8007466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800742a:	e01c      	b.n	8007466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d903      	bls.n	800743a <DMA_CheckFifoParam+0xb6>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b03      	cmp	r3, #3
 8007436:	d003      	beq.n	8007440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007438:	e018      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
      break;
 800743e:	e015      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00e      	beq.n	800746a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
      break;
 8007450:	e00b      	b.n	800746a <DMA_CheckFifoParam+0xe6>
      break;
 8007452:	bf00      	nop
 8007454:	e00a      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      break;
 8007456:	bf00      	nop
 8007458:	e008      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      break;
 800745a:	bf00      	nop
 800745c:	e006      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      break;
 800745e:	bf00      	nop
 8007460:	e004      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      break;
 8007462:	bf00      	nop
 8007464:	e002      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      break;   
 8007466:	bf00      	nop
 8007468:	e000      	b.n	800746c <DMA_CheckFifoParam+0xe8>
      break;
 800746a:	bf00      	nop
    }
  } 
  
  return status; 
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop

0800747c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800747c:	b480      	push	{r7}
 800747e:	b089      	sub	sp, #36	; 0x24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800748e:	2300      	movs	r3, #0
 8007490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	e16b      	b.n	8007770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007498:	2201      	movs	r2, #1
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4013      	ands	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	f040 815a 	bne.w	800776a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d005      	beq.n	80074ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d130      	bne.n	8007530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	2203      	movs	r2, #3
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43db      	mvns	r3, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	4013      	ands	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007504:	2201      	movs	r2, #1
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4013      	ands	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	091b      	lsrs	r3, r3, #4
 800751a:	f003 0201 	and.w	r2, r3, #1
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	4313      	orrs	r3, r2
 8007528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b03      	cmp	r3, #3
 800753a:	d017      	beq.n	800756c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	2203      	movs	r2, #3
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	4013      	ands	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	4313      	orrs	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	2b02      	cmp	r3, #2
 8007576:	d123      	bne.n	80075c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	08da      	lsrs	r2, r3, #3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3208      	adds	r2, #8
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	220f      	movs	r2, #15
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	43db      	mvns	r3, r3
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	4013      	ands	r3, r2
 800759a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	08da      	lsrs	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3208      	adds	r2, #8
 80075ba:	69b9      	ldr	r1, [r7, #24]
 80075bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	2203      	movs	r2, #3
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	43db      	mvns	r3, r3
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	4013      	ands	r3, r2
 80075d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 0203 	and.w	r2, r3, #3
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80b4 	beq.w	800776a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	4b60      	ldr	r3, [pc, #384]	; (8007788 <HAL_GPIO_Init+0x30c>)
 8007608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760a:	4a5f      	ldr	r2, [pc, #380]	; (8007788 <HAL_GPIO_Init+0x30c>)
 800760c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007610:	6453      	str	r3, [r2, #68]	; 0x44
 8007612:	4b5d      	ldr	r3, [pc, #372]	; (8007788 <HAL_GPIO_Init+0x30c>)
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800761e:	4a5b      	ldr	r2, [pc, #364]	; (800778c <HAL_GPIO_Init+0x310>)
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	089b      	lsrs	r3, r3, #2
 8007624:	3302      	adds	r3, #2
 8007626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	220f      	movs	r2, #15
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4013      	ands	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a52      	ldr	r2, [pc, #328]	; (8007790 <HAL_GPIO_Init+0x314>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d02b      	beq.n	80076a2 <HAL_GPIO_Init+0x226>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a51      	ldr	r2, [pc, #324]	; (8007794 <HAL_GPIO_Init+0x318>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d025      	beq.n	800769e <HAL_GPIO_Init+0x222>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a50      	ldr	r2, [pc, #320]	; (8007798 <HAL_GPIO_Init+0x31c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d01f      	beq.n	800769a <HAL_GPIO_Init+0x21e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a4f      	ldr	r2, [pc, #316]	; (800779c <HAL_GPIO_Init+0x320>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d019      	beq.n	8007696 <HAL_GPIO_Init+0x21a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a4e      	ldr	r2, [pc, #312]	; (80077a0 <HAL_GPIO_Init+0x324>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d013      	beq.n	8007692 <HAL_GPIO_Init+0x216>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a4d      	ldr	r2, [pc, #308]	; (80077a4 <HAL_GPIO_Init+0x328>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00d      	beq.n	800768e <HAL_GPIO_Init+0x212>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a4c      	ldr	r2, [pc, #304]	; (80077a8 <HAL_GPIO_Init+0x32c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d007      	beq.n	800768a <HAL_GPIO_Init+0x20e>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a4b      	ldr	r2, [pc, #300]	; (80077ac <HAL_GPIO_Init+0x330>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d101      	bne.n	8007686 <HAL_GPIO_Init+0x20a>
 8007682:	2307      	movs	r3, #7
 8007684:	e00e      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 8007686:	2308      	movs	r3, #8
 8007688:	e00c      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 800768a:	2306      	movs	r3, #6
 800768c:	e00a      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 800768e:	2305      	movs	r3, #5
 8007690:	e008      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 8007692:	2304      	movs	r3, #4
 8007694:	e006      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 8007696:	2303      	movs	r3, #3
 8007698:	e004      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 800769a:	2302      	movs	r3, #2
 800769c:	e002      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <HAL_GPIO_Init+0x228>
 80076a2:	2300      	movs	r3, #0
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	f002 0203 	and.w	r2, r2, #3
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	4093      	lsls	r3, r2
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076b4:	4935      	ldr	r1, [pc, #212]	; (800778c <HAL_GPIO_Init+0x310>)
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	089b      	lsrs	r3, r3, #2
 80076ba:	3302      	adds	r3, #2
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80076c2:	4b3b      	ldr	r3, [pc, #236]	; (80077b0 <HAL_GPIO_Init+0x334>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	43db      	mvns	r3, r3
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	4013      	ands	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80076e6:	4a32      	ldr	r2, [pc, #200]	; (80077b0 <HAL_GPIO_Init+0x334>)
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80076ec:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <HAL_GPIO_Init+0x334>)
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	43db      	mvns	r3, r3
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	4013      	ands	r3, r2
 80076fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007710:	4a27      	ldr	r2, [pc, #156]	; (80077b0 <HAL_GPIO_Init+0x334>)
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007716:	4b26      	ldr	r3, [pc, #152]	; (80077b0 <HAL_GPIO_Init+0x334>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	43db      	mvns	r3, r3
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4013      	ands	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800773a:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <HAL_GPIO_Init+0x334>)
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <HAL_GPIO_Init+0x334>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	43db      	mvns	r3, r3
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	4013      	ands	r3, r2
 800774e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007764:	4a12      	ldr	r2, [pc, #72]	; (80077b0 <HAL_GPIO_Init+0x334>)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	3301      	adds	r3, #1
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2b0f      	cmp	r3, #15
 8007774:	f67f ae90 	bls.w	8007498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3724      	adds	r7, #36	; 0x24
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40023800 	.word	0x40023800
 800778c:	40013800 	.word	0x40013800
 8007790:	40020000 	.word	0x40020000
 8007794:	40020400 	.word	0x40020400
 8007798:	40020800 	.word	0x40020800
 800779c:	40020c00 	.word	0x40020c00
 80077a0:	40021000 	.word	0x40021000
 80077a4:	40021400 	.word	0x40021400
 80077a8:	40021800 	.word	0x40021800
 80077ac:	40021c00 	.word	0x40021c00
 80077b0:	40013c00 	.word	0x40013c00

080077b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	887b      	ldrh	r3, [r7, #2]
 80077c6:	4013      	ands	r3, r2
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077cc:	2301      	movs	r3, #1
 80077ce:	73fb      	strb	r3, [r7, #15]
 80077d0:	e001      	b.n	80077d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]
 80077f0:	4613      	mov	r3, r2
 80077f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80077f4:	787b      	ldrb	r3, [r7, #1]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077fa:	887a      	ldrh	r2, [r7, #2]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007800:	e003      	b.n	800780a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007802:	887b      	ldrh	r3, [r7, #2]
 8007804:	041a      	lsls	r2, r3, #16
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	619a      	str	r2, [r3, #24]
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007816:	b480      	push	{r7}
 8007818:	b085      	sub	sp, #20
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007828:	887a      	ldrh	r2, [r7, #2]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4013      	ands	r3, r2
 800782e:	041a      	lsls	r2, r3, #16
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	43d9      	mvns	r1, r3
 8007834:	887b      	ldrh	r3, [r7, #2]
 8007836:	400b      	ands	r3, r1
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	619a      	str	r2, [r3, #24]
}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e12b      	b.n	8007ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d106      	bne.n	8007878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fd f8bc 	bl	80049f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2224      	movs	r2, #36	; 0x24
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0201 	bic.w	r2, r2, #1
 800788e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800789e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078b0:	f001 fbfc 	bl	80090ac <HAL_RCC_GetPCLK1Freq>
 80078b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	4a81      	ldr	r2, [pc, #516]	; (8007ac0 <HAL_I2C_Init+0x274>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d807      	bhi.n	80078d0 <HAL_I2C_Init+0x84>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4a80      	ldr	r2, [pc, #512]	; (8007ac4 <HAL_I2C_Init+0x278>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	bf94      	ite	ls
 80078c8:	2301      	movls	r3, #1
 80078ca:	2300      	movhi	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	e006      	b.n	80078de <HAL_I2C_Init+0x92>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	4a7d      	ldr	r2, [pc, #500]	; (8007ac8 <HAL_I2C_Init+0x27c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bf94      	ite	ls
 80078d8:	2301      	movls	r3, #1
 80078da:	2300      	movhi	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e0e7      	b.n	8007ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4a78      	ldr	r2, [pc, #480]	; (8007acc <HAL_I2C_Init+0x280>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	0c9b      	lsrs	r3, r3, #18
 80078f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4a6a      	ldr	r2, [pc, #424]	; (8007ac0 <HAL_I2C_Init+0x274>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d802      	bhi.n	8007920 <HAL_I2C_Init+0xd4>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	3301      	adds	r3, #1
 800791e:	e009      	b.n	8007934 <HAL_I2C_Init+0xe8>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007926:	fb02 f303 	mul.w	r3, r2, r3
 800792a:	4a69      	ldr	r2, [pc, #420]	; (8007ad0 <HAL_I2C_Init+0x284>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	099b      	lsrs	r3, r3, #6
 8007932:	3301      	adds	r3, #1
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	430b      	orrs	r3, r1
 800793a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	495c      	ldr	r1, [pc, #368]	; (8007ac0 <HAL_I2C_Init+0x274>)
 8007950:	428b      	cmp	r3, r1
 8007952:	d819      	bhi.n	8007988 <HAL_I2C_Init+0x13c>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	1e59      	subs	r1, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007962:	1c59      	adds	r1, r3, #1
 8007964:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007968:	400b      	ands	r3, r1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <HAL_I2C_Init+0x138>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1e59      	subs	r1, r3, #1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	005b      	lsls	r3, r3, #1
 8007978:	fbb1 f3f3 	udiv	r3, r1, r3
 800797c:	3301      	adds	r3, #1
 800797e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007982:	e051      	b.n	8007a28 <HAL_I2C_Init+0x1dc>
 8007984:	2304      	movs	r3, #4
 8007986:	e04f      	b.n	8007a28 <HAL_I2C_Init+0x1dc>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d111      	bne.n	80079b4 <HAL_I2C_Init+0x168>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	1e58      	subs	r0, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6859      	ldr	r1, [r3, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	440b      	add	r3, r1
 800799e:	fbb0 f3f3 	udiv	r3, r0, r3
 80079a2:	3301      	adds	r3, #1
 80079a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bf0c      	ite	eq
 80079ac:	2301      	moveq	r3, #1
 80079ae:	2300      	movne	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	e012      	b.n	80079da <HAL_I2C_Init+0x18e>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	1e58      	subs	r0, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6859      	ldr	r1, [r3, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	0099      	lsls	r1, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80079ca:	3301      	adds	r3, #1
 80079cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bf0c      	ite	eq
 80079d4:	2301      	moveq	r3, #1
 80079d6:	2300      	movne	r3, #0
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <HAL_I2C_Init+0x196>
 80079de:	2301      	movs	r3, #1
 80079e0:	e022      	b.n	8007a28 <HAL_I2C_Init+0x1dc>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10e      	bne.n	8007a08 <HAL_I2C_Init+0x1bc>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1e58      	subs	r0, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6859      	ldr	r1, [r3, #4]
 80079f2:	460b      	mov	r3, r1
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	440b      	add	r3, r1
 80079f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80079fc:	3301      	adds	r3, #1
 80079fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a06:	e00f      	b.n	8007a28 <HAL_I2C_Init+0x1dc>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	1e58      	subs	r0, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6859      	ldr	r1, [r3, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	0099      	lsls	r1, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a1e:	3301      	adds	r3, #1
 8007a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	6809      	ldr	r1, [r1, #0]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69da      	ldr	r2, [r3, #28]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6911      	ldr	r1, [r2, #16]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68d2      	ldr	r2, [r2, #12]
 8007a62:	4311      	orrs	r1, r2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695a      	ldr	r2, [r3, #20]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	000186a0 	.word	0x000186a0
 8007ac4:	001e847f 	.word	0x001e847f
 8007ac8:	003d08ff 	.word	0x003d08ff
 8007acc:	431bde83 	.word	0x431bde83
 8007ad0:	10624dd3 	.word	0x10624dd3

08007ad4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	4608      	mov	r0, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	817b      	strh	r3, [r7, #10]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	813b      	strh	r3, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007aee:	f7fe fb6f 	bl	80061d0 <HAL_GetTick>
 8007af2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	f040 80d9 	bne.w	8007cb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	2319      	movs	r3, #25
 8007b08:	2201      	movs	r2, #1
 8007b0a:	496d      	ldr	r1, [pc, #436]	; (8007cc0 <HAL_I2C_Mem_Write+0x1ec>)
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fc7f 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e0cc      	b.n	8007cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_I2C_Mem_Write+0x56>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e0c5      	b.n	8007cb6 <HAL_I2C_Mem_Write+0x1e2>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d007      	beq.n	8007b50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0201 	orr.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2221      	movs	r2, #33	; 0x21
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2240      	movs	r2, #64	; 0x40
 8007b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a3a      	ldr	r2, [r7, #32]
 8007b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4a4d      	ldr	r2, [pc, #308]	; (8007cc4 <HAL_I2C_Mem_Write+0x1f0>)
 8007b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b92:	88f8      	ldrh	r0, [r7, #6]
 8007b94:	893a      	ldrh	r2, [r7, #8]
 8007b96:	8979      	ldrh	r1, [r7, #10]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fab6 	bl	8008114 <I2C_RequestMemoryWrite>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d052      	beq.n	8007c54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e081      	b.n	8007cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fd00 	bl	80085bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00d      	beq.n	8007bde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d107      	bne.n	8007bda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e06b      	b.n	8007cb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d11b      	bne.n	8007c54 <HAL_I2C_Mem_Write+0x180>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d017      	beq.n	8007c54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1aa      	bne.n	8007bb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f000 fcec 	bl	800863e <I2C_WaitOnBTFFlagUntilTimeout>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00d      	beq.n	8007c88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d107      	bne.n	8007c84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e016      	b.n	8007cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e000      	b.n	8007cb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007cb4:	2302      	movs	r3, #2
  }
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	00100002 	.word	0x00100002
 8007cc4:	ffff0000 	.word	0xffff0000

08007cc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08c      	sub	sp, #48	; 0x30
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	817b      	strh	r3, [r7, #10]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	813b      	strh	r3, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ce2:	f7fe fa75 	bl	80061d0 <HAL_GetTick>
 8007ce6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	f040 8208 	bne.w	8008106 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	2319      	movs	r3, #25
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	497b      	ldr	r1, [pc, #492]	; (8007eec <HAL_I2C_Mem_Read+0x224>)
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fb85 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e1fb      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_I2C_Mem_Read+0x56>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e1f4      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0301 	and.w	r3, r3, #1
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d007      	beq.n	8007d44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2222      	movs	r2, #34	; 0x22
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2240      	movs	r2, #64	; 0x40
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4a5b      	ldr	r2, [pc, #364]	; (8007ef0 <HAL_I2C_Mem_Read+0x228>)
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d86:	88f8      	ldrh	r0, [r7, #6]
 8007d88:	893a      	ldrh	r2, [r7, #8]
 8007d8a:	8979      	ldrh	r1, [r7, #10]
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	4603      	mov	r3, r0
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 fa52 	bl	8008240 <I2C_RequestMemoryRead>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e1b0      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d113      	bne.n	8007dd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dae:	2300      	movs	r3, #0
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	623b      	str	r3, [r7, #32]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	623b      	str	r3, [r7, #32]
 8007dc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e184      	b.n	80080e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d11b      	bne.n	8007e16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	61fb      	str	r3, [r7, #28]
 8007e02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	e164      	b.n	80080e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d11b      	bne.n	8007e56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	e144      	b.n	80080e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	695b      	ldr	r3, [r3, #20]
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e6c:	e138      	b.n	80080e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	f200 80f1 	bhi.w	800805a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d123      	bne.n	8007ec8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fc1b 	bl	80086c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e139      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ec6:	e10b      	b.n	80080e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d14e      	bne.n	8007f6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4906      	ldr	r1, [pc, #24]	; (8007ef4 <HAL_I2C_Mem_Read+0x22c>)
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 fa98 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e10e      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
 8007eea:	bf00      	nop
 8007eec:	00100002 	.word	0x00100002
 8007ef0:	ffff0000 	.word	0xffff0000
 8007ef4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f56:	3b01      	subs	r3, #1
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f6c:	e0b8      	b.n	80080e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	2200      	movs	r2, #0
 8007f76:	4966      	ldr	r1, [pc, #408]	; (8008110 <HAL_I2C_Mem_Read+0x448>)
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fa49 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e0bf      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691a      	ldr	r2, [r3, #16]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	494f      	ldr	r1, [pc, #316]	; (8008110 <HAL_I2C_Mem_Read+0x448>)
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 fa1b 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e091      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800804e:	b29b      	uxth	r3, r3
 8008050:	3b01      	subs	r3, #1
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008058:	e042      	b.n	80080e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800805a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 fb2e 	bl	80086c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e04c      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008096:	b29b      	uxth	r3, r3
 8008098:	3b01      	subs	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d118      	bne.n	80080e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f47f aec2 	bne.w	8007e6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
  }
}
 8008108:	4618      	mov	r0, r3
 800810a:	3728      	adds	r7, #40	; 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	00010004 	.word	0x00010004

08008114 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af02      	add	r7, sp, #8
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	4603      	mov	r3, r0
 8008124:	817b      	strh	r3, [r7, #10]
 8008126:	460b      	mov	r3, r1
 8008128:	813b      	strh	r3, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800813c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	2200      	movs	r2, #0
 8008146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f960 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008164:	d103      	bne.n	800816e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e05f      	b.n	8008232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008172:	897b      	ldrh	r3, [r7, #10]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	6a3a      	ldr	r2, [r7, #32]
 8008186:	492d      	ldr	r1, [pc, #180]	; (800823c <I2C_RequestMemoryWrite+0x128>)
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f998 	bl	80084be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e04c      	b.n	8008232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b0:	6a39      	ldr	r1, [r7, #32]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 fa02 	bl	80085bc <I2C_WaitOnTXEFlagUntilTimeout>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00d      	beq.n	80081da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d107      	bne.n	80081d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e02b      	b.n	8008232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081da:	88fb      	ldrh	r3, [r7, #6]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d105      	bne.n	80081ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081e0:	893b      	ldrh	r3, [r7, #8]
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	611a      	str	r2, [r3, #16]
 80081ea:	e021      	b.n	8008230 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081ec:	893b      	ldrh	r3, [r7, #8]
 80081ee:	0a1b      	lsrs	r3, r3, #8
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081fc:	6a39      	ldr	r1, [r7, #32]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f9dc 	bl	80085bc <I2C_WaitOnTXEFlagUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00d      	beq.n	8008226 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	2b04      	cmp	r3, #4
 8008210:	d107      	bne.n	8008222 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e005      	b.n	8008232 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008226:	893b      	ldrh	r3, [r7, #8]
 8008228:	b2da      	uxtb	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	00010002 	.word	0x00010002

08008240 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af02      	add	r7, sp, #8
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	461a      	mov	r2, r3
 800824e:	4603      	mov	r3, r0
 8008250:	817b      	strh	r3, [r7, #10]
 8008252:	460b      	mov	r3, r1
 8008254:	813b      	strh	r3, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008268:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	2200      	movs	r2, #0
 8008282:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 f8c2 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a0:	d103      	bne.n	80082aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e0aa      	b.n	8008404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082ae:	897b      	ldrh	r3, [r7, #10]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	6a3a      	ldr	r2, [r7, #32]
 80082c2:	4952      	ldr	r1, [pc, #328]	; (800840c <I2C_RequestMemoryRead+0x1cc>)
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 f8fa 	bl	80084be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e097      	b.n	8008404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ec:	6a39      	ldr	r1, [r7, #32]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 f964 	bl	80085bc <I2C_WaitOnTXEFlagUntilTimeout>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00d      	beq.n	8008316 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d107      	bne.n	8008312 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e076      	b.n	8008404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d105      	bne.n	8008328 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800831c:	893b      	ldrh	r3, [r7, #8]
 800831e:	b2da      	uxtb	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	611a      	str	r2, [r3, #16]
 8008326:	e021      	b.n	800836c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008328:	893b      	ldrh	r3, [r7, #8]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	b29b      	uxth	r3, r3
 800832e:	b2da      	uxtb	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008338:	6a39      	ldr	r1, [r7, #32]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f93e 	bl	80085bc <I2C_WaitOnTXEFlagUntilTimeout>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00d      	beq.n	8008362 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	2b04      	cmp	r3, #4
 800834c:	d107      	bne.n	800835e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800835c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e050      	b.n	8008404 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008362:	893b      	ldrh	r3, [r7, #8]
 8008364:	b2da      	uxtb	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800836c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836e:	6a39      	ldr	r1, [r7, #32]
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f923 	bl	80085bc <I2C_WaitOnTXEFlagUntilTimeout>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00d      	beq.n	8008398 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	2b04      	cmp	r3, #4
 8008382:	d107      	bne.n	8008394 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008392:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e035      	b.n	8008404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f82b 	bl	8008410 <I2C_WaitOnFlagUntilTimeout>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00d      	beq.n	80083dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ce:	d103      	bne.n	80083d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e013      	b.n	8008404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083dc:	897b      	ldrh	r3, [r7, #10]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f043 0301 	orr.w	r3, r3, #1
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	6a3a      	ldr	r2, [r7, #32]
 80083f0:	4906      	ldr	r1, [pc, #24]	; (800840c <I2C_RequestMemoryRead+0x1cc>)
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f863 	bl	80084be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	00010002 	.word	0x00010002

08008410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	4613      	mov	r3, r2
 800841e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008420:	e025      	b.n	800846e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008428:	d021      	beq.n	800846e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800842a:	f7fd fed1 	bl	80061d0 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d302      	bcc.n	8008440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d116      	bne.n	800846e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	f043 0220 	orr.w	r2, r3, #32
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e023      	b.n	80084b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	0c1b      	lsrs	r3, r3, #16
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b01      	cmp	r3, #1
 8008476:	d10d      	bne.n	8008494 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	43da      	mvns	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	4013      	ands	r3, r2
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	bf0c      	ite	eq
 800848a:	2301      	moveq	r3, #1
 800848c:	2300      	movne	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	e00c      	b.n	80084ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	43da      	mvns	r2, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	bf0c      	ite	eq
 80084a6:	2301      	moveq	r3, #1
 80084a8:	2300      	movne	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	79fb      	ldrb	r3, [r7, #7]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d0b6      	beq.n	8008422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	60f8      	str	r0, [r7, #12]
 80084c6:	60b9      	str	r1, [r7, #8]
 80084c8:	607a      	str	r2, [r7, #4]
 80084ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084cc:	e051      	b.n	8008572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084dc:	d123      	bne.n	8008526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2220      	movs	r2, #32
 8008502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	f043 0204 	orr.w	r2, r3, #4
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e046      	b.n	80085b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800852c:	d021      	beq.n	8008572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852e:	f7fd fe4f 	bl	80061d0 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	429a      	cmp	r2, r3
 800853c:	d302      	bcc.n	8008544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d116      	bne.n	8008572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2220      	movs	r2, #32
 800854e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	f043 0220 	orr.w	r2, r3, #32
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e020      	b.n	80085b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	0c1b      	lsrs	r3, r3, #16
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b01      	cmp	r3, #1
 800857a:	d10c      	bne.n	8008596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	43da      	mvns	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4013      	ands	r3, r2
 8008588:	b29b      	uxth	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	bf14      	ite	ne
 800858e:	2301      	movne	r3, #1
 8008590:	2300      	moveq	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	e00b      	b.n	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	43da      	mvns	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4013      	ands	r3, r2
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	bf14      	ite	ne
 80085a8:	2301      	movne	r3, #1
 80085aa:	2300      	moveq	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d18d      	bne.n	80084ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085c8:	e02d      	b.n	8008626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f8ce 	bl	800876c <I2C_IsAcknowledgeFailed>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e02d      	b.n	8008636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e0:	d021      	beq.n	8008626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e2:	f7fd fdf5 	bl	80061d0 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d302      	bcc.n	80085f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d116      	bne.n	8008626 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	f043 0220 	orr.w	r2, r3, #32
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e007      	b.n	8008636 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d1ca      	bne.n	80085ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800864a:	e02d      	b.n	80086a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f000 f88d 	bl	800876c <I2C_IsAcknowledgeFailed>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e02d      	b.n	80086b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008662:	d021      	beq.n	80086a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008664:	f7fd fdb4 	bl	80061d0 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	429a      	cmp	r2, r3
 8008672:	d302      	bcc.n	800867a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d116      	bne.n	80086a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	f043 0220 	orr.w	r2, r3, #32
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e007      	b.n	80086b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f003 0304 	and.w	r3, r3, #4
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d1ca      	bne.n	800864c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086cc:	e042      	b.n	8008754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	f003 0310 	and.w	r3, r3, #16
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d119      	bne.n	8008710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0210 	mvn.w	r2, #16
 80086e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e029      	b.n	8008764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008710:	f7fd fd5e 	bl	80061d0 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	429a      	cmp	r2, r3
 800871e:	d302      	bcc.n	8008726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d116      	bne.n	8008754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	f043 0220 	orr.w	r2, r3, #32
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e007      	b.n	8008764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875e:	2b40      	cmp	r3, #64	; 0x40
 8008760:	d1b5      	bne.n	80086ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800877e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008782:	d11b      	bne.n	80087bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800878c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	f043 0204 	orr.w	r2, r3, #4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
	...

080087cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e267      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d075      	beq.n	80088d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087ea:	4b88      	ldr	r3, [pc, #544]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 030c 	and.w	r3, r3, #12
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d00c      	beq.n	8008810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80087f6:	4b85      	ldr	r3, [pc, #532]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80087fe:	2b08      	cmp	r3, #8
 8008800:	d112      	bne.n	8008828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008802:	4b82      	ldr	r3, [pc, #520]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800880a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800880e:	d10b      	bne.n	8008828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008810:	4b7e      	ldr	r3, [pc, #504]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d05b      	beq.n	80088d4 <HAL_RCC_OscConfig+0x108>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d157      	bne.n	80088d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e242      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008830:	d106      	bne.n	8008840 <HAL_RCC_OscConfig+0x74>
 8008832:	4b76      	ldr	r3, [pc, #472]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a75      	ldr	r2, [pc, #468]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e01d      	b.n	800887c <HAL_RCC_OscConfig+0xb0>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008848:	d10c      	bne.n	8008864 <HAL_RCC_OscConfig+0x98>
 800884a:	4b70      	ldr	r3, [pc, #448]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a6f      	ldr	r2, [pc, #444]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	4b6d      	ldr	r3, [pc, #436]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a6c      	ldr	r2, [pc, #432]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 800885c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	e00b      	b.n	800887c <HAL_RCC_OscConfig+0xb0>
 8008864:	4b69      	ldr	r3, [pc, #420]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a68      	ldr	r2, [pc, #416]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 800886a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	4b66      	ldr	r3, [pc, #408]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a65      	ldr	r2, [pc, #404]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800887a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d013      	beq.n	80088ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008884:	f7fd fca4 	bl	80061d0 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800888c:	f7fd fca0 	bl	80061d0 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b64      	cmp	r3, #100	; 0x64
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e207      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800889e:	4b5b      	ldr	r3, [pc, #364]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0xc0>
 80088aa:	e014      	b.n	80088d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088ac:	f7fd fc90 	bl	80061d0 <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088b4:	f7fd fc8c 	bl	80061d0 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b64      	cmp	r3, #100	; 0x64
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e1f3      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80088c6:	4b51      	ldr	r3, [pc, #324]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f0      	bne.n	80088b4 <HAL_RCC_OscConfig+0xe8>
 80088d2:	e000      	b.n	80088d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d063      	beq.n	80089aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088e2:	4b4a      	ldr	r3, [pc, #296]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f003 030c 	and.w	r3, r3, #12
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00b      	beq.n	8008906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088ee:	4b47      	ldr	r3, [pc, #284]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d11c      	bne.n	8008934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80088fa:	4b44      	ldr	r3, [pc, #272]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d116      	bne.n	8008934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008906:	4b41      	ldr	r3, [pc, #260]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <HAL_RCC_OscConfig+0x152>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d001      	beq.n	800891e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e1c7      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800891e:	4b3b      	ldr	r3, [pc, #236]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	4937      	ldr	r1, [pc, #220]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 800892e:	4313      	orrs	r3, r2
 8008930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008932:	e03a      	b.n	80089aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d020      	beq.n	800897e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800893c:	4b34      	ldr	r3, [pc, #208]	; (8008a10 <HAL_RCC_OscConfig+0x244>)
 800893e:	2201      	movs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008942:	f7fd fc45 	bl	80061d0 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008948:	e008      	b.n	800895c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800894a:	f7fd fc41 	bl	80061d0 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e1a8      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800895c:	4b2b      	ldr	r3, [pc, #172]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0f0      	beq.n	800894a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008968:	4b28      	ldr	r3, [pc, #160]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4925      	ldr	r1, [pc, #148]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 8008978:	4313      	orrs	r3, r2
 800897a:	600b      	str	r3, [r1, #0]
 800897c:	e015      	b.n	80089aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800897e:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <HAL_RCC_OscConfig+0x244>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008984:	f7fd fc24 	bl	80061d0 <HAL_GetTick>
 8008988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800898c:	f7fd fc20 	bl	80061d0 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e187      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f0      	bne.n	800898c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0308 	and.w	r3, r3, #8
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d036      	beq.n	8008a24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d016      	beq.n	80089ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089be:	4b15      	ldr	r3, [pc, #84]	; (8008a14 <HAL_RCC_OscConfig+0x248>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c4:	f7fd fc04 	bl	80061d0 <HAL_GetTick>
 80089c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089cc:	f7fd fc00 	bl	80061d0 <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e167      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <HAL_RCC_OscConfig+0x240>)
 80089e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCC_OscConfig+0x200>
 80089ea:	e01b      	b.n	8008a24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089ec:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <HAL_RCC_OscConfig+0x248>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089f2:	f7fd fbed 	bl	80061d0 <HAL_GetTick>
 80089f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089f8:	e00e      	b.n	8008a18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80089fa:	f7fd fbe9 	bl	80061d0 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d907      	bls.n	8008a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e150      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
 8008a0c:	40023800 	.word	0x40023800
 8008a10:	42470000 	.word	0x42470000
 8008a14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a18:	4b88      	ldr	r3, [pc, #544]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1ea      	bne.n	80089fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8097 	beq.w	8008b60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a36:	4b81      	ldr	r3, [pc, #516]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10f      	bne.n	8008a62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a42:	2300      	movs	r3, #0
 8008a44:	60bb      	str	r3, [r7, #8]
 8008a46:	4b7d      	ldr	r3, [pc, #500]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	4a7c      	ldr	r2, [pc, #496]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a50:	6413      	str	r3, [r2, #64]	; 0x40
 8008a52:	4b7a      	ldr	r3, [pc, #488]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a5a:	60bb      	str	r3, [r7, #8]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a62:	4b77      	ldr	r3, [pc, #476]	; (8008c40 <HAL_RCC_OscConfig+0x474>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d118      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008a6e:	4b74      	ldr	r3, [pc, #464]	; (8008c40 <HAL_RCC_OscConfig+0x474>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a73      	ldr	r2, [pc, #460]	; (8008c40 <HAL_RCC_OscConfig+0x474>)
 8008a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a7a:	f7fd fba9 	bl	80061d0 <HAL_GetTick>
 8008a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a80:	e008      	b.n	8008a94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a82:	f7fd fba5 	bl	80061d0 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d901      	bls.n	8008a94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e10c      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a94:	4b6a      	ldr	r3, [pc, #424]	; (8008c40 <HAL_RCC_OscConfig+0x474>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0f0      	beq.n	8008a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d106      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x2ea>
 8008aa8:	4b64      	ldr	r3, [pc, #400]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aac:	4a63      	ldr	r2, [pc, #396]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008aae:	f043 0301 	orr.w	r3, r3, #1
 8008ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ab4:	e01c      	b.n	8008af0 <HAL_RCC_OscConfig+0x324>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	d10c      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x30c>
 8008abe:	4b5f      	ldr	r3, [pc, #380]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac2:	4a5e      	ldr	r2, [pc, #376]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008ac4:	f043 0304 	orr.w	r3, r3, #4
 8008ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8008aca:	4b5c      	ldr	r3, [pc, #368]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	4a5b      	ldr	r2, [pc, #364]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008ad0:	f043 0301 	orr.w	r3, r3, #1
 8008ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ad6:	e00b      	b.n	8008af0 <HAL_RCC_OscConfig+0x324>
 8008ad8:	4b58      	ldr	r3, [pc, #352]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008adc:	4a57      	ldr	r2, [pc, #348]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008ade:	f023 0301 	bic.w	r3, r3, #1
 8008ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ae4:	4b55      	ldr	r3, [pc, #340]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae8:	4a54      	ldr	r2, [pc, #336]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008aea:	f023 0304 	bic.w	r3, r3, #4
 8008aee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d015      	beq.n	8008b24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008af8:	f7fd fb6a 	bl	80061d0 <HAL_GetTick>
 8008afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008afe:	e00a      	b.n	8008b16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b00:	f7fd fb66 	bl	80061d0 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e0cb      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b16:	4b49      	ldr	r3, [pc, #292]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0ee      	beq.n	8008b00 <HAL_RCC_OscConfig+0x334>
 8008b22:	e014      	b.n	8008b4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b24:	f7fd fb54 	bl	80061d0 <HAL_GetTick>
 8008b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b2a:	e00a      	b.n	8008b42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b2c:	f7fd fb50 	bl	80061d0 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e0b5      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b42:	4b3e      	ldr	r3, [pc, #248]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1ee      	bne.n	8008b2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d105      	bne.n	8008b60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b54:	4b39      	ldr	r3, [pc, #228]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	4a38      	ldr	r2, [pc, #224]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 80a1 	beq.w	8008cac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008b6a:	4b34      	ldr	r3, [pc, #208]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f003 030c 	and.w	r3, r3, #12
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d05c      	beq.n	8008c30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d141      	bne.n	8008c02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b7e:	4b31      	ldr	r3, [pc, #196]	; (8008c44 <HAL_RCC_OscConfig+0x478>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b84:	f7fd fb24 	bl	80061d0 <HAL_GetTick>
 8008b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b8c:	f7fd fb20 	bl	80061d0 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e087      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b9e:	4b27      	ldr	r3, [pc, #156]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1f0      	bne.n	8008b8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69da      	ldr	r2, [r3, #28]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	019b      	lsls	r3, r3, #6
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	041b      	lsls	r3, r3, #16
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	061b      	lsls	r3, r3, #24
 8008bce:	491b      	ldr	r1, [pc, #108]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bd4:	4b1b      	ldr	r3, [pc, #108]	; (8008c44 <HAL_RCC_OscConfig+0x478>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bda:	f7fd faf9 	bl	80061d0 <HAL_GetTick>
 8008bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be2:	f7fd faf5 	bl	80061d0 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e05c      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bf4:	4b11      	ldr	r3, [pc, #68]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <HAL_RCC_OscConfig+0x416>
 8008c00:	e054      	b.n	8008cac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c02:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <HAL_RCC_OscConfig+0x478>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c08:	f7fd fae2 	bl	80061d0 <HAL_GetTick>
 8008c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c10:	f7fd fade 	bl	80061d0 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e045      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c22:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <HAL_RCC_OscConfig+0x470>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f0      	bne.n	8008c10 <HAL_RCC_OscConfig+0x444>
 8008c2e:	e03d      	b.n	8008cac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d107      	bne.n	8008c48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e038      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
 8008c3c:	40023800 	.word	0x40023800
 8008c40:	40007000 	.word	0x40007000
 8008c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c48:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <HAL_RCC_OscConfig+0x4ec>)
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d028      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d121      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d11a      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c78:	4013      	ands	r3, r2
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d111      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	3b01      	subs	r3, #1
 8008c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d107      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d001      	beq.n	8008cac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	40023800 	.word	0x40023800

08008cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e0cc      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cd0:	4b68      	ldr	r3, [pc, #416]	; (8008e74 <HAL_RCC_ClockConfig+0x1b8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d90c      	bls.n	8008cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cde:	4b65      	ldr	r3, [pc, #404]	; (8008e74 <HAL_RCC_ClockConfig+0x1b8>)
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce6:	4b63      	ldr	r3, [pc, #396]	; (8008e74 <HAL_RCC_ClockConfig+0x1b8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d001      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e0b8      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d020      	beq.n	8008d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d10:	4b59      	ldr	r3, [pc, #356]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	4a58      	ldr	r2, [pc, #352]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d28:	4b53      	ldr	r3, [pc, #332]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	4a52      	ldr	r2, [pc, #328]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d34:	4b50      	ldr	r3, [pc, #320]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	494d      	ldr	r1, [pc, #308]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d044      	beq.n	8008ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d107      	bne.n	8008d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d5a:	4b47      	ldr	r3, [pc, #284]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d119      	bne.n	8008d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e07f      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d003      	beq.n	8008d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d107      	bne.n	8008d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d7a:	4b3f      	ldr	r3, [pc, #252]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d109      	bne.n	8008d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e06f      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d8a:	4b3b      	ldr	r3, [pc, #236]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e067      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d9a:	4b37      	ldr	r3, [pc, #220]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f023 0203 	bic.w	r2, r3, #3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	4934      	ldr	r1, [pc, #208]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008dac:	f7fd fa10 	bl	80061d0 <HAL_GetTick>
 8008db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db2:	e00a      	b.n	8008dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008db4:	f7fd fa0c 	bl	80061d0 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e04f      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dca:	4b2b      	ldr	r3, [pc, #172]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 020c 	and.w	r2, r3, #12
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d1eb      	bne.n	8008db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ddc:	4b25      	ldr	r3, [pc, #148]	; (8008e74 <HAL_RCC_ClockConfig+0x1b8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d20c      	bcs.n	8008e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dea:	4b22      	ldr	r3, [pc, #136]	; (8008e74 <HAL_RCC_ClockConfig+0x1b8>)
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008df2:	4b20      	ldr	r3, [pc, #128]	; (8008e74 <HAL_RCC_ClockConfig+0x1b8>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0307 	and.w	r3, r3, #7
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d001      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e032      	b.n	8008e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d008      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e10:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	4916      	ldr	r1, [pc, #88]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d009      	beq.n	8008e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e2e:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	00db      	lsls	r3, r3, #3
 8008e3c:	490e      	ldr	r1, [pc, #56]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e42:	f000 f821 	bl	8008e88 <HAL_RCC_GetSysClockFreq>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <HAL_RCC_ClockConfig+0x1bc>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	091b      	lsrs	r3, r3, #4
 8008e4e:	f003 030f 	and.w	r3, r3, #15
 8008e52:	490a      	ldr	r1, [pc, #40]	; (8008e7c <HAL_RCC_ClockConfig+0x1c0>)
 8008e54:	5ccb      	ldrb	r3, [r1, r3]
 8008e56:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5a:	4a09      	ldr	r2, [pc, #36]	; (8008e80 <HAL_RCC_ClockConfig+0x1c4>)
 8008e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <HAL_RCC_ClockConfig+0x1c8>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fd f970 	bl	8006148 <HAL_InitTick>

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40023c00 	.word	0x40023c00
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	080f239c 	.word	0x080f239c
 8008e80:	2000006c 	.word	0x2000006c
 8008e84:	200000a8 	.word	0x200000a8

08008e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e8c:	b094      	sub	sp, #80	; 0x50
 8008e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	647b      	str	r3, [r7, #68]	; 0x44
 8008e94:	2300      	movs	r3, #0
 8008e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e98:	2300      	movs	r3, #0
 8008e9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ea0:	4b79      	ldr	r3, [pc, #484]	; (8009088 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 030c 	and.w	r3, r3, #12
 8008ea8:	2b08      	cmp	r3, #8
 8008eaa:	d00d      	beq.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	f200 80e1 	bhi.w	8009074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <HAL_RCC_GetSysClockFreq+0x34>
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d003      	beq.n	8008ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008eba:	e0db      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ebc:	4b73      	ldr	r3, [pc, #460]	; (800908c <HAL_RCC_GetSysClockFreq+0x204>)
 8008ebe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ec0:	e0db      	b.n	800907a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ec2:	4b73      	ldr	r3, [pc, #460]	; (8009090 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ec6:	e0d8      	b.n	800907a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ec8:	4b6f      	ldr	r3, [pc, #444]	; (8009088 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ed0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ed2:	4b6d      	ldr	r3, [pc, #436]	; (8009088 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d063      	beq.n	8008fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ede:	4b6a      	ldr	r3, [pc, #424]	; (8009088 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	099b      	lsrs	r3, r3, #6
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008efa:	4622      	mov	r2, r4
 8008efc:	462b      	mov	r3, r5
 8008efe:	f04f 0000 	mov.w	r0, #0
 8008f02:	f04f 0100 	mov.w	r1, #0
 8008f06:	0159      	lsls	r1, r3, #5
 8008f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f0c:	0150      	lsls	r0, r2, #5
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4621      	mov	r1, r4
 8008f14:	1a51      	subs	r1, r2, r1
 8008f16:	6139      	str	r1, [r7, #16]
 8008f18:	4629      	mov	r1, r5
 8008f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	f04f 0200 	mov.w	r2, #0
 8008f24:	f04f 0300 	mov.w	r3, #0
 8008f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	018b      	lsls	r3, r1, #6
 8008f30:	4651      	mov	r1, sl
 8008f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f36:	4651      	mov	r1, sl
 8008f38:	018a      	lsls	r2, r1, #6
 8008f3a:	4651      	mov	r1, sl
 8008f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8008f40:	4659      	mov	r1, fp
 8008f42:	eb63 0901 	sbc.w	r9, r3, r1
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f5a:	4690      	mov	r8, r2
 8008f5c:	4699      	mov	r9, r3
 8008f5e:	4623      	mov	r3, r4
 8008f60:	eb18 0303 	adds.w	r3, r8, r3
 8008f64:	60bb      	str	r3, [r7, #8]
 8008f66:	462b      	mov	r3, r5
 8008f68:	eb49 0303 	adc.w	r3, r9, r3
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	f04f 0300 	mov.w	r3, #0
 8008f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	024b      	lsls	r3, r1, #9
 8008f7e:	4621      	mov	r1, r4
 8008f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008f84:	4621      	mov	r1, r4
 8008f86:	024a      	lsls	r2, r1, #9
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f8e:	2200      	movs	r2, #0
 8008f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f98:	f7f7 fe6e 	bl	8000c78 <__aeabi_uldivmod>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa4:	e058      	b.n	8009058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fa6:	4b38      	ldr	r3, [pc, #224]	; (8009088 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	099b      	lsrs	r3, r3, #6
 8008fac:	2200      	movs	r2, #0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008fb6:	623b      	str	r3, [r7, #32]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
 8008fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	f04f 0000 	mov.w	r0, #0
 8008fc8:	f04f 0100 	mov.w	r1, #0
 8008fcc:	0159      	lsls	r1, r3, #5
 8008fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fd2:	0150      	lsls	r0, r2, #5
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4641      	mov	r1, r8
 8008fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8008fde:	4649      	mov	r1, r9
 8008fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8008ffc:	eb63 050b 	sbc.w	r5, r3, fp
 8009000:	f04f 0200 	mov.w	r2, #0
 8009004:	f04f 0300 	mov.w	r3, #0
 8009008:	00eb      	lsls	r3, r5, #3
 800900a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800900e:	00e2      	lsls	r2, r4, #3
 8009010:	4614      	mov	r4, r2
 8009012:	461d      	mov	r5, r3
 8009014:	4643      	mov	r3, r8
 8009016:	18e3      	adds	r3, r4, r3
 8009018:	603b      	str	r3, [r7, #0]
 800901a:	464b      	mov	r3, r9
 800901c:	eb45 0303 	adc.w	r3, r5, r3
 8009020:	607b      	str	r3, [r7, #4]
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800902e:	4629      	mov	r1, r5
 8009030:	028b      	lsls	r3, r1, #10
 8009032:	4621      	mov	r1, r4
 8009034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009038:	4621      	mov	r1, r4
 800903a:	028a      	lsls	r2, r1, #10
 800903c:	4610      	mov	r0, r2
 800903e:	4619      	mov	r1, r3
 8009040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009042:	2200      	movs	r2, #0
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	61fa      	str	r2, [r7, #28]
 8009048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800904c:	f7f7 fe14 	bl	8000c78 <__aeabi_uldivmod>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4613      	mov	r3, r2
 8009056:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009058:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <HAL_RCC_GetSysClockFreq+0x200>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	0c1b      	lsrs	r3, r3, #16
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	3301      	adds	r3, #1
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800906a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800906c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009072:	e002      	b.n	800907a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009074:	4b05      	ldr	r3, [pc, #20]	; (800908c <HAL_RCC_GetSysClockFreq+0x204>)
 8009076:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800907a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800907c:	4618      	mov	r0, r3
 800907e:	3750      	adds	r7, #80	; 0x50
 8009080:	46bd      	mov	sp, r7
 8009082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009086:	bf00      	nop
 8009088:	40023800 	.word	0x40023800
 800908c:	00f42400 	.word	0x00f42400
 8009090:	007a1200 	.word	0x007a1200

08009094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009098:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800909a:	681b      	ldr	r3, [r3, #0]
}
 800909c:	4618      	mov	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	2000006c 	.word	0x2000006c

080090ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80090b0:	f7ff fff0 	bl	8009094 <HAL_RCC_GetHCLKFreq>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	0a9b      	lsrs	r3, r3, #10
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	4903      	ldr	r1, [pc, #12]	; (80090d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090c2:	5ccb      	ldrb	r3, [r1, r3]
 80090c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40023800 	.word	0x40023800
 80090d0:	080f23ac 	.word	0x080f23ac

080090d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090d8:	f7ff ffdc 	bl	8009094 <HAL_RCC_GetHCLKFreq>
 80090dc:	4602      	mov	r2, r0
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	0b5b      	lsrs	r3, r3, #13
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	4903      	ldr	r1, [pc, #12]	; (80090f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090ea:	5ccb      	ldrb	r3, [r1, r3]
 80090ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40023800 	.word	0x40023800
 80090f8:	080f23ac 	.word	0x080f23ac

080090fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e07b      	b.n	8009206 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d108      	bne.n	8009128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800911e:	d009      	beq.n	8009134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	61da      	str	r2, [r3, #28]
 8009126:	e005      	b.n	8009134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7fb fc96 	bl	8004a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800916a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800917c:	431a      	orrs	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b8:	ea42 0103 	orr.w	r1, r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	0c1b      	lsrs	r3, r3, #16
 80091d2:	f003 0104 	and.w	r1, r3, #4
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	f003 0210 	and.w	r2, r3, #16
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b088      	sub	sp, #32
 8009212:	af00      	add	r7, sp, #0
 8009214:	60f8      	str	r0, [r7, #12]
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	603b      	str	r3, [r7, #0]
 800921a:	4613      	mov	r3, r2
 800921c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_SPI_Transmit+0x22>
 800922c:	2302      	movs	r3, #2
 800922e:	e126      	b.n	800947e <HAL_SPI_Transmit+0x270>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009238:	f7fc ffca 	bl	80061d0 <HAL_GetTick>
 800923c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b01      	cmp	r3, #1
 800924c:	d002      	beq.n	8009254 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800924e:	2302      	movs	r3, #2
 8009250:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009252:	e10b      	b.n	800946c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <HAL_SPI_Transmit+0x52>
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009264:	e102      	b.n	800946c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2203      	movs	r2, #3
 800926a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	88fa      	ldrh	r2, [r7, #6]
 800927e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	88fa      	ldrh	r2, [r7, #6]
 8009284:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ac:	d10f      	bne.n	80092ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d8:	2b40      	cmp	r3, #64	; 0x40
 80092da:	d007      	beq.n	80092ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092f4:	d14b      	bne.n	800938e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <HAL_SPI_Transmit+0xf6>
 80092fe:	8afb      	ldrh	r3, [r7, #22]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d13e      	bne.n	8009382 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	881a      	ldrh	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	1c9a      	adds	r2, r3, #2
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009328:	e02b      	b.n	8009382 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b02      	cmp	r3, #2
 8009336:	d112      	bne.n	800935e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	881a      	ldrh	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	1c9a      	adds	r2, r3, #2
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009352:	b29b      	uxth	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	b29a      	uxth	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	86da      	strh	r2, [r3, #54]	; 0x36
 800935c:	e011      	b.n	8009382 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800935e:	f7fc ff37 	bl	80061d0 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d803      	bhi.n	8009376 <HAL_SPI_Transmit+0x168>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009374:	d102      	bne.n	800937c <HAL_SPI_Transmit+0x16e>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d102      	bne.n	8009382 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800937c:	2303      	movs	r3, #3
 800937e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009380:	e074      	b.n	800946c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009386:	b29b      	uxth	r3, r3
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1ce      	bne.n	800932a <HAL_SPI_Transmit+0x11c>
 800938c:	e04c      	b.n	8009428 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <HAL_SPI_Transmit+0x18e>
 8009396:	8afb      	ldrh	r3, [r7, #22]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d140      	bne.n	800941e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	7812      	ldrb	r2, [r2, #0]
 80093a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80093c2:	e02c      	b.n	800941e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d113      	bne.n	80093fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	330c      	adds	r3, #12
 80093dc:	7812      	ldrb	r2, [r2, #0]
 80093de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80093f8:	e011      	b.n	800941e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093fa:	f7fc fee9 	bl	80061d0 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d803      	bhi.n	8009412 <HAL_SPI_Transmit+0x204>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009410:	d102      	bne.n	8009418 <HAL_SPI_Transmit+0x20a>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800941c:	e026      	b.n	800946c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009422:	b29b      	uxth	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1cd      	bne.n	80093c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fbcb 	bl	8009bc8 <SPI_EndRxTxTransaction>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2220      	movs	r2, #32
 800943c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009446:	2300      	movs	r3, #0
 8009448:	613b      	str	r3, [r7, #16]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	613b      	str	r3, [r7, #16]
 800945a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	77fb      	strb	r3, [r7, #31]
 8009468:	e000      	b.n	800946c <HAL_SPI_Transmit+0x25e>
  }

error:
 800946a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800947c:	7ffb      	ldrb	r3, [r7, #31]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b088      	sub	sp, #32
 800948a:	af02      	add	r7, sp, #8
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	603b      	str	r3, [r7, #0]
 8009492:	4613      	mov	r3, r2
 8009494:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094a2:	d112      	bne.n	80094ca <HAL_SPI_Receive+0x44>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10e      	bne.n	80094ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2204      	movs	r2, #4
 80094b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80094b4:	88fa      	ldrh	r2, [r7, #6]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	4613      	mov	r3, r2
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	68b9      	ldr	r1, [r7, #8]
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f8f1 	bl	80096a8 <HAL_SPI_TransmitReceive>
 80094c6:	4603      	mov	r3, r0
 80094c8:	e0ea      	b.n	80096a0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_SPI_Receive+0x52>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e0e3      	b.n	80096a0 <HAL_SPI_Receive+0x21a>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094e0:	f7fc fe76 	bl	80061d0 <HAL_GetTick>
 80094e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d002      	beq.n	80094f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80094f2:	2302      	movs	r3, #2
 80094f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094f6:	e0ca      	b.n	800968e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_SPI_Receive+0x7e>
 80094fe:	88fb      	ldrh	r3, [r7, #6]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d102      	bne.n	800950a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009508:	e0c1      	b.n	800968e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2204      	movs	r2, #4
 800950e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	88fa      	ldrh	r2, [r7, #6]
 8009522:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	88fa      	ldrh	r2, [r7, #6]
 8009528:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009550:	d10f      	bne.n	8009572 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009570:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957c:	2b40      	cmp	r3, #64	; 0x40
 800957e:	d007      	beq.n	8009590 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800958e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d162      	bne.n	800965e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009598:	e02e      	b.n	80095f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d115      	bne.n	80095d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f103 020c 	add.w	r2, r3, #12
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	7812      	ldrb	r2, [r2, #0]
 80095b6:	b2d2      	uxtb	r2, r2
 80095b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	3b01      	subs	r3, #1
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095d2:	e011      	b.n	80095f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095d4:	f7fc fdfc 	bl	80061d0 <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d803      	bhi.n	80095ec <HAL_SPI_Receive+0x166>
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ea:	d102      	bne.n	80095f2 <HAL_SPI_Receive+0x16c>
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d102      	bne.n	80095f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80095f6:	e04a      	b.n	800968e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1cb      	bne.n	800959a <HAL_SPI_Receive+0x114>
 8009602:	e031      	b.n	8009668 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b01      	cmp	r3, #1
 8009610:	d113      	bne.n	800963a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	b292      	uxth	r2, r2
 800961e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	1c9a      	adds	r2, r3, #2
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009638:	e011      	b.n	800965e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800963a:	f7fc fdc9 	bl	80061d0 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	429a      	cmp	r2, r3
 8009648:	d803      	bhi.n	8009652 <HAL_SPI_Receive+0x1cc>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d102      	bne.n	8009658 <HAL_SPI_Receive+0x1d2>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800965c:	e017      	b.n	800968e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009662:	b29b      	uxth	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1cd      	bne.n	8009604 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 fa45 	bl	8009afc <SPI_EndRxTransaction>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	75fb      	strb	r3, [r7, #23]
 800968a:	e000      	b.n	800968e <HAL_SPI_Receive+0x208>
  }

error :
 800968c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800969e:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08c      	sub	sp, #48	; 0x30
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096b6:	2301      	movs	r3, #1
 80096b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <HAL_SPI_TransmitReceive+0x26>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e18a      	b.n	80099e4 <HAL_SPI_TransmitReceive+0x33c>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096d6:	f7fc fd7b 	bl	80061d0 <HAL_GetTick>
 80096da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80096ec:	887b      	ldrh	r3, [r7, #2]
 80096ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80096f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d00f      	beq.n	8009718 <HAL_SPI_TransmitReceive+0x70>
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096fe:	d107      	bne.n	8009710 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <HAL_SPI_TransmitReceive+0x68>
 8009708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800970c:	2b04      	cmp	r3, #4
 800970e:	d003      	beq.n	8009718 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009710:	2302      	movs	r3, #2
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009716:	e15b      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <HAL_SPI_TransmitReceive+0x82>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <HAL_SPI_TransmitReceive+0x82>
 8009724:	887b      	ldrh	r3, [r7, #2]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d103      	bne.n	8009732 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009730:	e14e      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b04      	cmp	r3, #4
 800973c:	d003      	beq.n	8009746 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2205      	movs	r2, #5
 8009742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	887a      	ldrh	r2, [r7, #2]
 8009756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	887a      	ldrh	r2, [r7, #2]
 800975c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	887a      	ldrh	r2, [r7, #2]
 8009768:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	887a      	ldrh	r2, [r7, #2]
 800976e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009786:	2b40      	cmp	r3, #64	; 0x40
 8009788:	d007      	beq.n	800979a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097a2:	d178      	bne.n	8009896 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <HAL_SPI_TransmitReceive+0x10a>
 80097ac:	8b7b      	ldrh	r3, [r7, #26]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d166      	bne.n	8009880 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b6:	881a      	ldrh	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	1c9a      	adds	r2, r3, #2
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097d6:	e053      	b.n	8009880 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d11b      	bne.n	800981e <HAL_SPI_TransmitReceive+0x176>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d016      	beq.n	800981e <HAL_SPI_TransmitReceive+0x176>
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d113      	bne.n	800981e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	881a      	ldrh	r2, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009806:	1c9a      	adds	r2, r3, #2
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009810:	b29b      	uxth	r3, r3
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b01      	cmp	r3, #1
 800982a:	d119      	bne.n	8009860 <HAL_SPI_TransmitReceive+0x1b8>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d014      	beq.n	8009860 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	b292      	uxth	r2, r2
 8009842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	1c9a      	adds	r2, r3, #2
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009852:	b29b      	uxth	r3, r3
 8009854:	3b01      	subs	r3, #1
 8009856:	b29a      	uxth	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800985c:	2301      	movs	r3, #1
 800985e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009860:	f7fc fcb6 	bl	80061d0 <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800986c:	429a      	cmp	r2, r3
 800986e:	d807      	bhi.n	8009880 <HAL_SPI_TransmitReceive+0x1d8>
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009876:	d003      	beq.n	8009880 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800987e:	e0a7      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009884:	b29b      	uxth	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1a6      	bne.n	80097d8 <HAL_SPI_TransmitReceive+0x130>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800988e:	b29b      	uxth	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1a1      	bne.n	80097d8 <HAL_SPI_TransmitReceive+0x130>
 8009894:	e07c      	b.n	8009990 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <HAL_SPI_TransmitReceive+0x1fc>
 800989e:	8b7b      	ldrh	r3, [r7, #26]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d16b      	bne.n	800997c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ca:	e057      	b.n	800997c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f003 0302 	and.w	r3, r3, #2
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d11c      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x26c>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d017      	beq.n	8009914 <HAL_SPI_TransmitReceive+0x26c>
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d114      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	330c      	adds	r3, #12
 80098f4:	7812      	ldrb	r2, [r2, #0]
 80098f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b01      	cmp	r3, #1
 8009920:	d119      	bne.n	8009956 <HAL_SPI_TransmitReceive+0x2ae>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009926:	b29b      	uxth	r3, r3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d014      	beq.n	8009956 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	b29a      	uxth	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009952:	2301      	movs	r3, #1
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009956:	f7fc fc3b 	bl	80061d0 <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009962:	429a      	cmp	r2, r3
 8009964:	d803      	bhi.n	800996e <HAL_SPI_TransmitReceive+0x2c6>
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996c:	d102      	bne.n	8009974 <HAL_SPI_TransmitReceive+0x2cc>
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800997a:	e029      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1a2      	bne.n	80098cc <HAL_SPI_TransmitReceive+0x224>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d19d      	bne.n	80098cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f917 	bl	8009bc8 <SPI_EndRxTxTransaction>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d006      	beq.n	80099ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2220      	movs	r2, #32
 80099aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80099ac:	e010      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	617b      	str	r3, [r7, #20]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	617b      	str	r3, [r7, #20]
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	e000      	b.n	80099d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80099ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80099e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3730      	adds	r7, #48	; 0x30
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	4613      	mov	r3, r2
 80099fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099fc:	f7fc fbe8 	bl	80061d0 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4413      	add	r3, r2
 8009a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a0c:	f7fc fbe0 	bl	80061d0 <HAL_GetTick>
 8009a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a12:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	015b      	lsls	r3, r3, #5
 8009a18:	0d1b      	lsrs	r3, r3, #20
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	fb02 f303 	mul.w	r3, r2, r3
 8009a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a22:	e054      	b.n	8009ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2a:	d050      	beq.n	8009ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a2c:	f7fc fbd0 	bl	80061d0 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	69fa      	ldr	r2, [r7, #28]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d902      	bls.n	8009a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d13d      	bne.n	8009abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a5a:	d111      	bne.n	8009a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a64:	d004      	beq.n	8009a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a6e:	d107      	bne.n	8009a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a88:	d10f      	bne.n	8009aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e017      	b.n	8009aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	bf0c      	ite	eq
 8009ade:	2301      	moveq	r3, #1
 8009ae0:	2300      	movne	r3, #0
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	79fb      	ldrb	r3, [r7, #7]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d19b      	bne.n	8009a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3720      	adds	r7, #32
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	2000006c 	.word	0x2000006c

08009afc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b10:	d111      	bne.n	8009b36 <SPI_EndRxTransaction+0x3a>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b1a:	d004      	beq.n	8009b26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b24:	d107      	bne.n	8009b36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b3e:	d12a      	bne.n	8009b96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b48:	d012      	beq.n	8009b70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2200      	movs	r2, #0
 8009b52:	2180      	movs	r1, #128	; 0x80
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff ff49 	bl	80099ec <SPI_WaitFlagStateUntilTimeout>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d02d      	beq.n	8009bbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e026      	b.n	8009bbe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	2200      	movs	r2, #0
 8009b78:	2101      	movs	r1, #1
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f7ff ff36 	bl	80099ec <SPI_WaitFlagStateUntilTimeout>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01a      	beq.n	8009bbc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8a:	f043 0220 	orr.w	r2, r3, #32
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e013      	b.n	8009bbe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff ff23 	bl	80099ec <SPI_WaitFlagStateUntilTimeout>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d007      	beq.n	8009bbc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb0:	f043 0220 	orr.w	r2, r3, #32
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e000      	b.n	8009bbe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009bd4:	4b1b      	ldr	r3, [pc, #108]	; (8009c44 <SPI_EndRxTxTransaction+0x7c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1b      	ldr	r2, [pc, #108]	; (8009c48 <SPI_EndRxTxTransaction+0x80>)
 8009bda:	fba2 2303 	umull	r2, r3, r2, r3
 8009bde:	0d5b      	lsrs	r3, r3, #21
 8009be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009be4:	fb02 f303 	mul.w	r3, r2, r3
 8009be8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bf2:	d112      	bne.n	8009c1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2180      	movs	r1, #128	; 0x80
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff fef4 	bl	80099ec <SPI_WaitFlagStateUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d016      	beq.n	8009c38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0e:	f043 0220 	orr.w	r2, r3, #32
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e00f      	b.n	8009c3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00a      	beq.n	8009c36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d0f2      	beq.n	8009c1a <SPI_EndRxTxTransaction+0x52>
 8009c34:	e000      	b.n	8009c38 <SPI_EndRxTxTransaction+0x70>
        break;
 8009c36:	bf00      	nop
  }

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	2000006c 	.word	0x2000006c
 8009c48:	165e9f81 	.word	0x165e9f81

08009c4c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e034      	b.n	8009ccc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d106      	bne.n	8009c7c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7fb f8ae 	bl	8004dd8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3308      	adds	r3, #8
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f002 f84e 	bl	800bd28 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6818      	ldr	r0, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	461a      	mov	r2, r3
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	f002 f898 	bl	800bdcc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6858      	ldr	r0, [r3, #4]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca8:	6879      	ldr	r1, [r7, #4]
 8009caa:	f002 f8cd 	bl	800be48 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	6892      	ldr	r2, [r2, #8]
 8009cb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	6892      	ldr	r2, [r2, #8]
 8009cc2:	f041 0101 	orr.w	r1, r1, #1
 8009cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e041      	b.n	8009d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d106      	bne.n	8009d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7fa ff08 	bl	8004b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f000 fc1a 	bl	800a54c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d001      	beq.n	8009d8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e046      	b.n	8009e1a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a23      	ldr	r2, [pc, #140]	; (8009e28 <HAL_TIM_Base_Start+0xb4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d022      	beq.n	8009de4 <HAL_TIM_Base_Start+0x70>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da6:	d01d      	beq.n	8009de4 <HAL_TIM_Base_Start+0x70>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a1f      	ldr	r2, [pc, #124]	; (8009e2c <HAL_TIM_Base_Start+0xb8>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d018      	beq.n	8009de4 <HAL_TIM_Base_Start+0x70>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a1e      	ldr	r2, [pc, #120]	; (8009e30 <HAL_TIM_Base_Start+0xbc>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d013      	beq.n	8009de4 <HAL_TIM_Base_Start+0x70>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1c      	ldr	r2, [pc, #112]	; (8009e34 <HAL_TIM_Base_Start+0xc0>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d00e      	beq.n	8009de4 <HAL_TIM_Base_Start+0x70>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a1b      	ldr	r2, [pc, #108]	; (8009e38 <HAL_TIM_Base_Start+0xc4>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d009      	beq.n	8009de4 <HAL_TIM_Base_Start+0x70>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a19      	ldr	r2, [pc, #100]	; (8009e3c <HAL_TIM_Base_Start+0xc8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d004      	beq.n	8009de4 <HAL_TIM_Base_Start+0x70>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a18      	ldr	r2, [pc, #96]	; (8009e40 <HAL_TIM_Base_Start+0xcc>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d111      	bne.n	8009e08 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b06      	cmp	r3, #6
 8009df4:	d010      	beq.n	8009e18 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f042 0201 	orr.w	r2, r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e06:	e007      	b.n	8009e18 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f042 0201 	orr.w	r2, r2, #1
 8009e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	40010000 	.word	0x40010000
 8009e2c:	40000400 	.word	0x40000400
 8009e30:	40000800 	.word	0x40000800
 8009e34:	40000c00 	.word	0x40000c00
 8009e38:	40010400 	.word	0x40010400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40001800 	.word	0x40001800

08009e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d001      	beq.n	8009e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e04e      	b.n	8009efa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0201 	orr.w	r2, r2, #1
 8009e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a23      	ldr	r2, [pc, #140]	; (8009f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d022      	beq.n	8009ec4 <HAL_TIM_Base_Start_IT+0x80>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e86:	d01d      	beq.n	8009ec4 <HAL_TIM_Base_Start_IT+0x80>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a1f      	ldr	r2, [pc, #124]	; (8009f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d018      	beq.n	8009ec4 <HAL_TIM_Base_Start_IT+0x80>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a1e      	ldr	r2, [pc, #120]	; (8009f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d013      	beq.n	8009ec4 <HAL_TIM_Base_Start_IT+0x80>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1c      	ldr	r2, [pc, #112]	; (8009f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00e      	beq.n	8009ec4 <HAL_TIM_Base_Start_IT+0x80>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1b      	ldr	r2, [pc, #108]	; (8009f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d009      	beq.n	8009ec4 <HAL_TIM_Base_Start_IT+0x80>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a19      	ldr	r2, [pc, #100]	; (8009f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_TIM_Base_Start_IT+0x80>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a18      	ldr	r2, [pc, #96]	; (8009f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d111      	bne.n	8009ee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b06      	cmp	r3, #6
 8009ed4:	d010      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f042 0201 	orr.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee6:	e007      	b.n	8009ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f042 0201 	orr.w	r2, r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	40000400 	.word	0x40000400
 8009f10:	40000800 	.word	0x40000800
 8009f14:	40000c00 	.word	0x40000c00
 8009f18:	40010400 	.word	0x40010400
 8009f1c:	40014000 	.word	0x40014000
 8009f20:	40001800 	.word	0x40001800

08009f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e041      	b.n	8009fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d106      	bne.n	8009f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f839 	bl	8009fc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3304      	adds	r3, #4
 8009f60:	4619      	mov	r1, r3
 8009f62:	4610      	mov	r0, r2
 8009f64:	f000 faf2 	bl	800a54c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009fca:	bf00      	nop
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b082      	sub	sp, #8
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d122      	bne.n	800a032 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f003 0302 	and.w	r3, r3, #2
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d11b      	bne.n	800a032 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f06f 0202 	mvn.w	r2, #2
 800a002:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f003 0303 	and.w	r3, r3, #3
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fa78 	bl	800a50e <HAL_TIM_IC_CaptureCallback>
 800a01e:	e005      	b.n	800a02c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fa6a 	bl	800a4fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa7b 	bl	800a522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d122      	bne.n	800a086 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f003 0304 	and.w	r3, r3, #4
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	d11b      	bne.n	800a086 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f06f 0204 	mvn.w	r2, #4
 800a056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fa4e 	bl	800a50e <HAL_TIM_IC_CaptureCallback>
 800a072:	e005      	b.n	800a080 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fa40 	bl	800a4fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa51 	bl	800a522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b08      	cmp	r3, #8
 800a092:	d122      	bne.n	800a0da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b08      	cmp	r3, #8
 800a0a0:	d11b      	bne.n	800a0da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f06f 0208 	mvn.w	r2, #8
 800a0aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2204      	movs	r2, #4
 800a0b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fa24 	bl	800a50e <HAL_TIM_IC_CaptureCallback>
 800a0c6:	e005      	b.n	800a0d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fa16 	bl	800a4fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa27 	bl	800a522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f003 0310 	and.w	r3, r3, #16
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d122      	bne.n	800a12e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	f003 0310 	and.w	r3, r3, #16
 800a0f2:	2b10      	cmp	r3, #16
 800a0f4:	d11b      	bne.n	800a12e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f06f 0210 	mvn.w	r2, #16
 800a0fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2208      	movs	r2, #8
 800a104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	69db      	ldr	r3, [r3, #28]
 800a10c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f9fa 	bl	800a50e <HAL_TIM_IC_CaptureCallback>
 800a11a:	e005      	b.n	800a128 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f9ec 	bl	800a4fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f9fd 	bl	800a522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d10e      	bne.n	800a15a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f003 0301 	and.w	r3, r3, #1
 800a146:	2b01      	cmp	r3, #1
 800a148:	d107      	bne.n	800a15a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f06f 0201 	mvn.w	r2, #1
 800a152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7fa fadf 	bl	8004718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a164:	2b80      	cmp	r3, #128	; 0x80
 800a166:	d10e      	bne.n	800a186 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a172:	2b80      	cmp	r3, #128	; 0x80
 800a174:	d107      	bne.n	800a186 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 fd53 	bl	800ac2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a190:	2b40      	cmp	r3, #64	; 0x40
 800a192:	d10e      	bne.n	800a1b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19e:	2b40      	cmp	r3, #64	; 0x40
 800a1a0:	d107      	bne.n	800a1b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f9c2 	bl	800a536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	f003 0320 	and.w	r3, r3, #32
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	d10e      	bne.n	800a1de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f003 0320 	and.w	r3, r3, #32
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d107      	bne.n	800a1de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f06f 0220 	mvn.w	r2, #32
 800a1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fd1d 	bl	800ac18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a202:	2302      	movs	r3, #2
 800a204:	e0ae      	b.n	800a364 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	f200 809f 	bhi.w	800a354 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a216:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a251 	.word	0x0800a251
 800a220:	0800a355 	.word	0x0800a355
 800a224:	0800a355 	.word	0x0800a355
 800a228:	0800a355 	.word	0x0800a355
 800a22c:	0800a291 	.word	0x0800a291
 800a230:	0800a355 	.word	0x0800a355
 800a234:	0800a355 	.word	0x0800a355
 800a238:	0800a355 	.word	0x0800a355
 800a23c:	0800a2d3 	.word	0x0800a2d3
 800a240:	0800a355 	.word	0x0800a355
 800a244:	0800a355 	.word	0x0800a355
 800a248:	0800a355 	.word	0x0800a355
 800a24c:	0800a313 	.word	0x0800a313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	4618      	mov	r0, r3
 800a258:	f000 fa18 	bl	800a68c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f042 0208 	orr.w	r2, r2, #8
 800a26a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	699a      	ldr	r2, [r3, #24]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0204 	bic.w	r2, r2, #4
 800a27a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6999      	ldr	r1, [r3, #24]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	691a      	ldr	r2, [r3, #16]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	430a      	orrs	r2, r1
 800a28c:	619a      	str	r2, [r3, #24]
      break;
 800a28e:	e064      	b.n	800a35a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68b9      	ldr	r1, [r7, #8]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fa68 	bl	800a76c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	699a      	ldr	r2, [r3, #24]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	699a      	ldr	r2, [r3, #24]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6999      	ldr	r1, [r3, #24]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	021a      	lsls	r2, r3, #8
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	619a      	str	r2, [r3, #24]
      break;
 800a2d0:	e043      	b.n	800a35a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68b9      	ldr	r1, [r7, #8]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 fabd 	bl	800a858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69da      	ldr	r2, [r3, #28]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f042 0208 	orr.w	r2, r2, #8
 800a2ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	69da      	ldr	r2, [r3, #28]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 0204 	bic.w	r2, r2, #4
 800a2fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69d9      	ldr	r1, [r3, #28]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	61da      	str	r2, [r3, #28]
      break;
 800a310:	e023      	b.n	800a35a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68b9      	ldr	r1, [r7, #8]
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 fb11 	bl	800a940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	69da      	ldr	r2, [r3, #28]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a32c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	69da      	ldr	r2, [r3, #28]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a33c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	69d9      	ldr	r1, [r3, #28]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	021a      	lsls	r2, r3, #8
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	61da      	str	r2, [r3, #28]
      break;
 800a352:	e002      	b.n	800a35a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	75fb      	strb	r3, [r7, #23]
      break;
 800a358:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a362:	7dfb      	ldrb	r3, [r7, #23]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a380:	2b01      	cmp	r3, #1
 800a382:	d101      	bne.n	800a388 <HAL_TIM_ConfigClockSource+0x1c>
 800a384:	2302      	movs	r3, #2
 800a386:	e0b4      	b.n	800a4f2 <HAL_TIM_ConfigClockSource+0x186>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2202      	movs	r2, #2
 800a394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c0:	d03e      	beq.n	800a440 <HAL_TIM_ConfigClockSource+0xd4>
 800a3c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c6:	f200 8087 	bhi.w	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ce:	f000 8086 	beq.w	800a4de <HAL_TIM_ConfigClockSource+0x172>
 800a3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3d6:	d87f      	bhi.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3d8:	2b70      	cmp	r3, #112	; 0x70
 800a3da:	d01a      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0xa6>
 800a3dc:	2b70      	cmp	r3, #112	; 0x70
 800a3de:	d87b      	bhi.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3e0:	2b60      	cmp	r3, #96	; 0x60
 800a3e2:	d050      	beq.n	800a486 <HAL_TIM_ConfigClockSource+0x11a>
 800a3e4:	2b60      	cmp	r3, #96	; 0x60
 800a3e6:	d877      	bhi.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3e8:	2b50      	cmp	r3, #80	; 0x50
 800a3ea:	d03c      	beq.n	800a466 <HAL_TIM_ConfigClockSource+0xfa>
 800a3ec:	2b50      	cmp	r3, #80	; 0x50
 800a3ee:	d873      	bhi.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3f0:	2b40      	cmp	r3, #64	; 0x40
 800a3f2:	d058      	beq.n	800a4a6 <HAL_TIM_ConfigClockSource+0x13a>
 800a3f4:	2b40      	cmp	r3, #64	; 0x40
 800a3f6:	d86f      	bhi.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a3f8:	2b30      	cmp	r3, #48	; 0x30
 800a3fa:	d064      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a3fc:	2b30      	cmp	r3, #48	; 0x30
 800a3fe:	d86b      	bhi.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a400:	2b20      	cmp	r3, #32
 800a402:	d060      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a404:	2b20      	cmp	r3, #32
 800a406:	d867      	bhi.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d05c      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a40c:	2b10      	cmp	r3, #16
 800a40e:	d05a      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a410:	e062      	b.n	800a4d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6818      	ldr	r0, [r3, #0]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	6899      	ldr	r1, [r3, #8]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f000 fb5d 	bl	800aae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	609a      	str	r2, [r3, #8]
      break;
 800a43e:	e04f      	b.n	800a4e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6818      	ldr	r0, [r3, #0]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	6899      	ldr	r1, [r3, #8]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f000 fb46 	bl	800aae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689a      	ldr	r2, [r3, #8]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a462:	609a      	str	r2, [r3, #8]
      break;
 800a464:	e03c      	b.n	800a4e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	6859      	ldr	r1, [r3, #4]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	461a      	mov	r2, r3
 800a474:	f000 faba 	bl	800a9ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2150      	movs	r1, #80	; 0x50
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 fb13 	bl	800aaaa <TIM_ITRx_SetConfig>
      break;
 800a484:	e02c      	b.n	800a4e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	6859      	ldr	r1, [r3, #4]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	461a      	mov	r2, r3
 800a494:	f000 fad9 	bl	800aa4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2160      	movs	r1, #96	; 0x60
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fb03 	bl	800aaaa <TIM_ITRx_SetConfig>
      break;
 800a4a4:	e01c      	b.n	800a4e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	6859      	ldr	r1, [r3, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f000 fa9a 	bl	800a9ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2140      	movs	r1, #64	; 0x40
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 faf3 	bl	800aaaa <TIM_ITRx_SetConfig>
      break;
 800a4c4:	e00c      	b.n	800a4e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	4610      	mov	r0, r2
 800a4d2:	f000 faea 	bl	800aaaa <TIM_ITRx_SetConfig>
      break;
 800a4d6:	e003      	b.n	800a4e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	73fb      	strb	r3, [r7, #15]
      break;
 800a4dc:	e000      	b.n	800a4e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a40      	ldr	r2, [pc, #256]	; (800a660 <TIM_Base_SetConfig+0x114>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d013      	beq.n	800a58c <TIM_Base_SetConfig+0x40>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a56a:	d00f      	beq.n	800a58c <TIM_Base_SetConfig+0x40>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a3d      	ldr	r2, [pc, #244]	; (800a664 <TIM_Base_SetConfig+0x118>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d00b      	beq.n	800a58c <TIM_Base_SetConfig+0x40>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a3c      	ldr	r2, [pc, #240]	; (800a668 <TIM_Base_SetConfig+0x11c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d007      	beq.n	800a58c <TIM_Base_SetConfig+0x40>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a3b      	ldr	r2, [pc, #236]	; (800a66c <TIM_Base_SetConfig+0x120>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d003      	beq.n	800a58c <TIM_Base_SetConfig+0x40>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a3a      	ldr	r2, [pc, #232]	; (800a670 <TIM_Base_SetConfig+0x124>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d108      	bne.n	800a59e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a2f      	ldr	r2, [pc, #188]	; (800a660 <TIM_Base_SetConfig+0x114>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d02b      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ac:	d027      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a2c      	ldr	r2, [pc, #176]	; (800a664 <TIM_Base_SetConfig+0x118>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d023      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a2b      	ldr	r2, [pc, #172]	; (800a668 <TIM_Base_SetConfig+0x11c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d01f      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a2a      	ldr	r2, [pc, #168]	; (800a66c <TIM_Base_SetConfig+0x120>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d01b      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a29      	ldr	r2, [pc, #164]	; (800a670 <TIM_Base_SetConfig+0x124>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d017      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a28      	ldr	r2, [pc, #160]	; (800a674 <TIM_Base_SetConfig+0x128>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d013      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a27      	ldr	r2, [pc, #156]	; (800a678 <TIM_Base_SetConfig+0x12c>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d00f      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a26      	ldr	r2, [pc, #152]	; (800a67c <TIM_Base_SetConfig+0x130>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d00b      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a25      	ldr	r2, [pc, #148]	; (800a680 <TIM_Base_SetConfig+0x134>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d007      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a24      	ldr	r2, [pc, #144]	; (800a684 <TIM_Base_SetConfig+0x138>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d003      	beq.n	800a5fe <TIM_Base_SetConfig+0xb2>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a23      	ldr	r2, [pc, #140]	; (800a688 <TIM_Base_SetConfig+0x13c>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d108      	bne.n	800a610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a0a      	ldr	r2, [pc, #40]	; (800a660 <TIM_Base_SetConfig+0x114>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d003      	beq.n	800a644 <TIM_Base_SetConfig+0xf8>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a0c      	ldr	r2, [pc, #48]	; (800a670 <TIM_Base_SetConfig+0x124>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d103      	bne.n	800a64c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	615a      	str	r2, [r3, #20]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	40010000 	.word	0x40010000
 800a664:	40000400 	.word	0x40000400
 800a668:	40000800 	.word	0x40000800
 800a66c:	40000c00 	.word	0x40000c00
 800a670:	40010400 	.word	0x40010400
 800a674:	40014000 	.word	0x40014000
 800a678:	40014400 	.word	0x40014400
 800a67c:	40014800 	.word	0x40014800
 800a680:	40001800 	.word	0x40001800
 800a684:	40001c00 	.word	0x40001c00
 800a688:	40002000 	.word	0x40002000

0800a68c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	f023 0201 	bic.w	r2, r3, #1
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f023 0303 	bic.w	r3, r3, #3
 800a6c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f023 0302 	bic.w	r3, r3, #2
 800a6d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a20      	ldr	r2, [pc, #128]	; (800a764 <TIM_OC1_SetConfig+0xd8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d003      	beq.n	800a6f0 <TIM_OC1_SetConfig+0x64>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a1f      	ldr	r2, [pc, #124]	; (800a768 <TIM_OC1_SetConfig+0xdc>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d10c      	bne.n	800a70a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f023 0308 	bic.w	r3, r3, #8
 800a6f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f023 0304 	bic.w	r3, r3, #4
 800a708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a15      	ldr	r2, [pc, #84]	; (800a764 <TIM_OC1_SetConfig+0xd8>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d003      	beq.n	800a71a <TIM_OC1_SetConfig+0x8e>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a14      	ldr	r2, [pc, #80]	; (800a768 <TIM_OC1_SetConfig+0xdc>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d111      	bne.n	800a73e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	695b      	ldr	r3, [r3, #20]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	4313      	orrs	r3, r2
 800a732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	621a      	str	r2, [r3, #32]
}
 800a758:	bf00      	nop
 800a75a:	371c      	adds	r7, #28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	40010000 	.word	0x40010000
 800a768:	40010400 	.word	0x40010400

0800a76c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f023 0210 	bic.w	r2, r3, #16
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f023 0320 	bic.w	r3, r3, #32
 800a7b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	011b      	lsls	r3, r3, #4
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a22      	ldr	r2, [pc, #136]	; (800a850 <TIM_OC2_SetConfig+0xe4>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d003      	beq.n	800a7d4 <TIM_OC2_SetConfig+0x68>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a21      	ldr	r2, [pc, #132]	; (800a854 <TIM_OC2_SetConfig+0xe8>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d10d      	bne.n	800a7f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	011b      	lsls	r3, r3, #4
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a17      	ldr	r2, [pc, #92]	; (800a850 <TIM_OC2_SetConfig+0xe4>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d003      	beq.n	800a800 <TIM_OC2_SetConfig+0x94>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a16      	ldr	r2, [pc, #88]	; (800a854 <TIM_OC2_SetConfig+0xe8>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d113      	bne.n	800a828 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a80e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	4313      	orrs	r3, r2
 800a81a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	4313      	orrs	r3, r2
 800a826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	685a      	ldr	r2, [r3, #4]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	621a      	str	r2, [r3, #32]
}
 800a842:	bf00      	nop
 800a844:	371c      	adds	r7, #28
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	40010000 	.word	0x40010000
 800a854:	40010400 	.word	0x40010400

0800a858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 0303 	bic.w	r3, r3, #3
 800a88e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a21      	ldr	r2, [pc, #132]	; (800a938 <TIM_OC3_SetConfig+0xe0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d003      	beq.n	800a8be <TIM_OC3_SetConfig+0x66>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a20      	ldr	r2, [pc, #128]	; (800a93c <TIM_OC3_SetConfig+0xe4>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d10d      	bne.n	800a8da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a16      	ldr	r2, [pc, #88]	; (800a938 <TIM_OC3_SetConfig+0xe0>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d003      	beq.n	800a8ea <TIM_OC3_SetConfig+0x92>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a15      	ldr	r2, [pc, #84]	; (800a93c <TIM_OC3_SetConfig+0xe4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d113      	bne.n	800a912 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	011b      	lsls	r3, r3, #4
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	4313      	orrs	r3, r2
 800a904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4313      	orrs	r3, r2
 800a910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	621a      	str	r2, [r3, #32]
}
 800a92c:	bf00      	nop
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	40010000 	.word	0x40010000
 800a93c:	40010400 	.word	0x40010400

0800a940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	69db      	ldr	r3, [r3, #28]
 800a966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	021b      	lsls	r3, r3, #8
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	4313      	orrs	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a98a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	031b      	lsls	r3, r3, #12
 800a992:	693a      	ldr	r2, [r7, #16]
 800a994:	4313      	orrs	r3, r2
 800a996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a12      	ldr	r2, [pc, #72]	; (800a9e4 <TIM_OC4_SetConfig+0xa4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d003      	beq.n	800a9a8 <TIM_OC4_SetConfig+0x68>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a11      	ldr	r2, [pc, #68]	; (800a9e8 <TIM_OC4_SetConfig+0xa8>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d109      	bne.n	800a9bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	019b      	lsls	r3, r3, #6
 800a9b6:	697a      	ldr	r2, [r7, #20]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40010000 	.word	0x40010000
 800a9e8:	40010400 	.word	0x40010400

0800a9ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b087      	sub	sp, #28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	f023 0201 	bic.w	r2, r3, #1
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f023 030a 	bic.w	r3, r3, #10
 800aa28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	621a      	str	r2, [r3, #32]
}
 800aa3e:	bf00      	nop
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b087      	sub	sp, #28
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	f023 0210 	bic.w	r2, r3, #16
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	031b      	lsls	r3, r3, #12
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	011b      	lsls	r3, r3, #4
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	621a      	str	r2, [r3, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b085      	sub	sp, #20
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	f043 0307 	orr.w	r3, r3, #7
 800aacc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	609a      	str	r2, [r3, #8]
}
 800aad4:	bf00      	nop
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aafa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	021a      	lsls	r2, r3, #8
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	431a      	orrs	r2, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	697a      	ldr	r2, [r7, #20]
 800ab12:	609a      	str	r2, [r3, #8]
}
 800ab14:	bf00      	nop
 800ab16:	371c      	adds	r7, #28
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d101      	bne.n	800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab34:	2302      	movs	r3, #2
 800ab36:	e05a      	b.n	800abee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2202      	movs	r2, #2
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a21      	ldr	r2, [pc, #132]	; (800abfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d022      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab84:	d01d      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a1d      	ldr	r2, [pc, #116]	; (800ac00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d018      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a1b      	ldr	r2, [pc, #108]	; (800ac04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d013      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a1a      	ldr	r2, [pc, #104]	; (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d00e      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a18      	ldr	r2, [pc, #96]	; (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d009      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a17      	ldr	r2, [pc, #92]	; (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d004      	beq.n	800abc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a15      	ldr	r2, [pc, #84]	; (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d10c      	bne.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3714      	adds	r7, #20
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40010000 	.word	0x40010000
 800ac00:	40000400 	.word	0x40000400
 800ac04:	40000800 	.word	0x40000800
 800ac08:	40000c00 	.word	0x40000c00
 800ac0c:	40010400 	.word	0x40010400
 800ac10:	40014000 	.word	0x40014000
 800ac14:	40001800 	.word	0x40001800

0800ac18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d101      	bne.n	800ac52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e03f      	b.n	800acd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d106      	bne.n	800ac6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7f9 ffde 	bl	8004c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2224      	movs	r2, #36	; 0x24
 800ac70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fddb 	bl	800b840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	695a      	ldr	r2, [r3, #20]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2220      	movs	r2, #32
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2220      	movs	r2, #32
 800accc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b08a      	sub	sp, #40	; 0x28
 800acde:	af02      	add	r7, sp, #8
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	4613      	mov	r3, r2
 800ace8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b20      	cmp	r3, #32
 800acf8:	d17c      	bne.n	800adf4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <HAL_UART_Transmit+0x2c>
 800ad00:	88fb      	ldrh	r3, [r7, #6]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e075      	b.n	800adf6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_UART_Transmit+0x3e>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e06e      	b.n	800adf6 <HAL_UART_Transmit+0x11c>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2221      	movs	r2, #33	; 0x21
 800ad2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad2e:	f7fb fa4f 	bl	80061d0 <HAL_GetTick>
 800ad32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	88fa      	ldrh	r2, [r7, #6]
 800ad38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	88fa      	ldrh	r2, [r7, #6]
 800ad3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad48:	d108      	bne.n	800ad5c <HAL_UART_Transmit+0x82>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d104      	bne.n	800ad5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	61bb      	str	r3, [r7, #24]
 800ad5a:	e003      	b.n	800ad64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ad6c:	e02a      	b.n	800adc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2200      	movs	r2, #0
 800ad76:	2180      	movs	r1, #128	; 0x80
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 fb1f 	bl	800b3bc <UART_WaitOnFlagUntilTimeout>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e036      	b.n	800adf6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10b      	bne.n	800ada6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	3302      	adds	r3, #2
 800ada2:	61bb      	str	r3, [r7, #24]
 800ada4:	e007      	b.n	800adb6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	781a      	ldrb	r2, [r3, #0]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	3301      	adds	r3, #1
 800adb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3b01      	subs	r3, #1
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adc8:	b29b      	uxth	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1cf      	bne.n	800ad6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2200      	movs	r2, #0
 800add6:	2140      	movs	r1, #64	; 0x40
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 faef 	bl	800b3bc <UART_WaitOnFlagUntilTimeout>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e006      	b.n	800adf6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2220      	movs	r2, #32
 800adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	e000      	b.n	800adf6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800adf4:	2302      	movs	r3, #2
  }
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3720      	adds	r7, #32
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b084      	sub	sp, #16
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	60b9      	str	r1, [r7, #8]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	2b20      	cmp	r3, #32
 800ae16:	d11d      	bne.n	800ae54 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <HAL_UART_Receive_IT+0x26>
 800ae1e:	88fb      	ldrh	r3, [r7, #6]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e016      	b.n	800ae56 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d101      	bne.n	800ae36 <HAL_UART_Receive_IT+0x38>
 800ae32:	2302      	movs	r3, #2
 800ae34:	e00f      	b.n	800ae56 <HAL_UART_Receive_IT+0x58>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae44:	88fb      	ldrh	r3, [r7, #6]
 800ae46:	461a      	mov	r2, r3
 800ae48:	68b9      	ldr	r1, [r7, #8]
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 fb24 	bl	800b498 <UART_Start_Receive_IT>
 800ae50:	4603      	mov	r3, r0
 800ae52:	e000      	b.n	800ae56 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800ae54:	2302      	movs	r3, #2
  }
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b0ba      	sub	sp, #232	; 0xe8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae96:	f003 030f 	and.w	r3, r3, #15
 800ae9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10f      	bne.n	800aec6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeaa:	f003 0320 	and.w	r3, r3, #32
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d009      	beq.n	800aec6 <HAL_UART_IRQHandler+0x66>
 800aeb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fc03 	bl	800b6ca <UART_Receive_IT>
      return;
 800aec4:	e256      	b.n	800b374 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 80de 	beq.w	800b08c <HAL_UART_IRQHandler+0x22c>
 800aed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aee0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 80d1 	beq.w	800b08c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aeea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <HAL_UART_IRQHandler+0xae>
 800aef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aefa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af06:	f043 0201 	orr.w	r2, r3, #1
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <HAL_UART_IRQHandler+0xd2>
 800af1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2a:	f043 0202 	orr.w	r2, r3, #2
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00b      	beq.n	800af56 <HAL_UART_IRQHandler+0xf6>
 800af3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d005      	beq.n	800af56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4e:	f043 0204 	orr.w	r2, r3, #4
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5a:	f003 0308 	and.w	r3, r3, #8
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d011      	beq.n	800af86 <HAL_UART_IRQHandler+0x126>
 800af62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af66:	f003 0320 	and.w	r3, r3, #32
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d105      	bne.n	800af7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	f043 0208 	orr.w	r2, r3, #8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 81ed 	beq.w	800b36a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af94:	f003 0320 	and.w	r3, r3, #32
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d008      	beq.n	800afae <HAL_UART_IRQHandler+0x14e>
 800af9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afa0:	f003 0320 	and.w	r3, r3, #32
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fb8e 	bl	800b6ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb8:	2b40      	cmp	r3, #64	; 0x40
 800afba:	bf0c      	ite	eq
 800afbc:	2301      	moveq	r3, #1
 800afbe:	2300      	movne	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afca:	f003 0308 	and.w	r3, r3, #8
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d103      	bne.n	800afda <HAL_UART_IRQHandler+0x17a>
 800afd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d04f      	beq.n	800b07a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fa96 	bl	800b50c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afea:	2b40      	cmp	r3, #64	; 0x40
 800afec:	d141      	bne.n	800b072 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3314      	adds	r3, #20
 800aff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b004:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b00c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	3314      	adds	r3, #20
 800b016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b01a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b01e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b02a:	e841 2300 	strex	r3, r2, [r1]
 800b02e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1d9      	bne.n	800afee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d013      	beq.n	800b06a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b046:	4a7d      	ldr	r2, [pc, #500]	; (800b23c <HAL_UART_IRQHandler+0x3dc>)
 800b048:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fb ff88 	bl	8006f64 <HAL_DMA_Abort_IT>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d016      	beq.n	800b088 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b068:	e00e      	b.n	800b088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f990 	bl	800b390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b070:	e00a      	b.n	800b088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f98c 	bl	800b390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b078:	e006      	b.n	800b088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f988 	bl	800b390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b086:	e170      	b.n	800b36a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b088:	bf00      	nop
    return;
 800b08a:	e16e      	b.n	800b36a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b090:	2b01      	cmp	r3, #1
 800b092:	f040 814a 	bne.w	800b32a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09a:	f003 0310 	and.w	r3, r3, #16
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8143 	beq.w	800b32a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a8:	f003 0310 	and.w	r3, r3, #16
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 813c 	beq.w	800b32a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	60bb      	str	r3, [r7, #8]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	60bb      	str	r3, [r7, #8]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	60bb      	str	r3, [r7, #8]
 800b0c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d2:	2b40      	cmp	r3, #64	; 0x40
 800b0d4:	f040 80b4 	bne.w	800b240 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 8140 	beq.w	800b36e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	f080 8139 	bcs.w	800b36e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b102:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b10e:	f000 8088 	beq.w	800b222 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	330c      	adds	r3, #12
 800b118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b120:	e853 3f00 	ldrex	r3, [r3]
 800b124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b12c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	330c      	adds	r3, #12
 800b13a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b13e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b146:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b14a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1d9      	bne.n	800b112 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3314      	adds	r3, #20
 800b164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b16e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b170:	f023 0301 	bic.w	r3, r3, #1
 800b174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3314      	adds	r3, #20
 800b17e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b182:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b186:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b18a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e1      	bne.n	800b15e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3314      	adds	r3, #20
 800b1a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b1aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3314      	adds	r3, #20
 800b1ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b1be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b1c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b1c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b1cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e3      	bne.n	800b19a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	330c      	adds	r3, #12
 800b1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ea:	e853 3f00 	ldrex	r3, [r3]
 800b1ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f2:	f023 0310 	bic.w	r3, r3, #16
 800b1f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	330c      	adds	r3, #12
 800b200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b204:	65ba      	str	r2, [r7, #88]	; 0x58
 800b206:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b20a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b20c:	e841 2300 	strex	r3, r2, [r1]
 800b210:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e3      	bne.n	800b1e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fb fe31 	bl	8006e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	b29b      	uxth	r3, r3
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f8b6 	bl	800b3a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b238:	e099      	b.n	800b36e <HAL_UART_IRQHandler+0x50e>
 800b23a:	bf00      	nop
 800b23c:	0800b5d3 	.word	0x0800b5d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b248:	b29b      	uxth	r3, r3
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b254:	b29b      	uxth	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 808b 	beq.w	800b372 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b25c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 8086 	beq.w	800b372 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	330c      	adds	r3, #12
 800b26c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b27c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	330c      	adds	r3, #12
 800b286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b28a:	647a      	str	r2, [r7, #68]	; 0x44
 800b28c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b292:	e841 2300 	strex	r3, r2, [r1]
 800b296:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1e3      	bne.n	800b266 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3314      	adds	r3, #20
 800b2a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	e853 3f00 	ldrex	r3, [r3]
 800b2ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b2ae:	6a3b      	ldr	r3, [r7, #32]
 800b2b0:	f023 0301 	bic.w	r3, r3, #1
 800b2b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3314      	adds	r3, #20
 800b2be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b2c2:	633a      	str	r2, [r7, #48]	; 0x30
 800b2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e3      	bne.n	800b29e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2220      	movs	r2, #32
 800b2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	330c      	adds	r3, #12
 800b2ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f023 0310 	bic.w	r3, r3, #16
 800b2fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	330c      	adds	r3, #12
 800b304:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b308:	61fa      	str	r2, [r7, #28]
 800b30a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30c:	69b9      	ldr	r1, [r7, #24]
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	e841 2300 	strex	r3, r2, [r1]
 800b314:	617b      	str	r3, [r7, #20]
   return(result);
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1e3      	bne.n	800b2e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b31c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f83e 	bl	800b3a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b328:	e023      	b.n	800b372 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b332:	2b00      	cmp	r3, #0
 800b334:	d009      	beq.n	800b34a <HAL_UART_IRQHandler+0x4ea>
 800b336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 f959 	bl	800b5fa <UART_Transmit_IT>
    return;
 800b348:	e014      	b.n	800b374 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00e      	beq.n	800b374 <HAL_UART_IRQHandler+0x514>
 800b356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d008      	beq.n	800b374 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f999 	bl	800b69a <UART_EndTransmit_IT>
    return;
 800b368:	e004      	b.n	800b374 <HAL_UART_IRQHandler+0x514>
    return;
 800b36a:	bf00      	nop
 800b36c:	e002      	b.n	800b374 <HAL_UART_IRQHandler+0x514>
      return;
 800b36e:	bf00      	nop
 800b370:	e000      	b.n	800b374 <HAL_UART_IRQHandler+0x514>
      return;
 800b372:	bf00      	nop
  }
}
 800b374:	37e8      	adds	r7, #232	; 0xe8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop

0800b37c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b090      	sub	sp, #64	; 0x40
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	603b      	str	r3, [r7, #0]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3cc:	e050      	b.n	800b470 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d4:	d04c      	beq.n	800b470 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b3d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d007      	beq.n	800b3ec <UART_WaitOnFlagUntilTimeout+0x30>
 800b3dc:	f7fa fef8 	bl	80061d0 <HAL_GetTick>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d241      	bcs.n	800b470 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b402:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	330c      	adds	r3, #12
 800b40a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b40c:	637a      	str	r2, [r7, #52]	; 0x34
 800b40e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e5      	bne.n	800b3ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3314      	adds	r3, #20
 800b426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	613b      	str	r3, [r7, #16]
   return(result);
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	f023 0301 	bic.w	r3, r3, #1
 800b436:	63bb      	str	r3, [r7, #56]	; 0x38
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3314      	adds	r3, #20
 800b43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b440:	623a      	str	r2, [r7, #32]
 800b442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	69f9      	ldr	r1, [r7, #28]
 800b446:	6a3a      	ldr	r2, [r7, #32]
 800b448:	e841 2300 	strex	r3, r2, [r1]
 800b44c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e5      	bne.n	800b420 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2220      	movs	r2, #32
 800b458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2220      	movs	r2, #32
 800b460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e00f      	b.n	800b490 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	4013      	ands	r3, r2
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	bf0c      	ite	eq
 800b480:	2301      	moveq	r3, #1
 800b482:	2300      	movne	r3, #0
 800b484:	b2db      	uxtb	r3, r3
 800b486:	461a      	mov	r2, r3
 800b488:	79fb      	ldrb	r3, [r7, #7]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d09f      	beq.n	800b3ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3740      	adds	r7, #64	; 0x40
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	88fa      	ldrh	r2, [r7, #6]
 800b4b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	88fa      	ldrh	r2, [r7, #6]
 800b4b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2222      	movs	r2, #34	; 0x22
 800b4c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68da      	ldr	r2, [r3, #12]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	695a      	ldr	r2, [r3, #20]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0201 	orr.w	r2, r2, #1
 800b4ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68da      	ldr	r2, [r3, #12]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f042 0220 	orr.w	r2, r2, #32
 800b4fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b095      	sub	sp, #84	; 0x54
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	330c      	adds	r3, #12
 800b51a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51e:	e853 3f00 	ldrex	r3, [r3]
 800b522:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b52a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	330c      	adds	r3, #12
 800b532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b534:	643a      	str	r2, [r7, #64]	; 0x40
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b538:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b53a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b53c:	e841 2300 	strex	r3, r2, [r1]
 800b540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1e5      	bne.n	800b514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3314      	adds	r3, #20
 800b54e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	61fb      	str	r3, [r7, #28]
   return(result);
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	f023 0301 	bic.w	r3, r3, #1
 800b55e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3314      	adds	r3, #20
 800b566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b568:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b56a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b56e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e5      	bne.n	800b548 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b580:	2b01      	cmp	r3, #1
 800b582:	d119      	bne.n	800b5b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	330c      	adds	r3, #12
 800b58a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	e853 3f00 	ldrex	r3, [r3]
 800b592:	60bb      	str	r3, [r7, #8]
   return(result);
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f023 0310 	bic.w	r3, r3, #16
 800b59a:	647b      	str	r3, [r7, #68]	; 0x44
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	330c      	adds	r3, #12
 800b5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5a4:	61ba      	str	r2, [r7, #24]
 800b5a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a8:	6979      	ldr	r1, [r7, #20]
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	e841 2300 	strex	r3, r2, [r1]
 800b5b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e5      	bne.n	800b584 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b5c6:	bf00      	nop
 800b5c8:	3754      	adds	r7, #84	; 0x54
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b084      	sub	sp, #16
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7ff fecf 	bl	800b390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b085      	sub	sp, #20
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	2b21      	cmp	r3, #33	; 0x21
 800b60c:	d13e      	bne.n	800b68c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b616:	d114      	bne.n	800b642 <UART_Transmit_IT+0x48>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d110      	bne.n	800b642 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b634:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	1c9a      	adds	r2, r3, #2
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	621a      	str	r2, [r3, #32]
 800b640:	e008      	b.n	800b654 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	1c59      	adds	r1, r3, #1
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	6211      	str	r1, [r2, #32]
 800b64c:	781a      	ldrb	r2, [r3, #0]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b658:	b29b      	uxth	r3, r3
 800b65a:	3b01      	subs	r3, #1
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	4619      	mov	r1, r3
 800b662:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10f      	bne.n	800b688 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b676:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b686:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	e000      	b.n	800b68e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b68c:	2302      	movs	r3, #2
  }
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2220      	movs	r2, #32
 800b6b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff fe5e 	bl	800b37c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b08c      	sub	sp, #48	; 0x30
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b22      	cmp	r3, #34	; 0x22
 800b6dc:	f040 80ab 	bne.w	800b836 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e8:	d117      	bne.n	800b71a <UART_Receive_IT+0x50>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d113      	bne.n	800b71a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	b29b      	uxth	r3, r3
 800b704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b708:	b29a      	uxth	r2, r3
 800b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b712:	1c9a      	adds	r2, r3, #2
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	629a      	str	r2, [r3, #40]	; 0x28
 800b718:	e026      	b.n	800b768 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b720:	2300      	movs	r3, #0
 800b722:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b72c:	d007      	beq.n	800b73e <UART_Receive_IT+0x74>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <UART_Receive_IT+0x82>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	b2da      	uxtb	r2, r3
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	e008      	b.n	800b75e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	3b01      	subs	r3, #1
 800b770:	b29b      	uxth	r3, r3
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	4619      	mov	r1, r3
 800b776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d15a      	bne.n	800b832 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68da      	ldr	r2, [r3, #12]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f022 0220 	bic.w	r2, r2, #32
 800b78a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68da      	ldr	r2, [r3, #12]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b79a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	695a      	ldr	r2, [r3, #20]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f022 0201 	bic.w	r2, r2, #1
 800b7aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d135      	bne.n	800b828 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	e853 3f00 	ldrex	r3, [r3]
 800b7d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f023 0310 	bic.w	r3, r3, #16
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	330c      	adds	r3, #12
 800b7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e2:	623a      	str	r2, [r7, #32]
 800b7e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e6:	69f9      	ldr	r1, [r7, #28]
 800b7e8:	6a3a      	ldr	r2, [r7, #32]
 800b7ea:	e841 2300 	strex	r3, r2, [r1]
 800b7ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1e5      	bne.n	800b7c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0310 	and.w	r3, r3, #16
 800b800:	2b10      	cmp	r3, #16
 800b802:	d10a      	bne.n	800b81a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7ff fdbf 	bl	800b3a4 <HAL_UARTEx_RxEventCallback>
 800b826:	e002      	b.n	800b82e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7fa fbcf 	bl	8005fcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	e002      	b.n	800b838 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	e000      	b.n	800b838 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b836:	2302      	movs	r3, #2
  }
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3730      	adds	r7, #48	; 0x30
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b844:	b0c0      	sub	sp, #256	; 0x100
 800b846:	af00      	add	r7, sp, #0
 800b848:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b85c:	68d9      	ldr	r1, [r3, #12]
 800b85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	ea40 0301 	orr.w	r3, r0, r1
 800b868:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b86e:	689a      	ldr	r2, [r3, #8]
 800b870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	431a      	orrs	r2, r3
 800b878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	431a      	orrs	r2, r3
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	4313      	orrs	r3, r2
 800b888:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b898:	f021 010c 	bic.w	r1, r1, #12
 800b89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8a6:	430b      	orrs	r3, r1
 800b8a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b8b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ba:	6999      	ldr	r1, [r3, #24]
 800b8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	ea40 0301 	orr.w	r3, r0, r1
 800b8c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	4b8f      	ldr	r3, [pc, #572]	; (800bb0c <UART_SetConfig+0x2cc>)
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d005      	beq.n	800b8e0 <UART_SetConfig+0xa0>
 800b8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b8d      	ldr	r3, [pc, #564]	; (800bb10 <UART_SetConfig+0x2d0>)
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d104      	bne.n	800b8ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8e0:	f7fd fbf8 	bl	80090d4 <HAL_RCC_GetPCLK2Freq>
 800b8e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b8e8:	e003      	b.n	800b8f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8ea:	f7fd fbdf 	bl	80090ac <HAL_RCC_GetPCLK1Freq>
 800b8ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8fc:	f040 810c 	bne.w	800bb18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b904:	2200      	movs	r2, #0
 800b906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b90a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b90e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b912:	4622      	mov	r2, r4
 800b914:	462b      	mov	r3, r5
 800b916:	1891      	adds	r1, r2, r2
 800b918:	65b9      	str	r1, [r7, #88]	; 0x58
 800b91a:	415b      	adcs	r3, r3
 800b91c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b91e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b922:	4621      	mov	r1, r4
 800b924:	eb12 0801 	adds.w	r8, r2, r1
 800b928:	4629      	mov	r1, r5
 800b92a:	eb43 0901 	adc.w	r9, r3, r1
 800b92e:	f04f 0200 	mov.w	r2, #0
 800b932:	f04f 0300 	mov.w	r3, #0
 800b936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b93a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b93e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b942:	4690      	mov	r8, r2
 800b944:	4699      	mov	r9, r3
 800b946:	4623      	mov	r3, r4
 800b948:	eb18 0303 	adds.w	r3, r8, r3
 800b94c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b950:	462b      	mov	r3, r5
 800b952:	eb49 0303 	adc.w	r3, r9, r3
 800b956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b966:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b96a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b96e:	460b      	mov	r3, r1
 800b970:	18db      	adds	r3, r3, r3
 800b972:	653b      	str	r3, [r7, #80]	; 0x50
 800b974:	4613      	mov	r3, r2
 800b976:	eb42 0303 	adc.w	r3, r2, r3
 800b97a:	657b      	str	r3, [r7, #84]	; 0x54
 800b97c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b980:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b984:	f7f5 f978 	bl	8000c78 <__aeabi_uldivmod>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4b61      	ldr	r3, [pc, #388]	; (800bb14 <UART_SetConfig+0x2d4>)
 800b98e:	fba3 2302 	umull	r2, r3, r3, r2
 800b992:	095b      	lsrs	r3, r3, #5
 800b994:	011c      	lsls	r4, r3, #4
 800b996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b9a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b9a8:	4642      	mov	r2, r8
 800b9aa:	464b      	mov	r3, r9
 800b9ac:	1891      	adds	r1, r2, r2
 800b9ae:	64b9      	str	r1, [r7, #72]	; 0x48
 800b9b0:	415b      	adcs	r3, r3
 800b9b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	eb12 0a01 	adds.w	sl, r2, r1
 800b9be:	4649      	mov	r1, r9
 800b9c0:	eb43 0b01 	adc.w	fp, r3, r1
 800b9c4:	f04f 0200 	mov.w	r2, #0
 800b9c8:	f04f 0300 	mov.w	r3, #0
 800b9cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b9d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b9d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9d8:	4692      	mov	sl, r2
 800b9da:	469b      	mov	fp, r3
 800b9dc:	4643      	mov	r3, r8
 800b9de:	eb1a 0303 	adds.w	r3, sl, r3
 800b9e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9e6:	464b      	mov	r3, r9
 800b9e8:	eb4b 0303 	adc.w	r3, fp, r3
 800b9ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ba00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ba04:	460b      	mov	r3, r1
 800ba06:	18db      	adds	r3, r3, r3
 800ba08:	643b      	str	r3, [r7, #64]	; 0x40
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	eb42 0303 	adc.w	r3, r2, r3
 800ba10:	647b      	str	r3, [r7, #68]	; 0x44
 800ba12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ba16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ba1a:	f7f5 f92d 	bl	8000c78 <__aeabi_uldivmod>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4611      	mov	r1, r2
 800ba24:	4b3b      	ldr	r3, [pc, #236]	; (800bb14 <UART_SetConfig+0x2d4>)
 800ba26:	fba3 2301 	umull	r2, r3, r3, r1
 800ba2a:	095b      	lsrs	r3, r3, #5
 800ba2c:	2264      	movs	r2, #100	; 0x64
 800ba2e:	fb02 f303 	mul.w	r3, r2, r3
 800ba32:	1acb      	subs	r3, r1, r3
 800ba34:	00db      	lsls	r3, r3, #3
 800ba36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ba3a:	4b36      	ldr	r3, [pc, #216]	; (800bb14 <UART_SetConfig+0x2d4>)
 800ba3c:	fba3 2302 	umull	r2, r3, r3, r2
 800ba40:	095b      	lsrs	r3, r3, #5
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba48:	441c      	add	r4, r3
 800ba4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ba58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba5c:	4642      	mov	r2, r8
 800ba5e:	464b      	mov	r3, r9
 800ba60:	1891      	adds	r1, r2, r2
 800ba62:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba64:	415b      	adcs	r3, r3
 800ba66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba6c:	4641      	mov	r1, r8
 800ba6e:	1851      	adds	r1, r2, r1
 800ba70:	6339      	str	r1, [r7, #48]	; 0x30
 800ba72:	4649      	mov	r1, r9
 800ba74:	414b      	adcs	r3, r1
 800ba76:	637b      	str	r3, [r7, #52]	; 0x34
 800ba78:	f04f 0200 	mov.w	r2, #0
 800ba7c:	f04f 0300 	mov.w	r3, #0
 800ba80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba84:	4659      	mov	r1, fp
 800ba86:	00cb      	lsls	r3, r1, #3
 800ba88:	4651      	mov	r1, sl
 800ba8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba8e:	4651      	mov	r1, sl
 800ba90:	00ca      	lsls	r2, r1, #3
 800ba92:	4610      	mov	r0, r2
 800ba94:	4619      	mov	r1, r3
 800ba96:	4603      	mov	r3, r0
 800ba98:	4642      	mov	r2, r8
 800ba9a:	189b      	adds	r3, r3, r2
 800ba9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800baa0:	464b      	mov	r3, r9
 800baa2:	460a      	mov	r2, r1
 800baa4:	eb42 0303 	adc.w	r3, r2, r3
 800baa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800babc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bac0:	460b      	mov	r3, r1
 800bac2:	18db      	adds	r3, r3, r3
 800bac4:	62bb      	str	r3, [r7, #40]	; 0x28
 800bac6:	4613      	mov	r3, r2
 800bac8:	eb42 0303 	adc.w	r3, r2, r3
 800bacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bace:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bad2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bad6:	f7f5 f8cf 	bl	8000c78 <__aeabi_uldivmod>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <UART_SetConfig+0x2d4>)
 800bae0:	fba3 1302 	umull	r1, r3, r3, r2
 800bae4:	095b      	lsrs	r3, r3, #5
 800bae6:	2164      	movs	r1, #100	; 0x64
 800bae8:	fb01 f303 	mul.w	r3, r1, r3
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	3332      	adds	r3, #50	; 0x32
 800baf2:	4a08      	ldr	r2, [pc, #32]	; (800bb14 <UART_SetConfig+0x2d4>)
 800baf4:	fba2 2303 	umull	r2, r3, r2, r3
 800baf8:	095b      	lsrs	r3, r3, #5
 800bafa:	f003 0207 	and.w	r2, r3, #7
 800bafe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4422      	add	r2, r4
 800bb06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb08:	e106      	b.n	800bd18 <UART_SetConfig+0x4d8>
 800bb0a:	bf00      	nop
 800bb0c:	40011000 	.word	0x40011000
 800bb10:	40011400 	.word	0x40011400
 800bb14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bb26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bb2a:	4642      	mov	r2, r8
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	1891      	adds	r1, r2, r2
 800bb30:	6239      	str	r1, [r7, #32]
 800bb32:	415b      	adcs	r3, r3
 800bb34:	627b      	str	r3, [r7, #36]	; 0x24
 800bb36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb3a:	4641      	mov	r1, r8
 800bb3c:	1854      	adds	r4, r2, r1
 800bb3e:	4649      	mov	r1, r9
 800bb40:	eb43 0501 	adc.w	r5, r3, r1
 800bb44:	f04f 0200 	mov.w	r2, #0
 800bb48:	f04f 0300 	mov.w	r3, #0
 800bb4c:	00eb      	lsls	r3, r5, #3
 800bb4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb52:	00e2      	lsls	r2, r4, #3
 800bb54:	4614      	mov	r4, r2
 800bb56:	461d      	mov	r5, r3
 800bb58:	4643      	mov	r3, r8
 800bb5a:	18e3      	adds	r3, r4, r3
 800bb5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb60:	464b      	mov	r3, r9
 800bb62:	eb45 0303 	adc.w	r3, r5, r3
 800bb66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	f04f 0300 	mov.w	r3, #0
 800bb82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb86:	4629      	mov	r1, r5
 800bb88:	008b      	lsls	r3, r1, #2
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb90:	4621      	mov	r1, r4
 800bb92:	008a      	lsls	r2, r1, #2
 800bb94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb98:	f7f5 f86e 	bl	8000c78 <__aeabi_uldivmod>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4b60      	ldr	r3, [pc, #384]	; (800bd24 <UART_SetConfig+0x4e4>)
 800bba2:	fba3 2302 	umull	r2, r3, r3, r2
 800bba6:	095b      	lsrs	r3, r3, #5
 800bba8:	011c      	lsls	r4, r3, #4
 800bbaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bbb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bbb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bbbc:	4642      	mov	r2, r8
 800bbbe:	464b      	mov	r3, r9
 800bbc0:	1891      	adds	r1, r2, r2
 800bbc2:	61b9      	str	r1, [r7, #24]
 800bbc4:	415b      	adcs	r3, r3
 800bbc6:	61fb      	str	r3, [r7, #28]
 800bbc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbcc:	4641      	mov	r1, r8
 800bbce:	1851      	adds	r1, r2, r1
 800bbd0:	6139      	str	r1, [r7, #16]
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	414b      	adcs	r3, r1
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	f04f 0200 	mov.w	r2, #0
 800bbdc:	f04f 0300 	mov.w	r3, #0
 800bbe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bbe4:	4659      	mov	r1, fp
 800bbe6:	00cb      	lsls	r3, r1, #3
 800bbe8:	4651      	mov	r1, sl
 800bbea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbee:	4651      	mov	r1, sl
 800bbf0:	00ca      	lsls	r2, r1, #3
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	4642      	mov	r2, r8
 800bbfa:	189b      	adds	r3, r3, r2
 800bbfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc00:	464b      	mov	r3, r9
 800bc02:	460a      	mov	r2, r1
 800bc04:	eb42 0303 	adc.w	r3, r2, r3
 800bc08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc16:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bc18:	f04f 0200 	mov.w	r2, #0
 800bc1c:	f04f 0300 	mov.w	r3, #0
 800bc20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bc24:	4649      	mov	r1, r9
 800bc26:	008b      	lsls	r3, r1, #2
 800bc28:	4641      	mov	r1, r8
 800bc2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc2e:	4641      	mov	r1, r8
 800bc30:	008a      	lsls	r2, r1, #2
 800bc32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bc36:	f7f5 f81f 	bl	8000c78 <__aeabi_uldivmod>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4611      	mov	r1, r2
 800bc40:	4b38      	ldr	r3, [pc, #224]	; (800bd24 <UART_SetConfig+0x4e4>)
 800bc42:	fba3 2301 	umull	r2, r3, r3, r1
 800bc46:	095b      	lsrs	r3, r3, #5
 800bc48:	2264      	movs	r2, #100	; 0x64
 800bc4a:	fb02 f303 	mul.w	r3, r2, r3
 800bc4e:	1acb      	subs	r3, r1, r3
 800bc50:	011b      	lsls	r3, r3, #4
 800bc52:	3332      	adds	r3, #50	; 0x32
 800bc54:	4a33      	ldr	r2, [pc, #204]	; (800bd24 <UART_SetConfig+0x4e4>)
 800bc56:	fba2 2303 	umull	r2, r3, r2, r3
 800bc5a:	095b      	lsrs	r3, r3, #5
 800bc5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc60:	441c      	add	r4, r3
 800bc62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc66:	2200      	movs	r2, #0
 800bc68:	673b      	str	r3, [r7, #112]	; 0x70
 800bc6a:	677a      	str	r2, [r7, #116]	; 0x74
 800bc6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc70:	4642      	mov	r2, r8
 800bc72:	464b      	mov	r3, r9
 800bc74:	1891      	adds	r1, r2, r2
 800bc76:	60b9      	str	r1, [r7, #8]
 800bc78:	415b      	adcs	r3, r3
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc80:	4641      	mov	r1, r8
 800bc82:	1851      	adds	r1, r2, r1
 800bc84:	6039      	str	r1, [r7, #0]
 800bc86:	4649      	mov	r1, r9
 800bc88:	414b      	adcs	r3, r1
 800bc8a:	607b      	str	r3, [r7, #4]
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	f04f 0300 	mov.w	r3, #0
 800bc94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc98:	4659      	mov	r1, fp
 800bc9a:	00cb      	lsls	r3, r1, #3
 800bc9c:	4651      	mov	r1, sl
 800bc9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bca2:	4651      	mov	r1, sl
 800bca4:	00ca      	lsls	r2, r1, #3
 800bca6:	4610      	mov	r0, r2
 800bca8:	4619      	mov	r1, r3
 800bcaa:	4603      	mov	r3, r0
 800bcac:	4642      	mov	r2, r8
 800bcae:	189b      	adds	r3, r3, r2
 800bcb0:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	460a      	mov	r2, r1
 800bcb6:	eb42 0303 	adc.w	r3, r2, r3
 800bcba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	663b      	str	r3, [r7, #96]	; 0x60
 800bcc6:	667a      	str	r2, [r7, #100]	; 0x64
 800bcc8:	f04f 0200 	mov.w	r2, #0
 800bccc:	f04f 0300 	mov.w	r3, #0
 800bcd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	008b      	lsls	r3, r1, #2
 800bcd8:	4641      	mov	r1, r8
 800bcda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcde:	4641      	mov	r1, r8
 800bce0:	008a      	lsls	r2, r1, #2
 800bce2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bce6:	f7f4 ffc7 	bl	8000c78 <__aeabi_uldivmod>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <UART_SetConfig+0x4e4>)
 800bcf0:	fba3 1302 	umull	r1, r3, r3, r2
 800bcf4:	095b      	lsrs	r3, r3, #5
 800bcf6:	2164      	movs	r1, #100	; 0x64
 800bcf8:	fb01 f303 	mul.w	r3, r1, r3
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	011b      	lsls	r3, r3, #4
 800bd00:	3332      	adds	r3, #50	; 0x32
 800bd02:	4a08      	ldr	r2, [pc, #32]	; (800bd24 <UART_SetConfig+0x4e4>)
 800bd04:	fba2 2303 	umull	r2, r3, r2, r3
 800bd08:	095b      	lsrs	r3, r3, #5
 800bd0a:	f003 020f 	and.w	r2, r3, #15
 800bd0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4422      	add	r2, r4
 800bd16:	609a      	str	r2, [r3, #8]
}
 800bd18:	bf00      	nop
 800bd1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd24:	51eb851f 	.word	0x51eb851f

0800bd28 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd40:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	4b20      	ldr	r3, [pc, #128]	; (800bdc8 <FSMC_NORSRAM_Init+0xa0>)
 800bd46:	4013      	ands	r3, r2
 800bd48:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bd52:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800bd58:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800bd5e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800bd64:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800bd6a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800bd70:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800bd76:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800bd7c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800bd82:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800bd88:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800bd8e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800bd94:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b08      	cmp	r3, #8
 800bda2:	d103      	bne.n	800bdac <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdaa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	68f9      	ldr	r1, [r7, #12]
 800bdb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	fff00080 	.word	0xfff00080

0800bdcc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	1c5a      	adds	r2, r3, #1
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bde6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bdee:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bdfa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800be02:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800be0a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	3b01      	subs	r3, #1
 800be12:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800be14:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	3b02      	subs	r3, #2
 800be1c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800be1e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800be24:	4313      	orrs	r3, r2
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	4313      	orrs	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6979      	ldr	r1, [r7, #20]
 800be34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
	...

0800be48 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be60:	d122      	bne.n	800bea8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be6a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800be6c:	697a      	ldr	r2, [r7, #20]
 800be6e:	4b15      	ldr	r3, [pc, #84]	; (800bec4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800be70:	4013      	ands	r3, r2
 800be72:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800be7e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800be86:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800be8e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800be94:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	4313      	orrs	r3, r2
 800be9a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6979      	ldr	r1, [r7, #20]
 800bea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bea6:	e005      	b.n	800beb4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800beb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	cff00000 	.word	0xcff00000

0800bec8 <__itoa>:
 800bec8:	1e93      	subs	r3, r2, #2
 800beca:	2b22      	cmp	r3, #34	; 0x22
 800becc:	b510      	push	{r4, lr}
 800bece:	460c      	mov	r4, r1
 800bed0:	d904      	bls.n	800bedc <__itoa+0x14>
 800bed2:	2300      	movs	r3, #0
 800bed4:	700b      	strb	r3, [r1, #0]
 800bed6:	461c      	mov	r4, r3
 800bed8:	4620      	mov	r0, r4
 800beda:	bd10      	pop	{r4, pc}
 800bedc:	2a0a      	cmp	r2, #10
 800bede:	d109      	bne.n	800bef4 <__itoa+0x2c>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	da07      	bge.n	800bef4 <__itoa+0x2c>
 800bee4:	232d      	movs	r3, #45	; 0x2d
 800bee6:	700b      	strb	r3, [r1, #0]
 800bee8:	4240      	negs	r0, r0
 800beea:	2101      	movs	r1, #1
 800beec:	4421      	add	r1, r4
 800beee:	f000 f843 	bl	800bf78 <__utoa>
 800bef2:	e7f1      	b.n	800bed8 <__itoa+0x10>
 800bef4:	2100      	movs	r1, #0
 800bef6:	e7f9      	b.n	800beec <__itoa+0x24>

0800bef8 <itoa>:
 800bef8:	f7ff bfe6 	b.w	800bec8 <__itoa>

0800befc <rand>:
 800befc:	4b16      	ldr	r3, [pc, #88]	; (800bf58 <rand+0x5c>)
 800befe:	b510      	push	{r4, lr}
 800bf00:	681c      	ldr	r4, [r3, #0]
 800bf02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bf04:	b9b3      	cbnz	r3, 800bf34 <rand+0x38>
 800bf06:	2018      	movs	r0, #24
 800bf08:	f000 fa64 	bl	800c3d4 <malloc>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	6320      	str	r0, [r4, #48]	; 0x30
 800bf10:	b920      	cbnz	r0, 800bf1c <rand+0x20>
 800bf12:	4b12      	ldr	r3, [pc, #72]	; (800bf5c <rand+0x60>)
 800bf14:	4812      	ldr	r0, [pc, #72]	; (800bf60 <rand+0x64>)
 800bf16:	2152      	movs	r1, #82	; 0x52
 800bf18:	f000 f9f2 	bl	800c300 <__assert_func>
 800bf1c:	4911      	ldr	r1, [pc, #68]	; (800bf64 <rand+0x68>)
 800bf1e:	4b12      	ldr	r3, [pc, #72]	; (800bf68 <rand+0x6c>)
 800bf20:	e9c0 1300 	strd	r1, r3, [r0]
 800bf24:	4b11      	ldr	r3, [pc, #68]	; (800bf6c <rand+0x70>)
 800bf26:	6083      	str	r3, [r0, #8]
 800bf28:	230b      	movs	r3, #11
 800bf2a:	8183      	strh	r3, [r0, #12]
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	2001      	movs	r0, #1
 800bf30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bf34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf36:	480e      	ldr	r0, [pc, #56]	; (800bf70 <rand+0x74>)
 800bf38:	690b      	ldr	r3, [r1, #16]
 800bf3a:	694c      	ldr	r4, [r1, #20]
 800bf3c:	4a0d      	ldr	r2, [pc, #52]	; (800bf74 <rand+0x78>)
 800bf3e:	4358      	muls	r0, r3
 800bf40:	fb02 0004 	mla	r0, r2, r4, r0
 800bf44:	fba3 3202 	umull	r3, r2, r3, r2
 800bf48:	3301      	adds	r3, #1
 800bf4a:	eb40 0002 	adc.w	r0, r0, r2
 800bf4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bf52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bf56:	bd10      	pop	{r4, pc}
 800bf58:	20000108 	.word	0x20000108
 800bf5c:	080f23bc 	.word	0x080f23bc
 800bf60:	080f23d3 	.word	0x080f23d3
 800bf64:	abcd330e 	.word	0xabcd330e
 800bf68:	e66d1234 	.word	0xe66d1234
 800bf6c:	0005deec 	.word	0x0005deec
 800bf70:	5851f42d 	.word	0x5851f42d
 800bf74:	4c957f2d 	.word	0x4c957f2d

0800bf78 <__utoa>:
 800bf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7a:	4c1f      	ldr	r4, [pc, #124]	; (800bff8 <__utoa+0x80>)
 800bf7c:	b08b      	sub	sp, #44	; 0x2c
 800bf7e:	4605      	mov	r5, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	466e      	mov	r6, sp
 800bf84:	f104 0c20 	add.w	ip, r4, #32
 800bf88:	6820      	ldr	r0, [r4, #0]
 800bf8a:	6861      	ldr	r1, [r4, #4]
 800bf8c:	4637      	mov	r7, r6
 800bf8e:	c703      	stmia	r7!, {r0, r1}
 800bf90:	3408      	adds	r4, #8
 800bf92:	4564      	cmp	r4, ip
 800bf94:	463e      	mov	r6, r7
 800bf96:	d1f7      	bne.n	800bf88 <__utoa+0x10>
 800bf98:	7921      	ldrb	r1, [r4, #4]
 800bf9a:	7139      	strb	r1, [r7, #4]
 800bf9c:	1e91      	subs	r1, r2, #2
 800bf9e:	6820      	ldr	r0, [r4, #0]
 800bfa0:	6038      	str	r0, [r7, #0]
 800bfa2:	2922      	cmp	r1, #34	; 0x22
 800bfa4:	f04f 0100 	mov.w	r1, #0
 800bfa8:	d904      	bls.n	800bfb4 <__utoa+0x3c>
 800bfaa:	7019      	strb	r1, [r3, #0]
 800bfac:	460b      	mov	r3, r1
 800bfae:	4618      	mov	r0, r3
 800bfb0:	b00b      	add	sp, #44	; 0x2c
 800bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb4:	1e58      	subs	r0, r3, #1
 800bfb6:	4684      	mov	ip, r0
 800bfb8:	fbb5 f7f2 	udiv	r7, r5, r2
 800bfbc:	fb02 5617 	mls	r6, r2, r7, r5
 800bfc0:	3628      	adds	r6, #40	; 0x28
 800bfc2:	446e      	add	r6, sp
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bfca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bfce:	462e      	mov	r6, r5
 800bfd0:	42b2      	cmp	r2, r6
 800bfd2:	f101 0101 	add.w	r1, r1, #1
 800bfd6:	463d      	mov	r5, r7
 800bfd8:	d9ee      	bls.n	800bfb8 <__utoa+0x40>
 800bfda:	2200      	movs	r2, #0
 800bfdc:	545a      	strb	r2, [r3, r1]
 800bfde:	1919      	adds	r1, r3, r4
 800bfe0:	1aa5      	subs	r5, r4, r2
 800bfe2:	42aa      	cmp	r2, r5
 800bfe4:	dae3      	bge.n	800bfae <__utoa+0x36>
 800bfe6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bfea:	780e      	ldrb	r6, [r1, #0]
 800bfec:	7006      	strb	r6, [r0, #0]
 800bfee:	3201      	adds	r2, #1
 800bff0:	f801 5901 	strb.w	r5, [r1], #-1
 800bff4:	e7f4      	b.n	800bfe0 <__utoa+0x68>
 800bff6:	bf00      	nop
 800bff8:	080f242b 	.word	0x080f242b

0800bffc <std>:
 800bffc:	2300      	movs	r3, #0
 800bffe:	b510      	push	{r4, lr}
 800c000:	4604      	mov	r4, r0
 800c002:	e9c0 3300 	strd	r3, r3, [r0]
 800c006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c00a:	6083      	str	r3, [r0, #8]
 800c00c:	8181      	strh	r1, [r0, #12]
 800c00e:	6643      	str	r3, [r0, #100]	; 0x64
 800c010:	81c2      	strh	r2, [r0, #14]
 800c012:	6183      	str	r3, [r0, #24]
 800c014:	4619      	mov	r1, r3
 800c016:	2208      	movs	r2, #8
 800c018:	305c      	adds	r0, #92	; 0x5c
 800c01a:	f000 f8f4 	bl	800c206 <memset>
 800c01e:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <std+0x58>)
 800c020:	6263      	str	r3, [r4, #36]	; 0x24
 800c022:	4b0d      	ldr	r3, [pc, #52]	; (800c058 <std+0x5c>)
 800c024:	62a3      	str	r3, [r4, #40]	; 0x28
 800c026:	4b0d      	ldr	r3, [pc, #52]	; (800c05c <std+0x60>)
 800c028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c02a:	4b0d      	ldr	r3, [pc, #52]	; (800c060 <std+0x64>)
 800c02c:	6323      	str	r3, [r4, #48]	; 0x30
 800c02e:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <std+0x68>)
 800c030:	6224      	str	r4, [r4, #32]
 800c032:	429c      	cmp	r4, r3
 800c034:	d006      	beq.n	800c044 <std+0x48>
 800c036:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c03a:	4294      	cmp	r4, r2
 800c03c:	d002      	beq.n	800c044 <std+0x48>
 800c03e:	33d0      	adds	r3, #208	; 0xd0
 800c040:	429c      	cmp	r4, r3
 800c042:	d105      	bne.n	800c050 <std+0x54>
 800c044:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c04c:	f000 b954 	b.w	800c2f8 <__retarget_lock_init_recursive>
 800c050:	bd10      	pop	{r4, pc}
 800c052:	bf00      	nop
 800c054:	0800c181 	.word	0x0800c181
 800c058:	0800c1a3 	.word	0x0800c1a3
 800c05c:	0800c1db 	.word	0x0800c1db
 800c060:	0800c1ff 	.word	0x0800c1ff
 800c064:	20000850 	.word	0x20000850

0800c068 <stdio_exit_handler>:
 800c068:	4a02      	ldr	r2, [pc, #8]	; (800c074 <stdio_exit_handler+0xc>)
 800c06a:	4903      	ldr	r1, [pc, #12]	; (800c078 <stdio_exit_handler+0x10>)
 800c06c:	4803      	ldr	r0, [pc, #12]	; (800c07c <stdio_exit_handler+0x14>)
 800c06e:	f000 b869 	b.w	800c144 <_fwalk_sglue>
 800c072:	bf00      	nop
 800c074:	200000b0 	.word	0x200000b0
 800c078:	0800c969 	.word	0x0800c969
 800c07c:	200000bc 	.word	0x200000bc

0800c080 <cleanup_stdio>:
 800c080:	6841      	ldr	r1, [r0, #4]
 800c082:	4b0c      	ldr	r3, [pc, #48]	; (800c0b4 <cleanup_stdio+0x34>)
 800c084:	4299      	cmp	r1, r3
 800c086:	b510      	push	{r4, lr}
 800c088:	4604      	mov	r4, r0
 800c08a:	d001      	beq.n	800c090 <cleanup_stdio+0x10>
 800c08c:	f000 fc6c 	bl	800c968 <_fflush_r>
 800c090:	68a1      	ldr	r1, [r4, #8]
 800c092:	4b09      	ldr	r3, [pc, #36]	; (800c0b8 <cleanup_stdio+0x38>)
 800c094:	4299      	cmp	r1, r3
 800c096:	d002      	beq.n	800c09e <cleanup_stdio+0x1e>
 800c098:	4620      	mov	r0, r4
 800c09a:	f000 fc65 	bl	800c968 <_fflush_r>
 800c09e:	68e1      	ldr	r1, [r4, #12]
 800c0a0:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <cleanup_stdio+0x3c>)
 800c0a2:	4299      	cmp	r1, r3
 800c0a4:	d004      	beq.n	800c0b0 <cleanup_stdio+0x30>
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ac:	f000 bc5c 	b.w	800c968 <_fflush_r>
 800c0b0:	bd10      	pop	{r4, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20000850 	.word	0x20000850
 800c0b8:	200008b8 	.word	0x200008b8
 800c0bc:	20000920 	.word	0x20000920

0800c0c0 <global_stdio_init.part.0>:
 800c0c0:	b510      	push	{r4, lr}
 800c0c2:	4b0b      	ldr	r3, [pc, #44]	; (800c0f0 <global_stdio_init.part.0+0x30>)
 800c0c4:	4c0b      	ldr	r4, [pc, #44]	; (800c0f4 <global_stdio_init.part.0+0x34>)
 800c0c6:	4a0c      	ldr	r2, [pc, #48]	; (800c0f8 <global_stdio_init.part.0+0x38>)
 800c0c8:	601a      	str	r2, [r3, #0]
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2104      	movs	r1, #4
 800c0d0:	f7ff ff94 	bl	800bffc <std>
 800c0d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c0d8:	2201      	movs	r2, #1
 800c0da:	2109      	movs	r1, #9
 800c0dc:	f7ff ff8e 	bl	800bffc <std>
 800c0e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c0e4:	2202      	movs	r2, #2
 800c0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ea:	2112      	movs	r1, #18
 800c0ec:	f7ff bf86 	b.w	800bffc <std>
 800c0f0:	20000988 	.word	0x20000988
 800c0f4:	20000850 	.word	0x20000850
 800c0f8:	0800c069 	.word	0x0800c069

0800c0fc <__sfp_lock_acquire>:
 800c0fc:	4801      	ldr	r0, [pc, #4]	; (800c104 <__sfp_lock_acquire+0x8>)
 800c0fe:	f000 b8fc 	b.w	800c2fa <__retarget_lock_acquire_recursive>
 800c102:	bf00      	nop
 800c104:	20000991 	.word	0x20000991

0800c108 <__sfp_lock_release>:
 800c108:	4801      	ldr	r0, [pc, #4]	; (800c110 <__sfp_lock_release+0x8>)
 800c10a:	f000 b8f7 	b.w	800c2fc <__retarget_lock_release_recursive>
 800c10e:	bf00      	nop
 800c110:	20000991 	.word	0x20000991

0800c114 <__sinit>:
 800c114:	b510      	push	{r4, lr}
 800c116:	4604      	mov	r4, r0
 800c118:	f7ff fff0 	bl	800c0fc <__sfp_lock_acquire>
 800c11c:	6a23      	ldr	r3, [r4, #32]
 800c11e:	b11b      	cbz	r3, 800c128 <__sinit+0x14>
 800c120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c124:	f7ff bff0 	b.w	800c108 <__sfp_lock_release>
 800c128:	4b04      	ldr	r3, [pc, #16]	; (800c13c <__sinit+0x28>)
 800c12a:	6223      	str	r3, [r4, #32]
 800c12c:	4b04      	ldr	r3, [pc, #16]	; (800c140 <__sinit+0x2c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1f5      	bne.n	800c120 <__sinit+0xc>
 800c134:	f7ff ffc4 	bl	800c0c0 <global_stdio_init.part.0>
 800c138:	e7f2      	b.n	800c120 <__sinit+0xc>
 800c13a:	bf00      	nop
 800c13c:	0800c081 	.word	0x0800c081
 800c140:	20000988 	.word	0x20000988

0800c144 <_fwalk_sglue>:
 800c144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c148:	4607      	mov	r7, r0
 800c14a:	4688      	mov	r8, r1
 800c14c:	4614      	mov	r4, r2
 800c14e:	2600      	movs	r6, #0
 800c150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c154:	f1b9 0901 	subs.w	r9, r9, #1
 800c158:	d505      	bpl.n	800c166 <_fwalk_sglue+0x22>
 800c15a:	6824      	ldr	r4, [r4, #0]
 800c15c:	2c00      	cmp	r4, #0
 800c15e:	d1f7      	bne.n	800c150 <_fwalk_sglue+0xc>
 800c160:	4630      	mov	r0, r6
 800c162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d907      	bls.n	800c17c <_fwalk_sglue+0x38>
 800c16c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c170:	3301      	adds	r3, #1
 800c172:	d003      	beq.n	800c17c <_fwalk_sglue+0x38>
 800c174:	4629      	mov	r1, r5
 800c176:	4638      	mov	r0, r7
 800c178:	47c0      	blx	r8
 800c17a:	4306      	orrs	r6, r0
 800c17c:	3568      	adds	r5, #104	; 0x68
 800c17e:	e7e9      	b.n	800c154 <_fwalk_sglue+0x10>

0800c180 <__sread>:
 800c180:	b510      	push	{r4, lr}
 800c182:	460c      	mov	r4, r1
 800c184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c188:	f000 f868 	bl	800c25c <_read_r>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	bfab      	itete	ge
 800c190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c192:	89a3      	ldrhlt	r3, [r4, #12]
 800c194:	181b      	addge	r3, r3, r0
 800c196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c19a:	bfac      	ite	ge
 800c19c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c19e:	81a3      	strhlt	r3, [r4, #12]
 800c1a0:	bd10      	pop	{r4, pc}

0800c1a2 <__swrite>:
 800c1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a6:	461f      	mov	r7, r3
 800c1a8:	898b      	ldrh	r3, [r1, #12]
 800c1aa:	05db      	lsls	r3, r3, #23
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	4616      	mov	r6, r2
 800c1b2:	d505      	bpl.n	800c1c0 <__swrite+0x1e>
 800c1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f000 f83c 	bl	800c238 <_lseek_r>
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	463b      	mov	r3, r7
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d6:	f000 b853 	b.w	800c280 <_write_r>

0800c1da <__sseek>:
 800c1da:	b510      	push	{r4, lr}
 800c1dc:	460c      	mov	r4, r1
 800c1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e2:	f000 f829 	bl	800c238 <_lseek_r>
 800c1e6:	1c43      	adds	r3, r0, #1
 800c1e8:	89a3      	ldrh	r3, [r4, #12]
 800c1ea:	bf15      	itete	ne
 800c1ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1f6:	81a3      	strheq	r3, [r4, #12]
 800c1f8:	bf18      	it	ne
 800c1fa:	81a3      	strhne	r3, [r4, #12]
 800c1fc:	bd10      	pop	{r4, pc}

0800c1fe <__sclose>:
 800c1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c202:	f000 b809 	b.w	800c218 <_close_r>

0800c206 <memset>:
 800c206:	4402      	add	r2, r0
 800c208:	4603      	mov	r3, r0
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d100      	bne.n	800c210 <memset+0xa>
 800c20e:	4770      	bx	lr
 800c210:	f803 1b01 	strb.w	r1, [r3], #1
 800c214:	e7f9      	b.n	800c20a <memset+0x4>
	...

0800c218 <_close_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d06      	ldr	r5, [pc, #24]	; (800c234 <_close_r+0x1c>)
 800c21c:	2300      	movs	r3, #0
 800c21e:	4604      	mov	r4, r0
 800c220:	4608      	mov	r0, r1
 800c222:	602b      	str	r3, [r5, #0]
 800c224:	f7f8 fe8f 	bl	8004f46 <_close>
 800c228:	1c43      	adds	r3, r0, #1
 800c22a:	d102      	bne.n	800c232 <_close_r+0x1a>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	b103      	cbz	r3, 800c232 <_close_r+0x1a>
 800c230:	6023      	str	r3, [r4, #0]
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	2000098c 	.word	0x2000098c

0800c238 <_lseek_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d07      	ldr	r5, [pc, #28]	; (800c258 <_lseek_r+0x20>)
 800c23c:	4604      	mov	r4, r0
 800c23e:	4608      	mov	r0, r1
 800c240:	4611      	mov	r1, r2
 800c242:	2200      	movs	r2, #0
 800c244:	602a      	str	r2, [r5, #0]
 800c246:	461a      	mov	r2, r3
 800c248:	f7f8 fea4 	bl	8004f94 <_lseek>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_lseek_r+0x1e>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_lseek_r+0x1e>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	2000098c 	.word	0x2000098c

0800c25c <_read_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d07      	ldr	r5, [pc, #28]	; (800c27c <_read_r+0x20>)
 800c260:	4604      	mov	r4, r0
 800c262:	4608      	mov	r0, r1
 800c264:	4611      	mov	r1, r2
 800c266:	2200      	movs	r2, #0
 800c268:	602a      	str	r2, [r5, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	f7f8 fe32 	bl	8004ed4 <_read>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_read_r+0x1e>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	b103      	cbz	r3, 800c27a <_read_r+0x1e>
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	2000098c 	.word	0x2000098c

0800c280 <_write_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	; (800c2a0 <_write_r+0x20>)
 800c284:	4604      	mov	r4, r0
 800c286:	4608      	mov	r0, r1
 800c288:	4611      	mov	r1, r2
 800c28a:	2200      	movs	r2, #0
 800c28c:	602a      	str	r2, [r5, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	f7f8 fe3d 	bl	8004f0e <_write>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_write_r+0x1e>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_write_r+0x1e>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	2000098c 	.word	0x2000098c

0800c2a4 <__errno>:
 800c2a4:	4b01      	ldr	r3, [pc, #4]	; (800c2ac <__errno+0x8>)
 800c2a6:	6818      	ldr	r0, [r3, #0]
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	20000108 	.word	0x20000108

0800c2b0 <__libc_init_array>:
 800c2b0:	b570      	push	{r4, r5, r6, lr}
 800c2b2:	4d0d      	ldr	r5, [pc, #52]	; (800c2e8 <__libc_init_array+0x38>)
 800c2b4:	4c0d      	ldr	r4, [pc, #52]	; (800c2ec <__libc_init_array+0x3c>)
 800c2b6:	1b64      	subs	r4, r4, r5
 800c2b8:	10a4      	asrs	r4, r4, #2
 800c2ba:	2600      	movs	r6, #0
 800c2bc:	42a6      	cmp	r6, r4
 800c2be:	d109      	bne.n	800c2d4 <__libc_init_array+0x24>
 800c2c0:	4d0b      	ldr	r5, [pc, #44]	; (800c2f0 <__libc_init_array+0x40>)
 800c2c2:	4c0c      	ldr	r4, [pc, #48]	; (800c2f4 <__libc_init_array+0x44>)
 800c2c4:	f001 fda6 	bl	800de14 <_init>
 800c2c8:	1b64      	subs	r4, r4, r5
 800c2ca:	10a4      	asrs	r4, r4, #2
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	42a6      	cmp	r6, r4
 800c2d0:	d105      	bne.n	800c2de <__libc_init_array+0x2e>
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2d8:	4798      	blx	r3
 800c2da:	3601      	adds	r6, #1
 800c2dc:	e7ee      	b.n	800c2bc <__libc_init_array+0xc>
 800c2de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e2:	4798      	blx	r3
 800c2e4:	3601      	adds	r6, #1
 800c2e6:	e7f2      	b.n	800c2ce <__libc_init_array+0x1e>
 800c2e8:	080f24f8 	.word	0x080f24f8
 800c2ec:	080f24f8 	.word	0x080f24f8
 800c2f0:	080f24f8 	.word	0x080f24f8
 800c2f4:	080f24fc 	.word	0x080f24fc

0800c2f8 <__retarget_lock_init_recursive>:
 800c2f8:	4770      	bx	lr

0800c2fa <__retarget_lock_acquire_recursive>:
 800c2fa:	4770      	bx	lr

0800c2fc <__retarget_lock_release_recursive>:
 800c2fc:	4770      	bx	lr
	...

0800c300 <__assert_func>:
 800c300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c302:	4614      	mov	r4, r2
 800c304:	461a      	mov	r2, r3
 800c306:	4b09      	ldr	r3, [pc, #36]	; (800c32c <__assert_func+0x2c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4605      	mov	r5, r0
 800c30c:	68d8      	ldr	r0, [r3, #12]
 800c30e:	b14c      	cbz	r4, 800c324 <__assert_func+0x24>
 800c310:	4b07      	ldr	r3, [pc, #28]	; (800c330 <__assert_func+0x30>)
 800c312:	9100      	str	r1, [sp, #0]
 800c314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c318:	4906      	ldr	r1, [pc, #24]	; (800c334 <__assert_func+0x34>)
 800c31a:	462b      	mov	r3, r5
 800c31c:	f000 fb4c 	bl	800c9b8 <fiprintf>
 800c320:	f000 fb6c 	bl	800c9fc <abort>
 800c324:	4b04      	ldr	r3, [pc, #16]	; (800c338 <__assert_func+0x38>)
 800c326:	461c      	mov	r4, r3
 800c328:	e7f3      	b.n	800c312 <__assert_func+0x12>
 800c32a:	bf00      	nop
 800c32c:	20000108 	.word	0x20000108
 800c330:	080f2450 	.word	0x080f2450
 800c334:	080f245d 	.word	0x080f245d
 800c338:	080f248b 	.word	0x080f248b

0800c33c <_free_r>:
 800c33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c33e:	2900      	cmp	r1, #0
 800c340:	d044      	beq.n	800c3cc <_free_r+0x90>
 800c342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c346:	9001      	str	r0, [sp, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f1a1 0404 	sub.w	r4, r1, #4
 800c34e:	bfb8      	it	lt
 800c350:	18e4      	addlt	r4, r4, r3
 800c352:	f000 f8e7 	bl	800c524 <__malloc_lock>
 800c356:	4a1e      	ldr	r2, [pc, #120]	; (800c3d0 <_free_r+0x94>)
 800c358:	9801      	ldr	r0, [sp, #4]
 800c35a:	6813      	ldr	r3, [r2, #0]
 800c35c:	b933      	cbnz	r3, 800c36c <_free_r+0x30>
 800c35e:	6063      	str	r3, [r4, #4]
 800c360:	6014      	str	r4, [r2, #0]
 800c362:	b003      	add	sp, #12
 800c364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c368:	f000 b8e2 	b.w	800c530 <__malloc_unlock>
 800c36c:	42a3      	cmp	r3, r4
 800c36e:	d908      	bls.n	800c382 <_free_r+0x46>
 800c370:	6825      	ldr	r5, [r4, #0]
 800c372:	1961      	adds	r1, r4, r5
 800c374:	428b      	cmp	r3, r1
 800c376:	bf01      	itttt	eq
 800c378:	6819      	ldreq	r1, [r3, #0]
 800c37a:	685b      	ldreq	r3, [r3, #4]
 800c37c:	1949      	addeq	r1, r1, r5
 800c37e:	6021      	streq	r1, [r4, #0]
 800c380:	e7ed      	b.n	800c35e <_free_r+0x22>
 800c382:	461a      	mov	r2, r3
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	b10b      	cbz	r3, 800c38c <_free_r+0x50>
 800c388:	42a3      	cmp	r3, r4
 800c38a:	d9fa      	bls.n	800c382 <_free_r+0x46>
 800c38c:	6811      	ldr	r1, [r2, #0]
 800c38e:	1855      	adds	r5, r2, r1
 800c390:	42a5      	cmp	r5, r4
 800c392:	d10b      	bne.n	800c3ac <_free_r+0x70>
 800c394:	6824      	ldr	r4, [r4, #0]
 800c396:	4421      	add	r1, r4
 800c398:	1854      	adds	r4, r2, r1
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	6011      	str	r1, [r2, #0]
 800c39e:	d1e0      	bne.n	800c362 <_free_r+0x26>
 800c3a0:	681c      	ldr	r4, [r3, #0]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	6053      	str	r3, [r2, #4]
 800c3a6:	440c      	add	r4, r1
 800c3a8:	6014      	str	r4, [r2, #0]
 800c3aa:	e7da      	b.n	800c362 <_free_r+0x26>
 800c3ac:	d902      	bls.n	800c3b4 <_free_r+0x78>
 800c3ae:	230c      	movs	r3, #12
 800c3b0:	6003      	str	r3, [r0, #0]
 800c3b2:	e7d6      	b.n	800c362 <_free_r+0x26>
 800c3b4:	6825      	ldr	r5, [r4, #0]
 800c3b6:	1961      	adds	r1, r4, r5
 800c3b8:	428b      	cmp	r3, r1
 800c3ba:	bf04      	itt	eq
 800c3bc:	6819      	ldreq	r1, [r3, #0]
 800c3be:	685b      	ldreq	r3, [r3, #4]
 800c3c0:	6063      	str	r3, [r4, #4]
 800c3c2:	bf04      	itt	eq
 800c3c4:	1949      	addeq	r1, r1, r5
 800c3c6:	6021      	streq	r1, [r4, #0]
 800c3c8:	6054      	str	r4, [r2, #4]
 800c3ca:	e7ca      	b.n	800c362 <_free_r+0x26>
 800c3cc:	b003      	add	sp, #12
 800c3ce:	bd30      	pop	{r4, r5, pc}
 800c3d0:	20000994 	.word	0x20000994

0800c3d4 <malloc>:
 800c3d4:	4b02      	ldr	r3, [pc, #8]	; (800c3e0 <malloc+0xc>)
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	f000 b823 	b.w	800c424 <_malloc_r>
 800c3de:	bf00      	nop
 800c3e0:	20000108 	.word	0x20000108

0800c3e4 <sbrk_aligned>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	4e0e      	ldr	r6, [pc, #56]	; (800c420 <sbrk_aligned+0x3c>)
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	6831      	ldr	r1, [r6, #0]
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	b911      	cbnz	r1, 800c3f6 <sbrk_aligned+0x12>
 800c3f0:	f000 faf4 	bl	800c9dc <_sbrk_r>
 800c3f4:	6030      	str	r0, [r6, #0]
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	f000 faef 	bl	800c9dc <_sbrk_r>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	d00a      	beq.n	800c418 <sbrk_aligned+0x34>
 800c402:	1cc4      	adds	r4, r0, #3
 800c404:	f024 0403 	bic.w	r4, r4, #3
 800c408:	42a0      	cmp	r0, r4
 800c40a:	d007      	beq.n	800c41c <sbrk_aligned+0x38>
 800c40c:	1a21      	subs	r1, r4, r0
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 fae4 	bl	800c9dc <_sbrk_r>
 800c414:	3001      	adds	r0, #1
 800c416:	d101      	bne.n	800c41c <sbrk_aligned+0x38>
 800c418:	f04f 34ff 	mov.w	r4, #4294967295
 800c41c:	4620      	mov	r0, r4
 800c41e:	bd70      	pop	{r4, r5, r6, pc}
 800c420:	20000998 	.word	0x20000998

0800c424 <_malloc_r>:
 800c424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c428:	1ccd      	adds	r5, r1, #3
 800c42a:	f025 0503 	bic.w	r5, r5, #3
 800c42e:	3508      	adds	r5, #8
 800c430:	2d0c      	cmp	r5, #12
 800c432:	bf38      	it	cc
 800c434:	250c      	movcc	r5, #12
 800c436:	2d00      	cmp	r5, #0
 800c438:	4607      	mov	r7, r0
 800c43a:	db01      	blt.n	800c440 <_malloc_r+0x1c>
 800c43c:	42a9      	cmp	r1, r5
 800c43e:	d905      	bls.n	800c44c <_malloc_r+0x28>
 800c440:	230c      	movs	r3, #12
 800c442:	603b      	str	r3, [r7, #0]
 800c444:	2600      	movs	r6, #0
 800c446:	4630      	mov	r0, r6
 800c448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c44c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c520 <_malloc_r+0xfc>
 800c450:	f000 f868 	bl	800c524 <__malloc_lock>
 800c454:	f8d8 3000 	ldr.w	r3, [r8]
 800c458:	461c      	mov	r4, r3
 800c45a:	bb5c      	cbnz	r4, 800c4b4 <_malloc_r+0x90>
 800c45c:	4629      	mov	r1, r5
 800c45e:	4638      	mov	r0, r7
 800c460:	f7ff ffc0 	bl	800c3e4 <sbrk_aligned>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	4604      	mov	r4, r0
 800c468:	d155      	bne.n	800c516 <_malloc_r+0xf2>
 800c46a:	f8d8 4000 	ldr.w	r4, [r8]
 800c46e:	4626      	mov	r6, r4
 800c470:	2e00      	cmp	r6, #0
 800c472:	d145      	bne.n	800c500 <_malloc_r+0xdc>
 800c474:	2c00      	cmp	r4, #0
 800c476:	d048      	beq.n	800c50a <_malloc_r+0xe6>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	4631      	mov	r1, r6
 800c47c:	4638      	mov	r0, r7
 800c47e:	eb04 0903 	add.w	r9, r4, r3
 800c482:	f000 faab 	bl	800c9dc <_sbrk_r>
 800c486:	4581      	cmp	r9, r0
 800c488:	d13f      	bne.n	800c50a <_malloc_r+0xe6>
 800c48a:	6821      	ldr	r1, [r4, #0]
 800c48c:	1a6d      	subs	r5, r5, r1
 800c48e:	4629      	mov	r1, r5
 800c490:	4638      	mov	r0, r7
 800c492:	f7ff ffa7 	bl	800c3e4 <sbrk_aligned>
 800c496:	3001      	adds	r0, #1
 800c498:	d037      	beq.n	800c50a <_malloc_r+0xe6>
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	442b      	add	r3, r5
 800c49e:	6023      	str	r3, [r4, #0]
 800c4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d038      	beq.n	800c51a <_malloc_r+0xf6>
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	42a2      	cmp	r2, r4
 800c4ac:	d12b      	bne.n	800c506 <_malloc_r+0xe2>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	605a      	str	r2, [r3, #4]
 800c4b2:	e00f      	b.n	800c4d4 <_malloc_r+0xb0>
 800c4b4:	6822      	ldr	r2, [r4, #0]
 800c4b6:	1b52      	subs	r2, r2, r5
 800c4b8:	d41f      	bmi.n	800c4fa <_malloc_r+0xd6>
 800c4ba:	2a0b      	cmp	r2, #11
 800c4bc:	d917      	bls.n	800c4ee <_malloc_r+0xca>
 800c4be:	1961      	adds	r1, r4, r5
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	6025      	str	r5, [r4, #0]
 800c4c4:	bf18      	it	ne
 800c4c6:	6059      	strne	r1, [r3, #4]
 800c4c8:	6863      	ldr	r3, [r4, #4]
 800c4ca:	bf08      	it	eq
 800c4cc:	f8c8 1000 	streq.w	r1, [r8]
 800c4d0:	5162      	str	r2, [r4, r5]
 800c4d2:	604b      	str	r3, [r1, #4]
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f104 060b 	add.w	r6, r4, #11
 800c4da:	f000 f829 	bl	800c530 <__malloc_unlock>
 800c4de:	f026 0607 	bic.w	r6, r6, #7
 800c4e2:	1d23      	adds	r3, r4, #4
 800c4e4:	1af2      	subs	r2, r6, r3
 800c4e6:	d0ae      	beq.n	800c446 <_malloc_r+0x22>
 800c4e8:	1b9b      	subs	r3, r3, r6
 800c4ea:	50a3      	str	r3, [r4, r2]
 800c4ec:	e7ab      	b.n	800c446 <_malloc_r+0x22>
 800c4ee:	42a3      	cmp	r3, r4
 800c4f0:	6862      	ldr	r2, [r4, #4]
 800c4f2:	d1dd      	bne.n	800c4b0 <_malloc_r+0x8c>
 800c4f4:	f8c8 2000 	str.w	r2, [r8]
 800c4f8:	e7ec      	b.n	800c4d4 <_malloc_r+0xb0>
 800c4fa:	4623      	mov	r3, r4
 800c4fc:	6864      	ldr	r4, [r4, #4]
 800c4fe:	e7ac      	b.n	800c45a <_malloc_r+0x36>
 800c500:	4634      	mov	r4, r6
 800c502:	6876      	ldr	r6, [r6, #4]
 800c504:	e7b4      	b.n	800c470 <_malloc_r+0x4c>
 800c506:	4613      	mov	r3, r2
 800c508:	e7cc      	b.n	800c4a4 <_malloc_r+0x80>
 800c50a:	230c      	movs	r3, #12
 800c50c:	603b      	str	r3, [r7, #0]
 800c50e:	4638      	mov	r0, r7
 800c510:	f000 f80e 	bl	800c530 <__malloc_unlock>
 800c514:	e797      	b.n	800c446 <_malloc_r+0x22>
 800c516:	6025      	str	r5, [r4, #0]
 800c518:	e7dc      	b.n	800c4d4 <_malloc_r+0xb0>
 800c51a:	605b      	str	r3, [r3, #4]
 800c51c:	deff      	udf	#255	; 0xff
 800c51e:	bf00      	nop
 800c520:	20000994 	.word	0x20000994

0800c524 <__malloc_lock>:
 800c524:	4801      	ldr	r0, [pc, #4]	; (800c52c <__malloc_lock+0x8>)
 800c526:	f7ff bee8 	b.w	800c2fa <__retarget_lock_acquire_recursive>
 800c52a:	bf00      	nop
 800c52c:	20000990 	.word	0x20000990

0800c530 <__malloc_unlock>:
 800c530:	4801      	ldr	r0, [pc, #4]	; (800c538 <__malloc_unlock+0x8>)
 800c532:	f7ff bee3 	b.w	800c2fc <__retarget_lock_release_recursive>
 800c536:	bf00      	nop
 800c538:	20000990 	.word	0x20000990

0800c53c <_printf_common>:
 800c53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c540:	4616      	mov	r6, r2
 800c542:	4699      	mov	r9, r3
 800c544:	688a      	ldr	r2, [r1, #8]
 800c546:	690b      	ldr	r3, [r1, #16]
 800c548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c54c:	4293      	cmp	r3, r2
 800c54e:	bfb8      	it	lt
 800c550:	4613      	movlt	r3, r2
 800c552:	6033      	str	r3, [r6, #0]
 800c554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c558:	4607      	mov	r7, r0
 800c55a:	460c      	mov	r4, r1
 800c55c:	b10a      	cbz	r2, 800c562 <_printf_common+0x26>
 800c55e:	3301      	adds	r3, #1
 800c560:	6033      	str	r3, [r6, #0]
 800c562:	6823      	ldr	r3, [r4, #0]
 800c564:	0699      	lsls	r1, r3, #26
 800c566:	bf42      	ittt	mi
 800c568:	6833      	ldrmi	r3, [r6, #0]
 800c56a:	3302      	addmi	r3, #2
 800c56c:	6033      	strmi	r3, [r6, #0]
 800c56e:	6825      	ldr	r5, [r4, #0]
 800c570:	f015 0506 	ands.w	r5, r5, #6
 800c574:	d106      	bne.n	800c584 <_printf_common+0x48>
 800c576:	f104 0a19 	add.w	sl, r4, #25
 800c57a:	68e3      	ldr	r3, [r4, #12]
 800c57c:	6832      	ldr	r2, [r6, #0]
 800c57e:	1a9b      	subs	r3, r3, r2
 800c580:	42ab      	cmp	r3, r5
 800c582:	dc26      	bgt.n	800c5d2 <_printf_common+0x96>
 800c584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c588:	1e13      	subs	r3, r2, #0
 800c58a:	6822      	ldr	r2, [r4, #0]
 800c58c:	bf18      	it	ne
 800c58e:	2301      	movne	r3, #1
 800c590:	0692      	lsls	r2, r2, #26
 800c592:	d42b      	bmi.n	800c5ec <_printf_common+0xb0>
 800c594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c598:	4649      	mov	r1, r9
 800c59a:	4638      	mov	r0, r7
 800c59c:	47c0      	blx	r8
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d01e      	beq.n	800c5e0 <_printf_common+0xa4>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	6922      	ldr	r2, [r4, #16]
 800c5a6:	f003 0306 	and.w	r3, r3, #6
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	bf02      	ittt	eq
 800c5ae:	68e5      	ldreq	r5, [r4, #12]
 800c5b0:	6833      	ldreq	r3, [r6, #0]
 800c5b2:	1aed      	subeq	r5, r5, r3
 800c5b4:	68a3      	ldr	r3, [r4, #8]
 800c5b6:	bf0c      	ite	eq
 800c5b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5bc:	2500      	movne	r5, #0
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	bfc4      	itt	gt
 800c5c2:	1a9b      	subgt	r3, r3, r2
 800c5c4:	18ed      	addgt	r5, r5, r3
 800c5c6:	2600      	movs	r6, #0
 800c5c8:	341a      	adds	r4, #26
 800c5ca:	42b5      	cmp	r5, r6
 800c5cc:	d11a      	bne.n	800c604 <_printf_common+0xc8>
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e008      	b.n	800c5e4 <_printf_common+0xa8>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	4652      	mov	r2, sl
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	4638      	mov	r0, r7
 800c5da:	47c0      	blx	r8
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d103      	bne.n	800c5e8 <_printf_common+0xac>
 800c5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e8:	3501      	adds	r5, #1
 800c5ea:	e7c6      	b.n	800c57a <_printf_common+0x3e>
 800c5ec:	18e1      	adds	r1, r4, r3
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	2030      	movs	r0, #48	; 0x30
 800c5f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c5f6:	4422      	add	r2, r4
 800c5f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c5fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c600:	3302      	adds	r3, #2
 800c602:	e7c7      	b.n	800c594 <_printf_common+0x58>
 800c604:	2301      	movs	r3, #1
 800c606:	4622      	mov	r2, r4
 800c608:	4649      	mov	r1, r9
 800c60a:	4638      	mov	r0, r7
 800c60c:	47c0      	blx	r8
 800c60e:	3001      	adds	r0, #1
 800c610:	d0e6      	beq.n	800c5e0 <_printf_common+0xa4>
 800c612:	3601      	adds	r6, #1
 800c614:	e7d9      	b.n	800c5ca <_printf_common+0x8e>
	...

0800c618 <_printf_i>:
 800c618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c61c:	7e0f      	ldrb	r7, [r1, #24]
 800c61e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c620:	2f78      	cmp	r7, #120	; 0x78
 800c622:	4691      	mov	r9, r2
 800c624:	4680      	mov	r8, r0
 800c626:	460c      	mov	r4, r1
 800c628:	469a      	mov	sl, r3
 800c62a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c62e:	d807      	bhi.n	800c640 <_printf_i+0x28>
 800c630:	2f62      	cmp	r7, #98	; 0x62
 800c632:	d80a      	bhi.n	800c64a <_printf_i+0x32>
 800c634:	2f00      	cmp	r7, #0
 800c636:	f000 80d4 	beq.w	800c7e2 <_printf_i+0x1ca>
 800c63a:	2f58      	cmp	r7, #88	; 0x58
 800c63c:	f000 80c0 	beq.w	800c7c0 <_printf_i+0x1a8>
 800c640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c648:	e03a      	b.n	800c6c0 <_printf_i+0xa8>
 800c64a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c64e:	2b15      	cmp	r3, #21
 800c650:	d8f6      	bhi.n	800c640 <_printf_i+0x28>
 800c652:	a101      	add	r1, pc, #4	; (adr r1, 800c658 <_printf_i+0x40>)
 800c654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c658:	0800c6b1 	.word	0x0800c6b1
 800c65c:	0800c6c5 	.word	0x0800c6c5
 800c660:	0800c641 	.word	0x0800c641
 800c664:	0800c641 	.word	0x0800c641
 800c668:	0800c641 	.word	0x0800c641
 800c66c:	0800c641 	.word	0x0800c641
 800c670:	0800c6c5 	.word	0x0800c6c5
 800c674:	0800c641 	.word	0x0800c641
 800c678:	0800c641 	.word	0x0800c641
 800c67c:	0800c641 	.word	0x0800c641
 800c680:	0800c641 	.word	0x0800c641
 800c684:	0800c7c9 	.word	0x0800c7c9
 800c688:	0800c6f1 	.word	0x0800c6f1
 800c68c:	0800c783 	.word	0x0800c783
 800c690:	0800c641 	.word	0x0800c641
 800c694:	0800c641 	.word	0x0800c641
 800c698:	0800c7eb 	.word	0x0800c7eb
 800c69c:	0800c641 	.word	0x0800c641
 800c6a0:	0800c6f1 	.word	0x0800c6f1
 800c6a4:	0800c641 	.word	0x0800c641
 800c6a8:	0800c641 	.word	0x0800c641
 800c6ac:	0800c78b 	.word	0x0800c78b
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	1d1a      	adds	r2, r3, #4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	602a      	str	r2, [r5, #0]
 800c6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e09f      	b.n	800c804 <_printf_i+0x1ec>
 800c6c4:	6820      	ldr	r0, [r4, #0]
 800c6c6:	682b      	ldr	r3, [r5, #0]
 800c6c8:	0607      	lsls	r7, r0, #24
 800c6ca:	f103 0104 	add.w	r1, r3, #4
 800c6ce:	6029      	str	r1, [r5, #0]
 800c6d0:	d501      	bpl.n	800c6d6 <_printf_i+0xbe>
 800c6d2:	681e      	ldr	r6, [r3, #0]
 800c6d4:	e003      	b.n	800c6de <_printf_i+0xc6>
 800c6d6:	0646      	lsls	r6, r0, #25
 800c6d8:	d5fb      	bpl.n	800c6d2 <_printf_i+0xba>
 800c6da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c6de:	2e00      	cmp	r6, #0
 800c6e0:	da03      	bge.n	800c6ea <_printf_i+0xd2>
 800c6e2:	232d      	movs	r3, #45	; 0x2d
 800c6e4:	4276      	negs	r6, r6
 800c6e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6ea:	485a      	ldr	r0, [pc, #360]	; (800c854 <_printf_i+0x23c>)
 800c6ec:	230a      	movs	r3, #10
 800c6ee:	e012      	b.n	800c716 <_printf_i+0xfe>
 800c6f0:	682b      	ldr	r3, [r5, #0]
 800c6f2:	6820      	ldr	r0, [r4, #0]
 800c6f4:	1d19      	adds	r1, r3, #4
 800c6f6:	6029      	str	r1, [r5, #0]
 800c6f8:	0605      	lsls	r5, r0, #24
 800c6fa:	d501      	bpl.n	800c700 <_printf_i+0xe8>
 800c6fc:	681e      	ldr	r6, [r3, #0]
 800c6fe:	e002      	b.n	800c706 <_printf_i+0xee>
 800c700:	0641      	lsls	r1, r0, #25
 800c702:	d5fb      	bpl.n	800c6fc <_printf_i+0xe4>
 800c704:	881e      	ldrh	r6, [r3, #0]
 800c706:	4853      	ldr	r0, [pc, #332]	; (800c854 <_printf_i+0x23c>)
 800c708:	2f6f      	cmp	r7, #111	; 0x6f
 800c70a:	bf0c      	ite	eq
 800c70c:	2308      	moveq	r3, #8
 800c70e:	230a      	movne	r3, #10
 800c710:	2100      	movs	r1, #0
 800c712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c716:	6865      	ldr	r5, [r4, #4]
 800c718:	60a5      	str	r5, [r4, #8]
 800c71a:	2d00      	cmp	r5, #0
 800c71c:	bfa2      	ittt	ge
 800c71e:	6821      	ldrge	r1, [r4, #0]
 800c720:	f021 0104 	bicge.w	r1, r1, #4
 800c724:	6021      	strge	r1, [r4, #0]
 800c726:	b90e      	cbnz	r6, 800c72c <_printf_i+0x114>
 800c728:	2d00      	cmp	r5, #0
 800c72a:	d04b      	beq.n	800c7c4 <_printf_i+0x1ac>
 800c72c:	4615      	mov	r5, r2
 800c72e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c732:	fb03 6711 	mls	r7, r3, r1, r6
 800c736:	5dc7      	ldrb	r7, [r0, r7]
 800c738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c73c:	4637      	mov	r7, r6
 800c73e:	42bb      	cmp	r3, r7
 800c740:	460e      	mov	r6, r1
 800c742:	d9f4      	bls.n	800c72e <_printf_i+0x116>
 800c744:	2b08      	cmp	r3, #8
 800c746:	d10b      	bne.n	800c760 <_printf_i+0x148>
 800c748:	6823      	ldr	r3, [r4, #0]
 800c74a:	07de      	lsls	r6, r3, #31
 800c74c:	d508      	bpl.n	800c760 <_printf_i+0x148>
 800c74e:	6923      	ldr	r3, [r4, #16]
 800c750:	6861      	ldr	r1, [r4, #4]
 800c752:	4299      	cmp	r1, r3
 800c754:	bfde      	ittt	le
 800c756:	2330      	movle	r3, #48	; 0x30
 800c758:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c75c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c760:	1b52      	subs	r2, r2, r5
 800c762:	6122      	str	r2, [r4, #16]
 800c764:	f8cd a000 	str.w	sl, [sp]
 800c768:	464b      	mov	r3, r9
 800c76a:	aa03      	add	r2, sp, #12
 800c76c:	4621      	mov	r1, r4
 800c76e:	4640      	mov	r0, r8
 800c770:	f7ff fee4 	bl	800c53c <_printf_common>
 800c774:	3001      	adds	r0, #1
 800c776:	d14a      	bne.n	800c80e <_printf_i+0x1f6>
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	b004      	add	sp, #16
 800c77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	f043 0320 	orr.w	r3, r3, #32
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	4833      	ldr	r0, [pc, #204]	; (800c858 <_printf_i+0x240>)
 800c78c:	2778      	movs	r7, #120	; 0x78
 800c78e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	6829      	ldr	r1, [r5, #0]
 800c796:	061f      	lsls	r7, r3, #24
 800c798:	f851 6b04 	ldr.w	r6, [r1], #4
 800c79c:	d402      	bmi.n	800c7a4 <_printf_i+0x18c>
 800c79e:	065f      	lsls	r7, r3, #25
 800c7a0:	bf48      	it	mi
 800c7a2:	b2b6      	uxthmi	r6, r6
 800c7a4:	07df      	lsls	r7, r3, #31
 800c7a6:	bf48      	it	mi
 800c7a8:	f043 0320 	orrmi.w	r3, r3, #32
 800c7ac:	6029      	str	r1, [r5, #0]
 800c7ae:	bf48      	it	mi
 800c7b0:	6023      	strmi	r3, [r4, #0]
 800c7b2:	b91e      	cbnz	r6, 800c7bc <_printf_i+0x1a4>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	f023 0320 	bic.w	r3, r3, #32
 800c7ba:	6023      	str	r3, [r4, #0]
 800c7bc:	2310      	movs	r3, #16
 800c7be:	e7a7      	b.n	800c710 <_printf_i+0xf8>
 800c7c0:	4824      	ldr	r0, [pc, #144]	; (800c854 <_printf_i+0x23c>)
 800c7c2:	e7e4      	b.n	800c78e <_printf_i+0x176>
 800c7c4:	4615      	mov	r5, r2
 800c7c6:	e7bd      	b.n	800c744 <_printf_i+0x12c>
 800c7c8:	682b      	ldr	r3, [r5, #0]
 800c7ca:	6826      	ldr	r6, [r4, #0]
 800c7cc:	6961      	ldr	r1, [r4, #20]
 800c7ce:	1d18      	adds	r0, r3, #4
 800c7d0:	6028      	str	r0, [r5, #0]
 800c7d2:	0635      	lsls	r5, r6, #24
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	d501      	bpl.n	800c7dc <_printf_i+0x1c4>
 800c7d8:	6019      	str	r1, [r3, #0]
 800c7da:	e002      	b.n	800c7e2 <_printf_i+0x1ca>
 800c7dc:	0670      	lsls	r0, r6, #25
 800c7de:	d5fb      	bpl.n	800c7d8 <_printf_i+0x1c0>
 800c7e0:	8019      	strh	r1, [r3, #0]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	6123      	str	r3, [r4, #16]
 800c7e6:	4615      	mov	r5, r2
 800c7e8:	e7bc      	b.n	800c764 <_printf_i+0x14c>
 800c7ea:	682b      	ldr	r3, [r5, #0]
 800c7ec:	1d1a      	adds	r2, r3, #4
 800c7ee:	602a      	str	r2, [r5, #0]
 800c7f0:	681d      	ldr	r5, [r3, #0]
 800c7f2:	6862      	ldr	r2, [r4, #4]
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	f7f3 fcea 	bl	80001d0 <memchr>
 800c7fc:	b108      	cbz	r0, 800c802 <_printf_i+0x1ea>
 800c7fe:	1b40      	subs	r0, r0, r5
 800c800:	6060      	str	r0, [r4, #4]
 800c802:	6863      	ldr	r3, [r4, #4]
 800c804:	6123      	str	r3, [r4, #16]
 800c806:	2300      	movs	r3, #0
 800c808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c80c:	e7aa      	b.n	800c764 <_printf_i+0x14c>
 800c80e:	6923      	ldr	r3, [r4, #16]
 800c810:	462a      	mov	r2, r5
 800c812:	4649      	mov	r1, r9
 800c814:	4640      	mov	r0, r8
 800c816:	47d0      	blx	sl
 800c818:	3001      	adds	r0, #1
 800c81a:	d0ad      	beq.n	800c778 <_printf_i+0x160>
 800c81c:	6823      	ldr	r3, [r4, #0]
 800c81e:	079b      	lsls	r3, r3, #30
 800c820:	d413      	bmi.n	800c84a <_printf_i+0x232>
 800c822:	68e0      	ldr	r0, [r4, #12]
 800c824:	9b03      	ldr	r3, [sp, #12]
 800c826:	4298      	cmp	r0, r3
 800c828:	bfb8      	it	lt
 800c82a:	4618      	movlt	r0, r3
 800c82c:	e7a6      	b.n	800c77c <_printf_i+0x164>
 800c82e:	2301      	movs	r3, #1
 800c830:	4632      	mov	r2, r6
 800c832:	4649      	mov	r1, r9
 800c834:	4640      	mov	r0, r8
 800c836:	47d0      	blx	sl
 800c838:	3001      	adds	r0, #1
 800c83a:	d09d      	beq.n	800c778 <_printf_i+0x160>
 800c83c:	3501      	adds	r5, #1
 800c83e:	68e3      	ldr	r3, [r4, #12]
 800c840:	9903      	ldr	r1, [sp, #12]
 800c842:	1a5b      	subs	r3, r3, r1
 800c844:	42ab      	cmp	r3, r5
 800c846:	dcf2      	bgt.n	800c82e <_printf_i+0x216>
 800c848:	e7eb      	b.n	800c822 <_printf_i+0x20a>
 800c84a:	2500      	movs	r5, #0
 800c84c:	f104 0619 	add.w	r6, r4, #25
 800c850:	e7f5      	b.n	800c83e <_printf_i+0x226>
 800c852:	bf00      	nop
 800c854:	080f248c 	.word	0x080f248c
 800c858:	080f249d 	.word	0x080f249d

0800c85c <__sflush_r>:
 800c85c:	898a      	ldrh	r2, [r1, #12]
 800c85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c862:	4605      	mov	r5, r0
 800c864:	0710      	lsls	r0, r2, #28
 800c866:	460c      	mov	r4, r1
 800c868:	d458      	bmi.n	800c91c <__sflush_r+0xc0>
 800c86a:	684b      	ldr	r3, [r1, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	dc05      	bgt.n	800c87c <__sflush_r+0x20>
 800c870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c872:	2b00      	cmp	r3, #0
 800c874:	dc02      	bgt.n	800c87c <__sflush_r+0x20>
 800c876:	2000      	movs	r0, #0
 800c878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c87c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c87e:	2e00      	cmp	r6, #0
 800c880:	d0f9      	beq.n	800c876 <__sflush_r+0x1a>
 800c882:	2300      	movs	r3, #0
 800c884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c888:	682f      	ldr	r7, [r5, #0]
 800c88a:	6a21      	ldr	r1, [r4, #32]
 800c88c:	602b      	str	r3, [r5, #0]
 800c88e:	d032      	beq.n	800c8f6 <__sflush_r+0x9a>
 800c890:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c892:	89a3      	ldrh	r3, [r4, #12]
 800c894:	075a      	lsls	r2, r3, #29
 800c896:	d505      	bpl.n	800c8a4 <__sflush_r+0x48>
 800c898:	6863      	ldr	r3, [r4, #4]
 800c89a:	1ac0      	subs	r0, r0, r3
 800c89c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c89e:	b10b      	cbz	r3, 800c8a4 <__sflush_r+0x48>
 800c8a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8a2:	1ac0      	subs	r0, r0, r3
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8aa:	6a21      	ldr	r1, [r4, #32]
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	47b0      	blx	r6
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	d106      	bne.n	800c8c4 <__sflush_r+0x68>
 800c8b6:	6829      	ldr	r1, [r5, #0]
 800c8b8:	291d      	cmp	r1, #29
 800c8ba:	d82b      	bhi.n	800c914 <__sflush_r+0xb8>
 800c8bc:	4a29      	ldr	r2, [pc, #164]	; (800c964 <__sflush_r+0x108>)
 800c8be:	410a      	asrs	r2, r1
 800c8c0:	07d6      	lsls	r6, r2, #31
 800c8c2:	d427      	bmi.n	800c914 <__sflush_r+0xb8>
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	6062      	str	r2, [r4, #4]
 800c8c8:	04d9      	lsls	r1, r3, #19
 800c8ca:	6922      	ldr	r2, [r4, #16]
 800c8cc:	6022      	str	r2, [r4, #0]
 800c8ce:	d504      	bpl.n	800c8da <__sflush_r+0x7e>
 800c8d0:	1c42      	adds	r2, r0, #1
 800c8d2:	d101      	bne.n	800c8d8 <__sflush_r+0x7c>
 800c8d4:	682b      	ldr	r3, [r5, #0]
 800c8d6:	b903      	cbnz	r3, 800c8da <__sflush_r+0x7e>
 800c8d8:	6560      	str	r0, [r4, #84]	; 0x54
 800c8da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8dc:	602f      	str	r7, [r5, #0]
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d0c9      	beq.n	800c876 <__sflush_r+0x1a>
 800c8e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8e6:	4299      	cmp	r1, r3
 800c8e8:	d002      	beq.n	800c8f0 <__sflush_r+0x94>
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff fd26 	bl	800c33c <_free_r>
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	6360      	str	r0, [r4, #52]	; 0x34
 800c8f4:	e7c0      	b.n	800c878 <__sflush_r+0x1c>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b0      	blx	r6
 800c8fc:	1c41      	adds	r1, r0, #1
 800c8fe:	d1c8      	bne.n	800c892 <__sflush_r+0x36>
 800c900:	682b      	ldr	r3, [r5, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0c5      	beq.n	800c892 <__sflush_r+0x36>
 800c906:	2b1d      	cmp	r3, #29
 800c908:	d001      	beq.n	800c90e <__sflush_r+0xb2>
 800c90a:	2b16      	cmp	r3, #22
 800c90c:	d101      	bne.n	800c912 <__sflush_r+0xb6>
 800c90e:	602f      	str	r7, [r5, #0]
 800c910:	e7b1      	b.n	800c876 <__sflush_r+0x1a>
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c918:	81a3      	strh	r3, [r4, #12]
 800c91a:	e7ad      	b.n	800c878 <__sflush_r+0x1c>
 800c91c:	690f      	ldr	r7, [r1, #16]
 800c91e:	2f00      	cmp	r7, #0
 800c920:	d0a9      	beq.n	800c876 <__sflush_r+0x1a>
 800c922:	0793      	lsls	r3, r2, #30
 800c924:	680e      	ldr	r6, [r1, #0]
 800c926:	bf08      	it	eq
 800c928:	694b      	ldreq	r3, [r1, #20]
 800c92a:	600f      	str	r7, [r1, #0]
 800c92c:	bf18      	it	ne
 800c92e:	2300      	movne	r3, #0
 800c930:	eba6 0807 	sub.w	r8, r6, r7
 800c934:	608b      	str	r3, [r1, #8]
 800c936:	f1b8 0f00 	cmp.w	r8, #0
 800c93a:	dd9c      	ble.n	800c876 <__sflush_r+0x1a>
 800c93c:	6a21      	ldr	r1, [r4, #32]
 800c93e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c940:	4643      	mov	r3, r8
 800c942:	463a      	mov	r2, r7
 800c944:	4628      	mov	r0, r5
 800c946:	47b0      	blx	r6
 800c948:	2800      	cmp	r0, #0
 800c94a:	dc06      	bgt.n	800c95a <__sflush_r+0xfe>
 800c94c:	89a3      	ldrh	r3, [r4, #12]
 800c94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c952:	81a3      	strh	r3, [r4, #12]
 800c954:	f04f 30ff 	mov.w	r0, #4294967295
 800c958:	e78e      	b.n	800c878 <__sflush_r+0x1c>
 800c95a:	4407      	add	r7, r0
 800c95c:	eba8 0800 	sub.w	r8, r8, r0
 800c960:	e7e9      	b.n	800c936 <__sflush_r+0xda>
 800c962:	bf00      	nop
 800c964:	dfbffffe 	.word	0xdfbffffe

0800c968 <_fflush_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	690b      	ldr	r3, [r1, #16]
 800c96c:	4605      	mov	r5, r0
 800c96e:	460c      	mov	r4, r1
 800c970:	b913      	cbnz	r3, 800c978 <_fflush_r+0x10>
 800c972:	2500      	movs	r5, #0
 800c974:	4628      	mov	r0, r5
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	b118      	cbz	r0, 800c982 <_fflush_r+0x1a>
 800c97a:	6a03      	ldr	r3, [r0, #32]
 800c97c:	b90b      	cbnz	r3, 800c982 <_fflush_r+0x1a>
 800c97e:	f7ff fbc9 	bl	800c114 <__sinit>
 800c982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d0f3      	beq.n	800c972 <_fflush_r+0xa>
 800c98a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c98c:	07d0      	lsls	r0, r2, #31
 800c98e:	d404      	bmi.n	800c99a <_fflush_r+0x32>
 800c990:	0599      	lsls	r1, r3, #22
 800c992:	d402      	bmi.n	800c99a <_fflush_r+0x32>
 800c994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c996:	f7ff fcb0 	bl	800c2fa <__retarget_lock_acquire_recursive>
 800c99a:	4628      	mov	r0, r5
 800c99c:	4621      	mov	r1, r4
 800c99e:	f7ff ff5d 	bl	800c85c <__sflush_r>
 800c9a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9a4:	07da      	lsls	r2, r3, #31
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	d4e4      	bmi.n	800c974 <_fflush_r+0xc>
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	059b      	lsls	r3, r3, #22
 800c9ae:	d4e1      	bmi.n	800c974 <_fflush_r+0xc>
 800c9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9b2:	f7ff fca3 	bl	800c2fc <__retarget_lock_release_recursive>
 800c9b6:	e7dd      	b.n	800c974 <_fflush_r+0xc>

0800c9b8 <fiprintf>:
 800c9b8:	b40e      	push	{r1, r2, r3}
 800c9ba:	b503      	push	{r0, r1, lr}
 800c9bc:	4601      	mov	r1, r0
 800c9be:	ab03      	add	r3, sp, #12
 800c9c0:	4805      	ldr	r0, [pc, #20]	; (800c9d8 <fiprintf+0x20>)
 800c9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c6:	6800      	ldr	r0, [r0, #0]
 800c9c8:	9301      	str	r3, [sp, #4]
 800c9ca:	f000 f847 	bl	800ca5c <_vfiprintf_r>
 800c9ce:	b002      	add	sp, #8
 800c9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9d4:	b003      	add	sp, #12
 800c9d6:	4770      	bx	lr
 800c9d8:	20000108 	.word	0x20000108

0800c9dc <_sbrk_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4d06      	ldr	r5, [pc, #24]	; (800c9f8 <_sbrk_r+0x1c>)
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	602b      	str	r3, [r5, #0]
 800c9e8:	f7f8 fae2 	bl	8004fb0 <_sbrk>
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d102      	bne.n	800c9f6 <_sbrk_r+0x1a>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	b103      	cbz	r3, 800c9f6 <_sbrk_r+0x1a>
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	2000098c 	.word	0x2000098c

0800c9fc <abort>:
 800c9fc:	b508      	push	{r3, lr}
 800c9fe:	2006      	movs	r0, #6
 800ca00:	f000 fa04 	bl	800ce0c <raise>
 800ca04:	2001      	movs	r0, #1
 800ca06:	f7f8 fa5b 	bl	8004ec0 <_exit>

0800ca0a <__sfputc_r>:
 800ca0a:	6893      	ldr	r3, [r2, #8]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	b410      	push	{r4}
 800ca12:	6093      	str	r3, [r2, #8]
 800ca14:	da08      	bge.n	800ca28 <__sfputc_r+0x1e>
 800ca16:	6994      	ldr	r4, [r2, #24]
 800ca18:	42a3      	cmp	r3, r4
 800ca1a:	db01      	blt.n	800ca20 <__sfputc_r+0x16>
 800ca1c:	290a      	cmp	r1, #10
 800ca1e:	d103      	bne.n	800ca28 <__sfputc_r+0x1e>
 800ca20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca24:	f000 b934 	b.w	800cc90 <__swbuf_r>
 800ca28:	6813      	ldr	r3, [r2, #0]
 800ca2a:	1c58      	adds	r0, r3, #1
 800ca2c:	6010      	str	r0, [r2, #0]
 800ca2e:	7019      	strb	r1, [r3, #0]
 800ca30:	4608      	mov	r0, r1
 800ca32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <__sfputs_r>:
 800ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460f      	mov	r7, r1
 800ca3e:	4614      	mov	r4, r2
 800ca40:	18d5      	adds	r5, r2, r3
 800ca42:	42ac      	cmp	r4, r5
 800ca44:	d101      	bne.n	800ca4a <__sfputs_r+0x12>
 800ca46:	2000      	movs	r0, #0
 800ca48:	e007      	b.n	800ca5a <__sfputs_r+0x22>
 800ca4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4e:	463a      	mov	r2, r7
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7ff ffda 	bl	800ca0a <__sfputc_r>
 800ca56:	1c43      	adds	r3, r0, #1
 800ca58:	d1f3      	bne.n	800ca42 <__sfputs_r+0xa>
 800ca5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca5c <_vfiprintf_r>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	460d      	mov	r5, r1
 800ca62:	b09d      	sub	sp, #116	; 0x74
 800ca64:	4614      	mov	r4, r2
 800ca66:	4698      	mov	r8, r3
 800ca68:	4606      	mov	r6, r0
 800ca6a:	b118      	cbz	r0, 800ca74 <_vfiprintf_r+0x18>
 800ca6c:	6a03      	ldr	r3, [r0, #32]
 800ca6e:	b90b      	cbnz	r3, 800ca74 <_vfiprintf_r+0x18>
 800ca70:	f7ff fb50 	bl	800c114 <__sinit>
 800ca74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca76:	07d9      	lsls	r1, r3, #31
 800ca78:	d405      	bmi.n	800ca86 <_vfiprintf_r+0x2a>
 800ca7a:	89ab      	ldrh	r3, [r5, #12]
 800ca7c:	059a      	lsls	r2, r3, #22
 800ca7e:	d402      	bmi.n	800ca86 <_vfiprintf_r+0x2a>
 800ca80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca82:	f7ff fc3a 	bl	800c2fa <__retarget_lock_acquire_recursive>
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	071b      	lsls	r3, r3, #28
 800ca8a:	d501      	bpl.n	800ca90 <_vfiprintf_r+0x34>
 800ca8c:	692b      	ldr	r3, [r5, #16]
 800ca8e:	b99b      	cbnz	r3, 800cab8 <_vfiprintf_r+0x5c>
 800ca90:	4629      	mov	r1, r5
 800ca92:	4630      	mov	r0, r6
 800ca94:	f000 f93a 	bl	800cd0c <__swsetup_r>
 800ca98:	b170      	cbz	r0, 800cab8 <_vfiprintf_r+0x5c>
 800ca9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca9c:	07dc      	lsls	r4, r3, #31
 800ca9e:	d504      	bpl.n	800caaa <_vfiprintf_r+0x4e>
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	b01d      	add	sp, #116	; 0x74
 800caa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caaa:	89ab      	ldrh	r3, [r5, #12]
 800caac:	0598      	lsls	r0, r3, #22
 800caae:	d4f7      	bmi.n	800caa0 <_vfiprintf_r+0x44>
 800cab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cab2:	f7ff fc23 	bl	800c2fc <__retarget_lock_release_recursive>
 800cab6:	e7f3      	b.n	800caa0 <_vfiprintf_r+0x44>
 800cab8:	2300      	movs	r3, #0
 800caba:	9309      	str	r3, [sp, #36]	; 0x24
 800cabc:	2320      	movs	r3, #32
 800cabe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cac2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cac6:	2330      	movs	r3, #48	; 0x30
 800cac8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cc7c <_vfiprintf_r+0x220>
 800cacc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cad0:	f04f 0901 	mov.w	r9, #1
 800cad4:	4623      	mov	r3, r4
 800cad6:	469a      	mov	sl, r3
 800cad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cadc:	b10a      	cbz	r2, 800cae2 <_vfiprintf_r+0x86>
 800cade:	2a25      	cmp	r2, #37	; 0x25
 800cae0:	d1f9      	bne.n	800cad6 <_vfiprintf_r+0x7a>
 800cae2:	ebba 0b04 	subs.w	fp, sl, r4
 800cae6:	d00b      	beq.n	800cb00 <_vfiprintf_r+0xa4>
 800cae8:	465b      	mov	r3, fp
 800caea:	4622      	mov	r2, r4
 800caec:	4629      	mov	r1, r5
 800caee:	4630      	mov	r0, r6
 800caf0:	f7ff ffa2 	bl	800ca38 <__sfputs_r>
 800caf4:	3001      	adds	r0, #1
 800caf6:	f000 80a9 	beq.w	800cc4c <_vfiprintf_r+0x1f0>
 800cafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cafc:	445a      	add	r2, fp
 800cafe:	9209      	str	r2, [sp, #36]	; 0x24
 800cb00:	f89a 3000 	ldrb.w	r3, [sl]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 80a1 	beq.w	800cc4c <_vfiprintf_r+0x1f0>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb14:	f10a 0a01 	add.w	sl, sl, #1
 800cb18:	9304      	str	r3, [sp, #16]
 800cb1a:	9307      	str	r3, [sp, #28]
 800cb1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb20:	931a      	str	r3, [sp, #104]	; 0x68
 800cb22:	4654      	mov	r4, sl
 800cb24:	2205      	movs	r2, #5
 800cb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2a:	4854      	ldr	r0, [pc, #336]	; (800cc7c <_vfiprintf_r+0x220>)
 800cb2c:	f7f3 fb50 	bl	80001d0 <memchr>
 800cb30:	9a04      	ldr	r2, [sp, #16]
 800cb32:	b9d8      	cbnz	r0, 800cb6c <_vfiprintf_r+0x110>
 800cb34:	06d1      	lsls	r1, r2, #27
 800cb36:	bf44      	itt	mi
 800cb38:	2320      	movmi	r3, #32
 800cb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb3e:	0713      	lsls	r3, r2, #28
 800cb40:	bf44      	itt	mi
 800cb42:	232b      	movmi	r3, #43	; 0x2b
 800cb44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb48:	f89a 3000 	ldrb.w	r3, [sl]
 800cb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb4e:	d015      	beq.n	800cb7c <_vfiprintf_r+0x120>
 800cb50:	9a07      	ldr	r2, [sp, #28]
 800cb52:	4654      	mov	r4, sl
 800cb54:	2000      	movs	r0, #0
 800cb56:	f04f 0c0a 	mov.w	ip, #10
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb60:	3b30      	subs	r3, #48	; 0x30
 800cb62:	2b09      	cmp	r3, #9
 800cb64:	d94d      	bls.n	800cc02 <_vfiprintf_r+0x1a6>
 800cb66:	b1b0      	cbz	r0, 800cb96 <_vfiprintf_r+0x13a>
 800cb68:	9207      	str	r2, [sp, #28]
 800cb6a:	e014      	b.n	800cb96 <_vfiprintf_r+0x13a>
 800cb6c:	eba0 0308 	sub.w	r3, r0, r8
 800cb70:	fa09 f303 	lsl.w	r3, r9, r3
 800cb74:	4313      	orrs	r3, r2
 800cb76:	9304      	str	r3, [sp, #16]
 800cb78:	46a2      	mov	sl, r4
 800cb7a:	e7d2      	b.n	800cb22 <_vfiprintf_r+0xc6>
 800cb7c:	9b03      	ldr	r3, [sp, #12]
 800cb7e:	1d19      	adds	r1, r3, #4
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	9103      	str	r1, [sp, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	bfbb      	ittet	lt
 800cb88:	425b      	neglt	r3, r3
 800cb8a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb8e:	9307      	strge	r3, [sp, #28]
 800cb90:	9307      	strlt	r3, [sp, #28]
 800cb92:	bfb8      	it	lt
 800cb94:	9204      	strlt	r2, [sp, #16]
 800cb96:	7823      	ldrb	r3, [r4, #0]
 800cb98:	2b2e      	cmp	r3, #46	; 0x2e
 800cb9a:	d10c      	bne.n	800cbb6 <_vfiprintf_r+0x15a>
 800cb9c:	7863      	ldrb	r3, [r4, #1]
 800cb9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cba0:	d134      	bne.n	800cc0c <_vfiprintf_r+0x1b0>
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	1d1a      	adds	r2, r3, #4
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	9203      	str	r2, [sp, #12]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	bfb8      	it	lt
 800cbae:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbb2:	3402      	adds	r4, #2
 800cbb4:	9305      	str	r3, [sp, #20]
 800cbb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cc8c <_vfiprintf_r+0x230>
 800cbba:	7821      	ldrb	r1, [r4, #0]
 800cbbc:	2203      	movs	r2, #3
 800cbbe:	4650      	mov	r0, sl
 800cbc0:	f7f3 fb06 	bl	80001d0 <memchr>
 800cbc4:	b138      	cbz	r0, 800cbd6 <_vfiprintf_r+0x17a>
 800cbc6:	9b04      	ldr	r3, [sp, #16]
 800cbc8:	eba0 000a 	sub.w	r0, r0, sl
 800cbcc:	2240      	movs	r2, #64	; 0x40
 800cbce:	4082      	lsls	r2, r0
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	3401      	adds	r4, #1
 800cbd4:	9304      	str	r3, [sp, #16]
 800cbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbda:	4829      	ldr	r0, [pc, #164]	; (800cc80 <_vfiprintf_r+0x224>)
 800cbdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbe0:	2206      	movs	r2, #6
 800cbe2:	f7f3 faf5 	bl	80001d0 <memchr>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d03f      	beq.n	800cc6a <_vfiprintf_r+0x20e>
 800cbea:	4b26      	ldr	r3, [pc, #152]	; (800cc84 <_vfiprintf_r+0x228>)
 800cbec:	bb1b      	cbnz	r3, 800cc36 <_vfiprintf_r+0x1da>
 800cbee:	9b03      	ldr	r3, [sp, #12]
 800cbf0:	3307      	adds	r3, #7
 800cbf2:	f023 0307 	bic.w	r3, r3, #7
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	9303      	str	r3, [sp, #12]
 800cbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbfc:	443b      	add	r3, r7
 800cbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800cc00:	e768      	b.n	800cad4 <_vfiprintf_r+0x78>
 800cc02:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc06:	460c      	mov	r4, r1
 800cc08:	2001      	movs	r0, #1
 800cc0a:	e7a6      	b.n	800cb5a <_vfiprintf_r+0xfe>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	3401      	adds	r4, #1
 800cc10:	9305      	str	r3, [sp, #20]
 800cc12:	4619      	mov	r1, r3
 800cc14:	f04f 0c0a 	mov.w	ip, #10
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc1e:	3a30      	subs	r2, #48	; 0x30
 800cc20:	2a09      	cmp	r2, #9
 800cc22:	d903      	bls.n	800cc2c <_vfiprintf_r+0x1d0>
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d0c6      	beq.n	800cbb6 <_vfiprintf_r+0x15a>
 800cc28:	9105      	str	r1, [sp, #20]
 800cc2a:	e7c4      	b.n	800cbb6 <_vfiprintf_r+0x15a>
 800cc2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc30:	4604      	mov	r4, r0
 800cc32:	2301      	movs	r3, #1
 800cc34:	e7f0      	b.n	800cc18 <_vfiprintf_r+0x1bc>
 800cc36:	ab03      	add	r3, sp, #12
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	462a      	mov	r2, r5
 800cc3c:	4b12      	ldr	r3, [pc, #72]	; (800cc88 <_vfiprintf_r+0x22c>)
 800cc3e:	a904      	add	r1, sp, #16
 800cc40:	4630      	mov	r0, r6
 800cc42:	f3af 8000 	nop.w
 800cc46:	4607      	mov	r7, r0
 800cc48:	1c78      	adds	r0, r7, #1
 800cc4a:	d1d6      	bne.n	800cbfa <_vfiprintf_r+0x19e>
 800cc4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc4e:	07d9      	lsls	r1, r3, #31
 800cc50:	d405      	bmi.n	800cc5e <_vfiprintf_r+0x202>
 800cc52:	89ab      	ldrh	r3, [r5, #12]
 800cc54:	059a      	lsls	r2, r3, #22
 800cc56:	d402      	bmi.n	800cc5e <_vfiprintf_r+0x202>
 800cc58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc5a:	f7ff fb4f 	bl	800c2fc <__retarget_lock_release_recursive>
 800cc5e:	89ab      	ldrh	r3, [r5, #12]
 800cc60:	065b      	lsls	r3, r3, #25
 800cc62:	f53f af1d 	bmi.w	800caa0 <_vfiprintf_r+0x44>
 800cc66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc68:	e71c      	b.n	800caa4 <_vfiprintf_r+0x48>
 800cc6a:	ab03      	add	r3, sp, #12
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	462a      	mov	r2, r5
 800cc70:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <_vfiprintf_r+0x22c>)
 800cc72:	a904      	add	r1, sp, #16
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff fccf 	bl	800c618 <_printf_i>
 800cc7a:	e7e4      	b.n	800cc46 <_vfiprintf_r+0x1ea>
 800cc7c:	080f24ae 	.word	0x080f24ae
 800cc80:	080f24b8 	.word	0x080f24b8
 800cc84:	00000000 	.word	0x00000000
 800cc88:	0800ca39 	.word	0x0800ca39
 800cc8c:	080f24b4 	.word	0x080f24b4

0800cc90 <__swbuf_r>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	460e      	mov	r6, r1
 800cc94:	4614      	mov	r4, r2
 800cc96:	4605      	mov	r5, r0
 800cc98:	b118      	cbz	r0, 800cca2 <__swbuf_r+0x12>
 800cc9a:	6a03      	ldr	r3, [r0, #32]
 800cc9c:	b90b      	cbnz	r3, 800cca2 <__swbuf_r+0x12>
 800cc9e:	f7ff fa39 	bl	800c114 <__sinit>
 800cca2:	69a3      	ldr	r3, [r4, #24]
 800cca4:	60a3      	str	r3, [r4, #8]
 800cca6:	89a3      	ldrh	r3, [r4, #12]
 800cca8:	071a      	lsls	r2, r3, #28
 800ccaa:	d525      	bpl.n	800ccf8 <__swbuf_r+0x68>
 800ccac:	6923      	ldr	r3, [r4, #16]
 800ccae:	b31b      	cbz	r3, 800ccf8 <__swbuf_r+0x68>
 800ccb0:	6823      	ldr	r3, [r4, #0]
 800ccb2:	6922      	ldr	r2, [r4, #16]
 800ccb4:	1a98      	subs	r0, r3, r2
 800ccb6:	6963      	ldr	r3, [r4, #20]
 800ccb8:	b2f6      	uxtb	r6, r6
 800ccba:	4283      	cmp	r3, r0
 800ccbc:	4637      	mov	r7, r6
 800ccbe:	dc04      	bgt.n	800ccca <__swbuf_r+0x3a>
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f7ff fe50 	bl	800c968 <_fflush_r>
 800ccc8:	b9e0      	cbnz	r0, 800cd04 <__swbuf_r+0x74>
 800ccca:	68a3      	ldr	r3, [r4, #8]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	60a3      	str	r3, [r4, #8]
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	6022      	str	r2, [r4, #0]
 800ccd6:	701e      	strb	r6, [r3, #0]
 800ccd8:	6962      	ldr	r2, [r4, #20]
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d004      	beq.n	800ccea <__swbuf_r+0x5a>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	07db      	lsls	r3, r3, #31
 800cce4:	d506      	bpl.n	800ccf4 <__swbuf_r+0x64>
 800cce6:	2e0a      	cmp	r6, #10
 800cce8:	d104      	bne.n	800ccf4 <__swbuf_r+0x64>
 800ccea:	4621      	mov	r1, r4
 800ccec:	4628      	mov	r0, r5
 800ccee:	f7ff fe3b 	bl	800c968 <_fflush_r>
 800ccf2:	b938      	cbnz	r0, 800cd04 <__swbuf_r+0x74>
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f000 f806 	bl	800cd0c <__swsetup_r>
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d0d5      	beq.n	800ccb0 <__swbuf_r+0x20>
 800cd04:	f04f 37ff 	mov.w	r7, #4294967295
 800cd08:	e7f4      	b.n	800ccf4 <__swbuf_r+0x64>
	...

0800cd0c <__swsetup_r>:
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	4b2a      	ldr	r3, [pc, #168]	; (800cdb8 <__swsetup_r+0xac>)
 800cd10:	4605      	mov	r5, r0
 800cd12:	6818      	ldr	r0, [r3, #0]
 800cd14:	460c      	mov	r4, r1
 800cd16:	b118      	cbz	r0, 800cd20 <__swsetup_r+0x14>
 800cd18:	6a03      	ldr	r3, [r0, #32]
 800cd1a:	b90b      	cbnz	r3, 800cd20 <__swsetup_r+0x14>
 800cd1c:	f7ff f9fa 	bl	800c114 <__sinit>
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd26:	0718      	lsls	r0, r3, #28
 800cd28:	d422      	bmi.n	800cd70 <__swsetup_r+0x64>
 800cd2a:	06d9      	lsls	r1, r3, #27
 800cd2c:	d407      	bmi.n	800cd3e <__swsetup_r+0x32>
 800cd2e:	2309      	movs	r3, #9
 800cd30:	602b      	str	r3, [r5, #0]
 800cd32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd36:	81a3      	strh	r3, [r4, #12]
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3c:	e034      	b.n	800cda8 <__swsetup_r+0x9c>
 800cd3e:	0758      	lsls	r0, r3, #29
 800cd40:	d512      	bpl.n	800cd68 <__swsetup_r+0x5c>
 800cd42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd44:	b141      	cbz	r1, 800cd58 <__swsetup_r+0x4c>
 800cd46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd4a:	4299      	cmp	r1, r3
 800cd4c:	d002      	beq.n	800cd54 <__swsetup_r+0x48>
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f7ff faf4 	bl	800c33c <_free_r>
 800cd54:	2300      	movs	r3, #0
 800cd56:	6363      	str	r3, [r4, #52]	; 0x34
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	2300      	movs	r3, #0
 800cd62:	6063      	str	r3, [r4, #4]
 800cd64:	6923      	ldr	r3, [r4, #16]
 800cd66:	6023      	str	r3, [r4, #0]
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	f043 0308 	orr.w	r3, r3, #8
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	b94b      	cbnz	r3, 800cd88 <__swsetup_r+0x7c>
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd7e:	d003      	beq.n	800cd88 <__swsetup_r+0x7c>
 800cd80:	4621      	mov	r1, r4
 800cd82:	4628      	mov	r0, r5
 800cd84:	f000 f884 	bl	800ce90 <__smakebuf_r>
 800cd88:	89a0      	ldrh	r0, [r4, #12]
 800cd8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd8e:	f010 0301 	ands.w	r3, r0, #1
 800cd92:	d00a      	beq.n	800cdaa <__swsetup_r+0x9e>
 800cd94:	2300      	movs	r3, #0
 800cd96:	60a3      	str	r3, [r4, #8]
 800cd98:	6963      	ldr	r3, [r4, #20]
 800cd9a:	425b      	negs	r3, r3
 800cd9c:	61a3      	str	r3, [r4, #24]
 800cd9e:	6923      	ldr	r3, [r4, #16]
 800cda0:	b943      	cbnz	r3, 800cdb4 <__swsetup_r+0xa8>
 800cda2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cda6:	d1c4      	bne.n	800cd32 <__swsetup_r+0x26>
 800cda8:	bd38      	pop	{r3, r4, r5, pc}
 800cdaa:	0781      	lsls	r1, r0, #30
 800cdac:	bf58      	it	pl
 800cdae:	6963      	ldrpl	r3, [r4, #20]
 800cdb0:	60a3      	str	r3, [r4, #8]
 800cdb2:	e7f4      	b.n	800cd9e <__swsetup_r+0x92>
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e7f7      	b.n	800cda8 <__swsetup_r+0x9c>
 800cdb8:	20000108 	.word	0x20000108

0800cdbc <_raise_r>:
 800cdbc:	291f      	cmp	r1, #31
 800cdbe:	b538      	push	{r3, r4, r5, lr}
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	d904      	bls.n	800cdd0 <_raise_r+0x14>
 800cdc6:	2316      	movs	r3, #22
 800cdc8:	6003      	str	r3, [r0, #0]
 800cdca:	f04f 30ff 	mov.w	r0, #4294967295
 800cdce:	bd38      	pop	{r3, r4, r5, pc}
 800cdd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cdd2:	b112      	cbz	r2, 800cdda <_raise_r+0x1e>
 800cdd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdd8:	b94b      	cbnz	r3, 800cdee <_raise_r+0x32>
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 f830 	bl	800ce40 <_getpid_r>
 800cde0:	462a      	mov	r2, r5
 800cde2:	4601      	mov	r1, r0
 800cde4:	4620      	mov	r0, r4
 800cde6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdea:	f000 b817 	b.w	800ce1c <_kill_r>
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d00a      	beq.n	800ce08 <_raise_r+0x4c>
 800cdf2:	1c59      	adds	r1, r3, #1
 800cdf4:	d103      	bne.n	800cdfe <_raise_r+0x42>
 800cdf6:	2316      	movs	r3, #22
 800cdf8:	6003      	str	r3, [r0, #0]
 800cdfa:	2001      	movs	r0, #1
 800cdfc:	e7e7      	b.n	800cdce <_raise_r+0x12>
 800cdfe:	2400      	movs	r4, #0
 800ce00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce04:	4628      	mov	r0, r5
 800ce06:	4798      	blx	r3
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e7e0      	b.n	800cdce <_raise_r+0x12>

0800ce0c <raise>:
 800ce0c:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <raise+0xc>)
 800ce0e:	4601      	mov	r1, r0
 800ce10:	6818      	ldr	r0, [r3, #0]
 800ce12:	f7ff bfd3 	b.w	800cdbc <_raise_r>
 800ce16:	bf00      	nop
 800ce18:	20000108 	.word	0x20000108

0800ce1c <_kill_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	4d07      	ldr	r5, [pc, #28]	; (800ce3c <_kill_r+0x20>)
 800ce20:	2300      	movs	r3, #0
 800ce22:	4604      	mov	r4, r0
 800ce24:	4608      	mov	r0, r1
 800ce26:	4611      	mov	r1, r2
 800ce28:	602b      	str	r3, [r5, #0]
 800ce2a:	f7f8 f839 	bl	8004ea0 <_kill>
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	d102      	bne.n	800ce38 <_kill_r+0x1c>
 800ce32:	682b      	ldr	r3, [r5, #0]
 800ce34:	b103      	cbz	r3, 800ce38 <_kill_r+0x1c>
 800ce36:	6023      	str	r3, [r4, #0]
 800ce38:	bd38      	pop	{r3, r4, r5, pc}
 800ce3a:	bf00      	nop
 800ce3c:	2000098c 	.word	0x2000098c

0800ce40 <_getpid_r>:
 800ce40:	f7f8 b826 	b.w	8004e90 <_getpid>

0800ce44 <__swhatbuf_r>:
 800ce44:	b570      	push	{r4, r5, r6, lr}
 800ce46:	460c      	mov	r4, r1
 800ce48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4c:	2900      	cmp	r1, #0
 800ce4e:	b096      	sub	sp, #88	; 0x58
 800ce50:	4615      	mov	r5, r2
 800ce52:	461e      	mov	r6, r3
 800ce54:	da0d      	bge.n	800ce72 <__swhatbuf_r+0x2e>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce5c:	f04f 0100 	mov.w	r1, #0
 800ce60:	bf0c      	ite	eq
 800ce62:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ce66:	2340      	movne	r3, #64	; 0x40
 800ce68:	2000      	movs	r0, #0
 800ce6a:	6031      	str	r1, [r6, #0]
 800ce6c:	602b      	str	r3, [r5, #0]
 800ce6e:	b016      	add	sp, #88	; 0x58
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
 800ce72:	466a      	mov	r2, sp
 800ce74:	f000 f848 	bl	800cf08 <_fstat_r>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	dbec      	blt.n	800ce56 <__swhatbuf_r+0x12>
 800ce7c:	9901      	ldr	r1, [sp, #4]
 800ce7e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce82:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce86:	4259      	negs	r1, r3
 800ce88:	4159      	adcs	r1, r3
 800ce8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce8e:	e7eb      	b.n	800ce68 <__swhatbuf_r+0x24>

0800ce90 <__smakebuf_r>:
 800ce90:	898b      	ldrh	r3, [r1, #12]
 800ce92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce94:	079d      	lsls	r5, r3, #30
 800ce96:	4606      	mov	r6, r0
 800ce98:	460c      	mov	r4, r1
 800ce9a:	d507      	bpl.n	800ceac <__smakebuf_r+0x1c>
 800ce9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cea0:	6023      	str	r3, [r4, #0]
 800cea2:	6123      	str	r3, [r4, #16]
 800cea4:	2301      	movs	r3, #1
 800cea6:	6163      	str	r3, [r4, #20]
 800cea8:	b002      	add	sp, #8
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	ab01      	add	r3, sp, #4
 800ceae:	466a      	mov	r2, sp
 800ceb0:	f7ff ffc8 	bl	800ce44 <__swhatbuf_r>
 800ceb4:	9900      	ldr	r1, [sp, #0]
 800ceb6:	4605      	mov	r5, r0
 800ceb8:	4630      	mov	r0, r6
 800ceba:	f7ff fab3 	bl	800c424 <_malloc_r>
 800cebe:	b948      	cbnz	r0, 800ced4 <__smakebuf_r+0x44>
 800cec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cec4:	059a      	lsls	r2, r3, #22
 800cec6:	d4ef      	bmi.n	800cea8 <__smakebuf_r+0x18>
 800cec8:	f023 0303 	bic.w	r3, r3, #3
 800cecc:	f043 0302 	orr.w	r3, r3, #2
 800ced0:	81a3      	strh	r3, [r4, #12]
 800ced2:	e7e3      	b.n	800ce9c <__smakebuf_r+0xc>
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	6020      	str	r0, [r4, #0]
 800ced8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	9b00      	ldr	r3, [sp, #0]
 800cee0:	6163      	str	r3, [r4, #20]
 800cee2:	9b01      	ldr	r3, [sp, #4]
 800cee4:	6120      	str	r0, [r4, #16]
 800cee6:	b15b      	cbz	r3, 800cf00 <__smakebuf_r+0x70>
 800cee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ceec:	4630      	mov	r0, r6
 800ceee:	f000 f81d 	bl	800cf2c <_isatty_r>
 800cef2:	b128      	cbz	r0, 800cf00 <__smakebuf_r+0x70>
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	f023 0303 	bic.w	r3, r3, #3
 800cefa:	f043 0301 	orr.w	r3, r3, #1
 800cefe:	81a3      	strh	r3, [r4, #12]
 800cf00:	89a3      	ldrh	r3, [r4, #12]
 800cf02:	431d      	orrs	r5, r3
 800cf04:	81a5      	strh	r5, [r4, #12]
 800cf06:	e7cf      	b.n	800cea8 <__smakebuf_r+0x18>

0800cf08 <_fstat_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d07      	ldr	r5, [pc, #28]	; (800cf28 <_fstat_r+0x20>)
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4604      	mov	r4, r0
 800cf10:	4608      	mov	r0, r1
 800cf12:	4611      	mov	r1, r2
 800cf14:	602b      	str	r3, [r5, #0]
 800cf16:	f7f8 f822 	bl	8004f5e <_fstat>
 800cf1a:	1c43      	adds	r3, r0, #1
 800cf1c:	d102      	bne.n	800cf24 <_fstat_r+0x1c>
 800cf1e:	682b      	ldr	r3, [r5, #0]
 800cf20:	b103      	cbz	r3, 800cf24 <_fstat_r+0x1c>
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	bd38      	pop	{r3, r4, r5, pc}
 800cf26:	bf00      	nop
 800cf28:	2000098c 	.word	0x2000098c

0800cf2c <_isatty_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d06      	ldr	r5, [pc, #24]	; (800cf48 <_isatty_r+0x1c>)
 800cf30:	2300      	movs	r3, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	602b      	str	r3, [r5, #0]
 800cf38:	f7f8 f821 	bl	8004f7e <_isatty>
 800cf3c:	1c43      	adds	r3, r0, #1
 800cf3e:	d102      	bne.n	800cf46 <_isatty_r+0x1a>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	b103      	cbz	r3, 800cf46 <_isatty_r+0x1a>
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	bd38      	pop	{r3, r4, r5, pc}
 800cf48:	2000098c 	.word	0x2000098c

0800cf4c <pow>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	ed2d 8b02 	vpush	{d8}
 800cf52:	eeb0 8a40 	vmov.f32	s16, s0
 800cf56:	eef0 8a60 	vmov.f32	s17, s1
 800cf5a:	ec55 4b11 	vmov	r4, r5, d1
 800cf5e:	f000 f977 	bl	800d250 <__ieee754_pow>
 800cf62:	4622      	mov	r2, r4
 800cf64:	462b      	mov	r3, r5
 800cf66:	4620      	mov	r0, r4
 800cf68:	4629      	mov	r1, r5
 800cf6a:	ec57 6b10 	vmov	r6, r7, d0
 800cf6e:	f7f3 fdd5 	bl	8000b1c <__aeabi_dcmpun>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d13b      	bne.n	800cfee <pow+0xa2>
 800cf76:	ec51 0b18 	vmov	r0, r1, d8
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f7f3 fd9b 	bl	8000ab8 <__aeabi_dcmpeq>
 800cf82:	b1b8      	cbz	r0, 800cfb4 <pow+0x68>
 800cf84:	2200      	movs	r2, #0
 800cf86:	2300      	movs	r3, #0
 800cf88:	4620      	mov	r0, r4
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f7f3 fd94 	bl	8000ab8 <__aeabi_dcmpeq>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d146      	bne.n	800d022 <pow+0xd6>
 800cf94:	ec45 4b10 	vmov	d0, r4, r5
 800cf98:	f000 f874 	bl	800d084 <finite>
 800cf9c:	b338      	cbz	r0, 800cfee <pow+0xa2>
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7f3 fd91 	bl	8000acc <__aeabi_dcmplt>
 800cfaa:	b300      	cbz	r0, 800cfee <pow+0xa2>
 800cfac:	f7ff f97a 	bl	800c2a4 <__errno>
 800cfb0:	2322      	movs	r3, #34	; 0x22
 800cfb2:	e01b      	b.n	800cfec <pow+0xa0>
 800cfb4:	ec47 6b10 	vmov	d0, r6, r7
 800cfb8:	f000 f864 	bl	800d084 <finite>
 800cfbc:	b9e0      	cbnz	r0, 800cff8 <pow+0xac>
 800cfbe:	eeb0 0a48 	vmov.f32	s0, s16
 800cfc2:	eef0 0a68 	vmov.f32	s1, s17
 800cfc6:	f000 f85d 	bl	800d084 <finite>
 800cfca:	b1a8      	cbz	r0, 800cff8 <pow+0xac>
 800cfcc:	ec45 4b10 	vmov	d0, r4, r5
 800cfd0:	f000 f858 	bl	800d084 <finite>
 800cfd4:	b180      	cbz	r0, 800cff8 <pow+0xac>
 800cfd6:	4632      	mov	r2, r6
 800cfd8:	463b      	mov	r3, r7
 800cfda:	4630      	mov	r0, r6
 800cfdc:	4639      	mov	r1, r7
 800cfde:	f7f3 fd9d 	bl	8000b1c <__aeabi_dcmpun>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d0e2      	beq.n	800cfac <pow+0x60>
 800cfe6:	f7ff f95d 	bl	800c2a4 <__errno>
 800cfea:	2321      	movs	r3, #33	; 0x21
 800cfec:	6003      	str	r3, [r0, #0]
 800cfee:	ecbd 8b02 	vpop	{d8}
 800cff2:	ec47 6b10 	vmov	d0, r6, r7
 800cff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cff8:	2200      	movs	r2, #0
 800cffa:	2300      	movs	r3, #0
 800cffc:	4630      	mov	r0, r6
 800cffe:	4639      	mov	r1, r7
 800d000:	f7f3 fd5a 	bl	8000ab8 <__aeabi_dcmpeq>
 800d004:	2800      	cmp	r0, #0
 800d006:	d0f2      	beq.n	800cfee <pow+0xa2>
 800d008:	eeb0 0a48 	vmov.f32	s0, s16
 800d00c:	eef0 0a68 	vmov.f32	s1, s17
 800d010:	f000 f838 	bl	800d084 <finite>
 800d014:	2800      	cmp	r0, #0
 800d016:	d0ea      	beq.n	800cfee <pow+0xa2>
 800d018:	ec45 4b10 	vmov	d0, r4, r5
 800d01c:	f000 f832 	bl	800d084 <finite>
 800d020:	e7c3      	b.n	800cfaa <pow+0x5e>
 800d022:	4f01      	ldr	r7, [pc, #4]	; (800d028 <pow+0xdc>)
 800d024:	2600      	movs	r6, #0
 800d026:	e7e2      	b.n	800cfee <pow+0xa2>
 800d028:	3ff00000 	.word	0x3ff00000

0800d02c <sqrt>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	ed2d 8b02 	vpush	{d8}
 800d032:	ec55 4b10 	vmov	r4, r5, d0
 800d036:	f000 f831 	bl	800d09c <__ieee754_sqrt>
 800d03a:	4622      	mov	r2, r4
 800d03c:	462b      	mov	r3, r5
 800d03e:	4620      	mov	r0, r4
 800d040:	4629      	mov	r1, r5
 800d042:	eeb0 8a40 	vmov.f32	s16, s0
 800d046:	eef0 8a60 	vmov.f32	s17, s1
 800d04a:	f7f3 fd67 	bl	8000b1c <__aeabi_dcmpun>
 800d04e:	b990      	cbnz	r0, 800d076 <sqrt+0x4a>
 800d050:	2200      	movs	r2, #0
 800d052:	2300      	movs	r3, #0
 800d054:	4620      	mov	r0, r4
 800d056:	4629      	mov	r1, r5
 800d058:	f7f3 fd38 	bl	8000acc <__aeabi_dcmplt>
 800d05c:	b158      	cbz	r0, 800d076 <sqrt+0x4a>
 800d05e:	f7ff f921 	bl	800c2a4 <__errno>
 800d062:	2321      	movs	r3, #33	; 0x21
 800d064:	6003      	str	r3, [r0, #0]
 800d066:	2200      	movs	r2, #0
 800d068:	2300      	movs	r3, #0
 800d06a:	4610      	mov	r0, r2
 800d06c:	4619      	mov	r1, r3
 800d06e:	f7f3 fbe5 	bl	800083c <__aeabi_ddiv>
 800d072:	ec41 0b18 	vmov	d8, r0, r1
 800d076:	eeb0 0a48 	vmov.f32	s0, s16
 800d07a:	eef0 0a68 	vmov.f32	s1, s17
 800d07e:	ecbd 8b02 	vpop	{d8}
 800d082:	bd38      	pop	{r3, r4, r5, pc}

0800d084 <finite>:
 800d084:	b082      	sub	sp, #8
 800d086:	ed8d 0b00 	vstr	d0, [sp]
 800d08a:	9801      	ldr	r0, [sp, #4]
 800d08c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d090:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d094:	0fc0      	lsrs	r0, r0, #31
 800d096:	b002      	add	sp, #8
 800d098:	4770      	bx	lr
	...

0800d09c <__ieee754_sqrt>:
 800d09c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	ec55 4b10 	vmov	r4, r5, d0
 800d0a4:	4e67      	ldr	r6, [pc, #412]	; (800d244 <__ieee754_sqrt+0x1a8>)
 800d0a6:	43ae      	bics	r6, r5
 800d0a8:	ee10 0a10 	vmov	r0, s0
 800d0ac:	ee10 2a10 	vmov	r2, s0
 800d0b0:	4629      	mov	r1, r5
 800d0b2:	462b      	mov	r3, r5
 800d0b4:	d10d      	bne.n	800d0d2 <__ieee754_sqrt+0x36>
 800d0b6:	f7f3 fa97 	bl	80005e8 <__aeabi_dmul>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	460b      	mov	r3, r1
 800d0be:	4620      	mov	r0, r4
 800d0c0:	4629      	mov	r1, r5
 800d0c2:	f7f3 f8db 	bl	800027c <__adddf3>
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	ec45 4b10 	vmov	d0, r4, r5
 800d0ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d2:	2d00      	cmp	r5, #0
 800d0d4:	dc0b      	bgt.n	800d0ee <__ieee754_sqrt+0x52>
 800d0d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d0da:	4326      	orrs	r6, r4
 800d0dc:	d0f5      	beq.n	800d0ca <__ieee754_sqrt+0x2e>
 800d0de:	b135      	cbz	r5, 800d0ee <__ieee754_sqrt+0x52>
 800d0e0:	f7f3 f8ca 	bl	8000278 <__aeabi_dsub>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	f7f3 fba8 	bl	800083c <__aeabi_ddiv>
 800d0ec:	e7eb      	b.n	800d0c6 <__ieee754_sqrt+0x2a>
 800d0ee:	1509      	asrs	r1, r1, #20
 800d0f0:	f000 808d 	beq.w	800d20e <__ieee754_sqrt+0x172>
 800d0f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0f8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d0fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d100:	07c9      	lsls	r1, r1, #31
 800d102:	bf5c      	itt	pl
 800d104:	005b      	lslpl	r3, r3, #1
 800d106:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d10a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d10e:	bf58      	it	pl
 800d110:	0052      	lslpl	r2, r2, #1
 800d112:	2500      	movs	r5, #0
 800d114:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d118:	1076      	asrs	r6, r6, #1
 800d11a:	0052      	lsls	r2, r2, #1
 800d11c:	f04f 0e16 	mov.w	lr, #22
 800d120:	46ac      	mov	ip, r5
 800d122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d126:	eb0c 0001 	add.w	r0, ip, r1
 800d12a:	4298      	cmp	r0, r3
 800d12c:	bfde      	ittt	le
 800d12e:	1a1b      	suble	r3, r3, r0
 800d130:	eb00 0c01 	addle.w	ip, r0, r1
 800d134:	186d      	addle	r5, r5, r1
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	f1be 0e01 	subs.w	lr, lr, #1
 800d13c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d140:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d144:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d148:	d1ed      	bne.n	800d126 <__ieee754_sqrt+0x8a>
 800d14a:	4674      	mov	r4, lr
 800d14c:	2720      	movs	r7, #32
 800d14e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d152:	4563      	cmp	r3, ip
 800d154:	eb01 000e 	add.w	r0, r1, lr
 800d158:	dc02      	bgt.n	800d160 <__ieee754_sqrt+0xc4>
 800d15a:	d113      	bne.n	800d184 <__ieee754_sqrt+0xe8>
 800d15c:	4290      	cmp	r0, r2
 800d15e:	d811      	bhi.n	800d184 <__ieee754_sqrt+0xe8>
 800d160:	2800      	cmp	r0, #0
 800d162:	eb00 0e01 	add.w	lr, r0, r1
 800d166:	da57      	bge.n	800d218 <__ieee754_sqrt+0x17c>
 800d168:	f1be 0f00 	cmp.w	lr, #0
 800d16c:	db54      	blt.n	800d218 <__ieee754_sqrt+0x17c>
 800d16e:	f10c 0801 	add.w	r8, ip, #1
 800d172:	eba3 030c 	sub.w	r3, r3, ip
 800d176:	4290      	cmp	r0, r2
 800d178:	bf88      	it	hi
 800d17a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d17e:	1a12      	subs	r2, r2, r0
 800d180:	440c      	add	r4, r1
 800d182:	46c4      	mov	ip, r8
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	3f01      	subs	r7, #1
 800d188:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d18c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d190:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d194:	d1dd      	bne.n	800d152 <__ieee754_sqrt+0xb6>
 800d196:	4313      	orrs	r3, r2
 800d198:	d01b      	beq.n	800d1d2 <__ieee754_sqrt+0x136>
 800d19a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d248 <__ieee754_sqrt+0x1ac>
 800d19e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d24c <__ieee754_sqrt+0x1b0>
 800d1a2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d1a6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d1aa:	f7f3 f865 	bl	8000278 <__aeabi_dsub>
 800d1ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	f7f3 fc91 	bl	8000ae0 <__aeabi_dcmple>
 800d1be:	b140      	cbz	r0, 800d1d2 <__ieee754_sqrt+0x136>
 800d1c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d1c4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d1c8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d1cc:	d126      	bne.n	800d21c <__ieee754_sqrt+0x180>
 800d1ce:	3501      	adds	r5, #1
 800d1d0:	463c      	mov	r4, r7
 800d1d2:	106a      	asrs	r2, r5, #1
 800d1d4:	0863      	lsrs	r3, r4, #1
 800d1d6:	07e9      	lsls	r1, r5, #31
 800d1d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d1dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d1e0:	bf48      	it	mi
 800d1e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d1e6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d1ea:	461c      	mov	r4, r3
 800d1ec:	e76d      	b.n	800d0ca <__ieee754_sqrt+0x2e>
 800d1ee:	0ad3      	lsrs	r3, r2, #11
 800d1f0:	3815      	subs	r0, #21
 800d1f2:	0552      	lsls	r2, r2, #21
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d0fa      	beq.n	800d1ee <__ieee754_sqrt+0x152>
 800d1f8:	02dc      	lsls	r4, r3, #11
 800d1fa:	d50a      	bpl.n	800d212 <__ieee754_sqrt+0x176>
 800d1fc:	f1c1 0420 	rsb	r4, r1, #32
 800d200:	fa22 f404 	lsr.w	r4, r2, r4
 800d204:	1e4d      	subs	r5, r1, #1
 800d206:	408a      	lsls	r2, r1
 800d208:	4323      	orrs	r3, r4
 800d20a:	1b41      	subs	r1, r0, r5
 800d20c:	e772      	b.n	800d0f4 <__ieee754_sqrt+0x58>
 800d20e:	4608      	mov	r0, r1
 800d210:	e7f0      	b.n	800d1f4 <__ieee754_sqrt+0x158>
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	3101      	adds	r1, #1
 800d216:	e7ef      	b.n	800d1f8 <__ieee754_sqrt+0x15c>
 800d218:	46e0      	mov	r8, ip
 800d21a:	e7aa      	b.n	800d172 <__ieee754_sqrt+0xd6>
 800d21c:	f7f3 f82e 	bl	800027c <__adddf3>
 800d220:	e9da 8900 	ldrd	r8, r9, [sl]
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	4640      	mov	r0, r8
 800d22a:	4649      	mov	r1, r9
 800d22c:	f7f3 fc4e 	bl	8000acc <__aeabi_dcmplt>
 800d230:	b120      	cbz	r0, 800d23c <__ieee754_sqrt+0x1a0>
 800d232:	1ca0      	adds	r0, r4, #2
 800d234:	bf08      	it	eq
 800d236:	3501      	addeq	r5, #1
 800d238:	3402      	adds	r4, #2
 800d23a:	e7ca      	b.n	800d1d2 <__ieee754_sqrt+0x136>
 800d23c:	3401      	adds	r4, #1
 800d23e:	f024 0401 	bic.w	r4, r4, #1
 800d242:	e7c6      	b.n	800d1d2 <__ieee754_sqrt+0x136>
 800d244:	7ff00000 	.word	0x7ff00000
 800d248:	20000110 	.word	0x20000110
 800d24c:	20000118 	.word	0x20000118

0800d250 <__ieee754_pow>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	ed2d 8b06 	vpush	{d8-d10}
 800d258:	b089      	sub	sp, #36	; 0x24
 800d25a:	ed8d 1b00 	vstr	d1, [sp]
 800d25e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d262:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d266:	ea58 0102 	orrs.w	r1, r8, r2
 800d26a:	ec57 6b10 	vmov	r6, r7, d0
 800d26e:	d115      	bne.n	800d29c <__ieee754_pow+0x4c>
 800d270:	19b3      	adds	r3, r6, r6
 800d272:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d276:	4152      	adcs	r2, r2
 800d278:	4299      	cmp	r1, r3
 800d27a:	4b89      	ldr	r3, [pc, #548]	; (800d4a0 <__ieee754_pow+0x250>)
 800d27c:	4193      	sbcs	r3, r2
 800d27e:	f080 84d1 	bcs.w	800dc24 <__ieee754_pow+0x9d4>
 800d282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d286:	4630      	mov	r0, r6
 800d288:	4639      	mov	r1, r7
 800d28a:	f7f2 fff7 	bl	800027c <__adddf3>
 800d28e:	ec41 0b10 	vmov	d0, r0, r1
 800d292:	b009      	add	sp, #36	; 0x24
 800d294:	ecbd 8b06 	vpop	{d8-d10}
 800d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29c:	4b81      	ldr	r3, [pc, #516]	; (800d4a4 <__ieee754_pow+0x254>)
 800d29e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d2a2:	429c      	cmp	r4, r3
 800d2a4:	ee10 aa10 	vmov	sl, s0
 800d2a8:	463d      	mov	r5, r7
 800d2aa:	dc06      	bgt.n	800d2ba <__ieee754_pow+0x6a>
 800d2ac:	d101      	bne.n	800d2b2 <__ieee754_pow+0x62>
 800d2ae:	2e00      	cmp	r6, #0
 800d2b0:	d1e7      	bne.n	800d282 <__ieee754_pow+0x32>
 800d2b2:	4598      	cmp	r8, r3
 800d2b4:	dc01      	bgt.n	800d2ba <__ieee754_pow+0x6a>
 800d2b6:	d10f      	bne.n	800d2d8 <__ieee754_pow+0x88>
 800d2b8:	b172      	cbz	r2, 800d2d8 <__ieee754_pow+0x88>
 800d2ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d2be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d2c2:	ea55 050a 	orrs.w	r5, r5, sl
 800d2c6:	d1dc      	bne.n	800d282 <__ieee754_pow+0x32>
 800d2c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2cc:	18db      	adds	r3, r3, r3
 800d2ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d2d2:	4152      	adcs	r2, r2
 800d2d4:	429d      	cmp	r5, r3
 800d2d6:	e7d0      	b.n	800d27a <__ieee754_pow+0x2a>
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	da3b      	bge.n	800d354 <__ieee754_pow+0x104>
 800d2dc:	4b72      	ldr	r3, [pc, #456]	; (800d4a8 <__ieee754_pow+0x258>)
 800d2de:	4598      	cmp	r8, r3
 800d2e0:	dc51      	bgt.n	800d386 <__ieee754_pow+0x136>
 800d2e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d2e6:	4598      	cmp	r8, r3
 800d2e8:	f340 84ab 	ble.w	800dc42 <__ieee754_pow+0x9f2>
 800d2ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d2f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d2f4:	2b14      	cmp	r3, #20
 800d2f6:	dd0f      	ble.n	800d318 <__ieee754_pow+0xc8>
 800d2f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d2fc:	fa22 f103 	lsr.w	r1, r2, r3
 800d300:	fa01 f303 	lsl.w	r3, r1, r3
 800d304:	4293      	cmp	r3, r2
 800d306:	f040 849c 	bne.w	800dc42 <__ieee754_pow+0x9f2>
 800d30a:	f001 0101 	and.w	r1, r1, #1
 800d30e:	f1c1 0302 	rsb	r3, r1, #2
 800d312:	9304      	str	r3, [sp, #16]
 800d314:	b182      	cbz	r2, 800d338 <__ieee754_pow+0xe8>
 800d316:	e05f      	b.n	800d3d8 <__ieee754_pow+0x188>
 800d318:	2a00      	cmp	r2, #0
 800d31a:	d15b      	bne.n	800d3d4 <__ieee754_pow+0x184>
 800d31c:	f1c3 0314 	rsb	r3, r3, #20
 800d320:	fa48 f103 	asr.w	r1, r8, r3
 800d324:	fa01 f303 	lsl.w	r3, r1, r3
 800d328:	4543      	cmp	r3, r8
 800d32a:	f040 8487 	bne.w	800dc3c <__ieee754_pow+0x9ec>
 800d32e:	f001 0101 	and.w	r1, r1, #1
 800d332:	f1c1 0302 	rsb	r3, r1, #2
 800d336:	9304      	str	r3, [sp, #16]
 800d338:	4b5c      	ldr	r3, [pc, #368]	; (800d4ac <__ieee754_pow+0x25c>)
 800d33a:	4598      	cmp	r8, r3
 800d33c:	d132      	bne.n	800d3a4 <__ieee754_pow+0x154>
 800d33e:	f1b9 0f00 	cmp.w	r9, #0
 800d342:	f280 8477 	bge.w	800dc34 <__ieee754_pow+0x9e4>
 800d346:	4959      	ldr	r1, [pc, #356]	; (800d4ac <__ieee754_pow+0x25c>)
 800d348:	4632      	mov	r2, r6
 800d34a:	463b      	mov	r3, r7
 800d34c:	2000      	movs	r0, #0
 800d34e:	f7f3 fa75 	bl	800083c <__aeabi_ddiv>
 800d352:	e79c      	b.n	800d28e <__ieee754_pow+0x3e>
 800d354:	2300      	movs	r3, #0
 800d356:	9304      	str	r3, [sp, #16]
 800d358:	2a00      	cmp	r2, #0
 800d35a:	d13d      	bne.n	800d3d8 <__ieee754_pow+0x188>
 800d35c:	4b51      	ldr	r3, [pc, #324]	; (800d4a4 <__ieee754_pow+0x254>)
 800d35e:	4598      	cmp	r8, r3
 800d360:	d1ea      	bne.n	800d338 <__ieee754_pow+0xe8>
 800d362:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d366:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d36a:	ea53 030a 	orrs.w	r3, r3, sl
 800d36e:	f000 8459 	beq.w	800dc24 <__ieee754_pow+0x9d4>
 800d372:	4b4f      	ldr	r3, [pc, #316]	; (800d4b0 <__ieee754_pow+0x260>)
 800d374:	429c      	cmp	r4, r3
 800d376:	dd08      	ble.n	800d38a <__ieee754_pow+0x13a>
 800d378:	f1b9 0f00 	cmp.w	r9, #0
 800d37c:	f2c0 8456 	blt.w	800dc2c <__ieee754_pow+0x9dc>
 800d380:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d384:	e783      	b.n	800d28e <__ieee754_pow+0x3e>
 800d386:	2302      	movs	r3, #2
 800d388:	e7e5      	b.n	800d356 <__ieee754_pow+0x106>
 800d38a:	f1b9 0f00 	cmp.w	r9, #0
 800d38e:	f04f 0000 	mov.w	r0, #0
 800d392:	f04f 0100 	mov.w	r1, #0
 800d396:	f6bf af7a 	bge.w	800d28e <__ieee754_pow+0x3e>
 800d39a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d39e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3a2:	e774      	b.n	800d28e <__ieee754_pow+0x3e>
 800d3a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d3a8:	d106      	bne.n	800d3b8 <__ieee754_pow+0x168>
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	463b      	mov	r3, r7
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	f7f3 f919 	bl	80005e8 <__aeabi_dmul>
 800d3b6:	e76a      	b.n	800d28e <__ieee754_pow+0x3e>
 800d3b8:	4b3e      	ldr	r3, [pc, #248]	; (800d4b4 <__ieee754_pow+0x264>)
 800d3ba:	4599      	cmp	r9, r3
 800d3bc:	d10c      	bne.n	800d3d8 <__ieee754_pow+0x188>
 800d3be:	2d00      	cmp	r5, #0
 800d3c0:	db0a      	blt.n	800d3d8 <__ieee754_pow+0x188>
 800d3c2:	ec47 6b10 	vmov	d0, r6, r7
 800d3c6:	b009      	add	sp, #36	; 0x24
 800d3c8:	ecbd 8b06 	vpop	{d8-d10}
 800d3cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	f7ff be64 	b.w	800d09c <__ieee754_sqrt>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9304      	str	r3, [sp, #16]
 800d3d8:	ec47 6b10 	vmov	d0, r6, r7
 800d3dc:	f000 fc62 	bl	800dca4 <fabs>
 800d3e0:	ec51 0b10 	vmov	r0, r1, d0
 800d3e4:	f1ba 0f00 	cmp.w	sl, #0
 800d3e8:	d129      	bne.n	800d43e <__ieee754_pow+0x1ee>
 800d3ea:	b124      	cbz	r4, 800d3f6 <__ieee754_pow+0x1a6>
 800d3ec:	4b2f      	ldr	r3, [pc, #188]	; (800d4ac <__ieee754_pow+0x25c>)
 800d3ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d123      	bne.n	800d43e <__ieee754_pow+0x1ee>
 800d3f6:	f1b9 0f00 	cmp.w	r9, #0
 800d3fa:	da05      	bge.n	800d408 <__ieee754_pow+0x1b8>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	2000      	movs	r0, #0
 800d402:	492a      	ldr	r1, [pc, #168]	; (800d4ac <__ieee754_pow+0x25c>)
 800d404:	f7f3 fa1a 	bl	800083c <__aeabi_ddiv>
 800d408:	2d00      	cmp	r5, #0
 800d40a:	f6bf af40 	bge.w	800d28e <__ieee754_pow+0x3e>
 800d40e:	9b04      	ldr	r3, [sp, #16]
 800d410:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d414:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d418:	431c      	orrs	r4, r3
 800d41a:	d108      	bne.n	800d42e <__ieee754_pow+0x1de>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4610      	mov	r0, r2
 800d422:	4619      	mov	r1, r3
 800d424:	f7f2 ff28 	bl	8000278 <__aeabi_dsub>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	e78f      	b.n	800d34e <__ieee754_pow+0xfe>
 800d42e:	9b04      	ldr	r3, [sp, #16]
 800d430:	2b01      	cmp	r3, #1
 800d432:	f47f af2c 	bne.w	800d28e <__ieee754_pow+0x3e>
 800d436:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d43a:	4619      	mov	r1, r3
 800d43c:	e727      	b.n	800d28e <__ieee754_pow+0x3e>
 800d43e:	0feb      	lsrs	r3, r5, #31
 800d440:	3b01      	subs	r3, #1
 800d442:	9306      	str	r3, [sp, #24]
 800d444:	9a06      	ldr	r2, [sp, #24]
 800d446:	9b04      	ldr	r3, [sp, #16]
 800d448:	4313      	orrs	r3, r2
 800d44a:	d102      	bne.n	800d452 <__ieee754_pow+0x202>
 800d44c:	4632      	mov	r2, r6
 800d44e:	463b      	mov	r3, r7
 800d450:	e7e6      	b.n	800d420 <__ieee754_pow+0x1d0>
 800d452:	4b19      	ldr	r3, [pc, #100]	; (800d4b8 <__ieee754_pow+0x268>)
 800d454:	4598      	cmp	r8, r3
 800d456:	f340 80fb 	ble.w	800d650 <__ieee754_pow+0x400>
 800d45a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d45e:	4598      	cmp	r8, r3
 800d460:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <__ieee754_pow+0x260>)
 800d462:	dd0c      	ble.n	800d47e <__ieee754_pow+0x22e>
 800d464:	429c      	cmp	r4, r3
 800d466:	dc0f      	bgt.n	800d488 <__ieee754_pow+0x238>
 800d468:	f1b9 0f00 	cmp.w	r9, #0
 800d46c:	da0f      	bge.n	800d48e <__ieee754_pow+0x23e>
 800d46e:	2000      	movs	r0, #0
 800d470:	b009      	add	sp, #36	; 0x24
 800d472:	ecbd 8b06 	vpop	{d8-d10}
 800d476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47a:	f000 bcc2 	b.w	800de02 <__math_oflow>
 800d47e:	429c      	cmp	r4, r3
 800d480:	dbf2      	blt.n	800d468 <__ieee754_pow+0x218>
 800d482:	4b0a      	ldr	r3, [pc, #40]	; (800d4ac <__ieee754_pow+0x25c>)
 800d484:	429c      	cmp	r4, r3
 800d486:	dd19      	ble.n	800d4bc <__ieee754_pow+0x26c>
 800d488:	f1b9 0f00 	cmp.w	r9, #0
 800d48c:	dcef      	bgt.n	800d46e <__ieee754_pow+0x21e>
 800d48e:	2000      	movs	r0, #0
 800d490:	b009      	add	sp, #36	; 0x24
 800d492:	ecbd 8b06 	vpop	{d8-d10}
 800d496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49a:	f000 bca9 	b.w	800ddf0 <__math_uflow>
 800d49e:	bf00      	nop
 800d4a0:	fff00000 	.word	0xfff00000
 800d4a4:	7ff00000 	.word	0x7ff00000
 800d4a8:	433fffff 	.word	0x433fffff
 800d4ac:	3ff00000 	.word	0x3ff00000
 800d4b0:	3fefffff 	.word	0x3fefffff
 800d4b4:	3fe00000 	.word	0x3fe00000
 800d4b8:	41e00000 	.word	0x41e00000
 800d4bc:	4b60      	ldr	r3, [pc, #384]	; (800d640 <__ieee754_pow+0x3f0>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f7f2 feda 	bl	8000278 <__aeabi_dsub>
 800d4c4:	a354      	add	r3, pc, #336	; (adr r3, 800d618 <__ieee754_pow+0x3c8>)
 800d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	460d      	mov	r5, r1
 800d4ce:	f7f3 f88b 	bl	80005e8 <__aeabi_dmul>
 800d4d2:	a353      	add	r3, pc, #332	; (adr r3, 800d620 <__ieee754_pow+0x3d0>)
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	4606      	mov	r6, r0
 800d4da:	460f      	mov	r7, r1
 800d4dc:	4620      	mov	r0, r4
 800d4de:	4629      	mov	r1, r5
 800d4e0:	f7f3 f882 	bl	80005e8 <__aeabi_dmul>
 800d4e4:	4b57      	ldr	r3, [pc, #348]	; (800d644 <__ieee754_pow+0x3f4>)
 800d4e6:	4682      	mov	sl, r0
 800d4e8:	468b      	mov	fp, r1
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f7f3 f87a 	bl	80005e8 <__aeabi_dmul>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	a14b      	add	r1, pc, #300	; (adr r1, 800d628 <__ieee754_pow+0x3d8>)
 800d4fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4fe:	f7f2 febb 	bl	8000278 <__aeabi_dsub>
 800d502:	4622      	mov	r2, r4
 800d504:	462b      	mov	r3, r5
 800d506:	f7f3 f86f 	bl	80005e8 <__aeabi_dmul>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	2000      	movs	r0, #0
 800d510:	494d      	ldr	r1, [pc, #308]	; (800d648 <__ieee754_pow+0x3f8>)
 800d512:	f7f2 feb1 	bl	8000278 <__aeabi_dsub>
 800d516:	4622      	mov	r2, r4
 800d518:	4680      	mov	r8, r0
 800d51a:	4689      	mov	r9, r1
 800d51c:	462b      	mov	r3, r5
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f3 f861 	bl	80005e8 <__aeabi_dmul>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	4640      	mov	r0, r8
 800d52c:	4649      	mov	r1, r9
 800d52e:	f7f3 f85b 	bl	80005e8 <__aeabi_dmul>
 800d532:	a33f      	add	r3, pc, #252	; (adr r3, 800d630 <__ieee754_pow+0x3e0>)
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	f7f3 f856 	bl	80005e8 <__aeabi_dmul>
 800d53c:	4602      	mov	r2, r0
 800d53e:	460b      	mov	r3, r1
 800d540:	4650      	mov	r0, sl
 800d542:	4659      	mov	r1, fp
 800d544:	f7f2 fe98 	bl	8000278 <__aeabi_dsub>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	4680      	mov	r8, r0
 800d54e:	4689      	mov	r9, r1
 800d550:	4630      	mov	r0, r6
 800d552:	4639      	mov	r1, r7
 800d554:	f7f2 fe92 	bl	800027c <__adddf3>
 800d558:	2000      	movs	r0, #0
 800d55a:	4632      	mov	r2, r6
 800d55c:	463b      	mov	r3, r7
 800d55e:	4604      	mov	r4, r0
 800d560:	460d      	mov	r5, r1
 800d562:	f7f2 fe89 	bl	8000278 <__aeabi_dsub>
 800d566:	4602      	mov	r2, r0
 800d568:	460b      	mov	r3, r1
 800d56a:	4640      	mov	r0, r8
 800d56c:	4649      	mov	r1, r9
 800d56e:	f7f2 fe83 	bl	8000278 <__aeabi_dsub>
 800d572:	9b04      	ldr	r3, [sp, #16]
 800d574:	9a06      	ldr	r2, [sp, #24]
 800d576:	3b01      	subs	r3, #1
 800d578:	4313      	orrs	r3, r2
 800d57a:	4682      	mov	sl, r0
 800d57c:	468b      	mov	fp, r1
 800d57e:	f040 81e7 	bne.w	800d950 <__ieee754_pow+0x700>
 800d582:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d638 <__ieee754_pow+0x3e8>
 800d586:	eeb0 8a47 	vmov.f32	s16, s14
 800d58a:	eef0 8a67 	vmov.f32	s17, s15
 800d58e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d592:	2600      	movs	r6, #0
 800d594:	4632      	mov	r2, r6
 800d596:	463b      	mov	r3, r7
 800d598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d59c:	f7f2 fe6c 	bl	8000278 <__aeabi_dsub>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	462b      	mov	r3, r5
 800d5a4:	f7f3 f820 	bl	80005e8 <__aeabi_dmul>
 800d5a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	4689      	mov	r9, r1
 800d5b0:	4650      	mov	r0, sl
 800d5b2:	4659      	mov	r1, fp
 800d5b4:	f7f3 f818 	bl	80005e8 <__aeabi_dmul>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4640      	mov	r0, r8
 800d5be:	4649      	mov	r1, r9
 800d5c0:	f7f2 fe5c 	bl	800027c <__adddf3>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	4689      	mov	r9, r1
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	f7f3 f80a 	bl	80005e8 <__aeabi_dmul>
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	460d      	mov	r5, r1
 800d5da:	4602      	mov	r2, r0
 800d5dc:	4649      	mov	r1, r9
 800d5de:	4640      	mov	r0, r8
 800d5e0:	f7f2 fe4c 	bl	800027c <__adddf3>
 800d5e4:	4b19      	ldr	r3, [pc, #100]	; (800d64c <__ieee754_pow+0x3fc>)
 800d5e6:	4299      	cmp	r1, r3
 800d5e8:	ec45 4b19 	vmov	d9, r4, r5
 800d5ec:	4606      	mov	r6, r0
 800d5ee:	460f      	mov	r7, r1
 800d5f0:	468b      	mov	fp, r1
 800d5f2:	f340 82f0 	ble.w	800dbd6 <__ieee754_pow+0x986>
 800d5f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d5fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d5fe:	4303      	orrs	r3, r0
 800d600:	f000 81e4 	beq.w	800d9cc <__ieee754_pow+0x77c>
 800d604:	ec51 0b18 	vmov	r0, r1, d8
 800d608:	2200      	movs	r2, #0
 800d60a:	2300      	movs	r3, #0
 800d60c:	f7f3 fa5e 	bl	8000acc <__aeabi_dcmplt>
 800d610:	3800      	subs	r0, #0
 800d612:	bf18      	it	ne
 800d614:	2001      	movne	r0, #1
 800d616:	e72b      	b.n	800d470 <__ieee754_pow+0x220>
 800d618:	60000000 	.word	0x60000000
 800d61c:	3ff71547 	.word	0x3ff71547
 800d620:	f85ddf44 	.word	0xf85ddf44
 800d624:	3e54ae0b 	.word	0x3e54ae0b
 800d628:	55555555 	.word	0x55555555
 800d62c:	3fd55555 	.word	0x3fd55555
 800d630:	652b82fe 	.word	0x652b82fe
 800d634:	3ff71547 	.word	0x3ff71547
 800d638:	00000000 	.word	0x00000000
 800d63c:	bff00000 	.word	0xbff00000
 800d640:	3ff00000 	.word	0x3ff00000
 800d644:	3fd00000 	.word	0x3fd00000
 800d648:	3fe00000 	.word	0x3fe00000
 800d64c:	408fffff 	.word	0x408fffff
 800d650:	4bd5      	ldr	r3, [pc, #852]	; (800d9a8 <__ieee754_pow+0x758>)
 800d652:	402b      	ands	r3, r5
 800d654:	2200      	movs	r2, #0
 800d656:	b92b      	cbnz	r3, 800d664 <__ieee754_pow+0x414>
 800d658:	4bd4      	ldr	r3, [pc, #848]	; (800d9ac <__ieee754_pow+0x75c>)
 800d65a:	f7f2 ffc5 	bl	80005e8 <__aeabi_dmul>
 800d65e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d662:	460c      	mov	r4, r1
 800d664:	1523      	asrs	r3, r4, #20
 800d666:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d66a:	4413      	add	r3, r2
 800d66c:	9305      	str	r3, [sp, #20]
 800d66e:	4bd0      	ldr	r3, [pc, #832]	; (800d9b0 <__ieee754_pow+0x760>)
 800d670:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d674:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d678:	429c      	cmp	r4, r3
 800d67a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d67e:	dd08      	ble.n	800d692 <__ieee754_pow+0x442>
 800d680:	4bcc      	ldr	r3, [pc, #816]	; (800d9b4 <__ieee754_pow+0x764>)
 800d682:	429c      	cmp	r4, r3
 800d684:	f340 8162 	ble.w	800d94c <__ieee754_pow+0x6fc>
 800d688:	9b05      	ldr	r3, [sp, #20]
 800d68a:	3301      	adds	r3, #1
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d692:	2400      	movs	r4, #0
 800d694:	00e3      	lsls	r3, r4, #3
 800d696:	9307      	str	r3, [sp, #28]
 800d698:	4bc7      	ldr	r3, [pc, #796]	; (800d9b8 <__ieee754_pow+0x768>)
 800d69a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d69e:	ed93 7b00 	vldr	d7, [r3]
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	ec53 2b17 	vmov	r2, r3, d7
 800d6a8:	eeb0 9a47 	vmov.f32	s18, s14
 800d6ac:	eef0 9a67 	vmov.f32	s19, s15
 800d6b0:	4682      	mov	sl, r0
 800d6b2:	f7f2 fde1 	bl	8000278 <__aeabi_dsub>
 800d6b6:	4652      	mov	r2, sl
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	460f      	mov	r7, r1
 800d6bc:	462b      	mov	r3, r5
 800d6be:	ec51 0b19 	vmov	r0, r1, d9
 800d6c2:	f7f2 fddb 	bl	800027c <__adddf3>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	49bb      	ldr	r1, [pc, #748]	; (800d9bc <__ieee754_pow+0x76c>)
 800d6ce:	f7f3 f8b5 	bl	800083c <__aeabi_ddiv>
 800d6d2:	ec41 0b1a 	vmov	d10, r0, r1
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	f7f2 ff83 	bl	80005e8 <__aeabi_dmul>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6e8:	9302      	str	r3, [sp, #8]
 800d6ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d6ee:	46ab      	mov	fp, r5
 800d6f0:	106d      	asrs	r5, r5, #1
 800d6f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d6f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d6fa:	ec41 0b18 	vmov	d8, r0, r1
 800d6fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d702:	2200      	movs	r2, #0
 800d704:	4640      	mov	r0, r8
 800d706:	4649      	mov	r1, r9
 800d708:	4614      	mov	r4, r2
 800d70a:	461d      	mov	r5, r3
 800d70c:	f7f2 ff6c 	bl	80005e8 <__aeabi_dmul>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f2 fdae 	bl	8000278 <__aeabi_dsub>
 800d71c:	ec53 2b19 	vmov	r2, r3, d9
 800d720:	4606      	mov	r6, r0
 800d722:	460f      	mov	r7, r1
 800d724:	4620      	mov	r0, r4
 800d726:	4629      	mov	r1, r5
 800d728:	f7f2 fda6 	bl	8000278 <__aeabi_dsub>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4650      	mov	r0, sl
 800d732:	4659      	mov	r1, fp
 800d734:	f7f2 fda0 	bl	8000278 <__aeabi_dsub>
 800d738:	4642      	mov	r2, r8
 800d73a:	464b      	mov	r3, r9
 800d73c:	f7f2 ff54 	bl	80005e8 <__aeabi_dmul>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4630      	mov	r0, r6
 800d746:	4639      	mov	r1, r7
 800d748:	f7f2 fd96 	bl	8000278 <__aeabi_dsub>
 800d74c:	ec53 2b1a 	vmov	r2, r3, d10
 800d750:	f7f2 ff4a 	bl	80005e8 <__aeabi_dmul>
 800d754:	ec53 2b18 	vmov	r2, r3, d8
 800d758:	ec41 0b19 	vmov	d9, r0, r1
 800d75c:	ec51 0b18 	vmov	r0, r1, d8
 800d760:	f7f2 ff42 	bl	80005e8 <__aeabi_dmul>
 800d764:	a37c      	add	r3, pc, #496	; (adr r3, 800d958 <__ieee754_pow+0x708>)
 800d766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76a:	4604      	mov	r4, r0
 800d76c:	460d      	mov	r5, r1
 800d76e:	f7f2 ff3b 	bl	80005e8 <__aeabi_dmul>
 800d772:	a37b      	add	r3, pc, #492	; (adr r3, 800d960 <__ieee754_pow+0x710>)
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f2 fd80 	bl	800027c <__adddf3>
 800d77c:	4622      	mov	r2, r4
 800d77e:	462b      	mov	r3, r5
 800d780:	f7f2 ff32 	bl	80005e8 <__aeabi_dmul>
 800d784:	a378      	add	r3, pc, #480	; (adr r3, 800d968 <__ieee754_pow+0x718>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7f2 fd77 	bl	800027c <__adddf3>
 800d78e:	4622      	mov	r2, r4
 800d790:	462b      	mov	r3, r5
 800d792:	f7f2 ff29 	bl	80005e8 <__aeabi_dmul>
 800d796:	a376      	add	r3, pc, #472	; (adr r3, 800d970 <__ieee754_pow+0x720>)
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	f7f2 fd6e 	bl	800027c <__adddf3>
 800d7a0:	4622      	mov	r2, r4
 800d7a2:	462b      	mov	r3, r5
 800d7a4:	f7f2 ff20 	bl	80005e8 <__aeabi_dmul>
 800d7a8:	a373      	add	r3, pc, #460	; (adr r3, 800d978 <__ieee754_pow+0x728>)
 800d7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ae:	f7f2 fd65 	bl	800027c <__adddf3>
 800d7b2:	4622      	mov	r2, r4
 800d7b4:	462b      	mov	r3, r5
 800d7b6:	f7f2 ff17 	bl	80005e8 <__aeabi_dmul>
 800d7ba:	a371      	add	r3, pc, #452	; (adr r3, 800d980 <__ieee754_pow+0x730>)
 800d7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c0:	f7f2 fd5c 	bl	800027c <__adddf3>
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	460f      	mov	r7, r1
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	f7f2 ff0a 	bl	80005e8 <__aeabi_dmul>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	4630      	mov	r0, r6
 800d7da:	4639      	mov	r1, r7
 800d7dc:	f7f2 ff04 	bl	80005e8 <__aeabi_dmul>
 800d7e0:	4642      	mov	r2, r8
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	460d      	mov	r5, r1
 800d7e6:	464b      	mov	r3, r9
 800d7e8:	ec51 0b18 	vmov	r0, r1, d8
 800d7ec:	f7f2 fd46 	bl	800027c <__adddf3>
 800d7f0:	ec53 2b19 	vmov	r2, r3, d9
 800d7f4:	f7f2 fef8 	bl	80005e8 <__aeabi_dmul>
 800d7f8:	4622      	mov	r2, r4
 800d7fa:	462b      	mov	r3, r5
 800d7fc:	f7f2 fd3e 	bl	800027c <__adddf3>
 800d800:	4642      	mov	r2, r8
 800d802:	4682      	mov	sl, r0
 800d804:	468b      	mov	fp, r1
 800d806:	464b      	mov	r3, r9
 800d808:	4640      	mov	r0, r8
 800d80a:	4649      	mov	r1, r9
 800d80c:	f7f2 feec 	bl	80005e8 <__aeabi_dmul>
 800d810:	4b6b      	ldr	r3, [pc, #428]	; (800d9c0 <__ieee754_pow+0x770>)
 800d812:	2200      	movs	r2, #0
 800d814:	4606      	mov	r6, r0
 800d816:	460f      	mov	r7, r1
 800d818:	f7f2 fd30 	bl	800027c <__adddf3>
 800d81c:	4652      	mov	r2, sl
 800d81e:	465b      	mov	r3, fp
 800d820:	f7f2 fd2c 	bl	800027c <__adddf3>
 800d824:	2000      	movs	r0, #0
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4640      	mov	r0, r8
 800d830:	4649      	mov	r1, r9
 800d832:	f7f2 fed9 	bl	80005e8 <__aeabi_dmul>
 800d836:	4b62      	ldr	r3, [pc, #392]	; (800d9c0 <__ieee754_pow+0x770>)
 800d838:	4680      	mov	r8, r0
 800d83a:	4689      	mov	r9, r1
 800d83c:	2200      	movs	r2, #0
 800d83e:	4620      	mov	r0, r4
 800d840:	4629      	mov	r1, r5
 800d842:	f7f2 fd19 	bl	8000278 <__aeabi_dsub>
 800d846:	4632      	mov	r2, r6
 800d848:	463b      	mov	r3, r7
 800d84a:	f7f2 fd15 	bl	8000278 <__aeabi_dsub>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4650      	mov	r0, sl
 800d854:	4659      	mov	r1, fp
 800d856:	f7f2 fd0f 	bl	8000278 <__aeabi_dsub>
 800d85a:	ec53 2b18 	vmov	r2, r3, d8
 800d85e:	f7f2 fec3 	bl	80005e8 <__aeabi_dmul>
 800d862:	4622      	mov	r2, r4
 800d864:	4606      	mov	r6, r0
 800d866:	460f      	mov	r7, r1
 800d868:	462b      	mov	r3, r5
 800d86a:	ec51 0b19 	vmov	r0, r1, d9
 800d86e:	f7f2 febb 	bl	80005e8 <__aeabi_dmul>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	4630      	mov	r0, r6
 800d878:	4639      	mov	r1, r7
 800d87a:	f7f2 fcff 	bl	800027c <__adddf3>
 800d87e:	4606      	mov	r6, r0
 800d880:	460f      	mov	r7, r1
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	4640      	mov	r0, r8
 800d888:	4649      	mov	r1, r9
 800d88a:	f7f2 fcf7 	bl	800027c <__adddf3>
 800d88e:	a33e      	add	r3, pc, #248	; (adr r3, 800d988 <__ieee754_pow+0x738>)
 800d890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d894:	2000      	movs	r0, #0
 800d896:	4604      	mov	r4, r0
 800d898:	460d      	mov	r5, r1
 800d89a:	f7f2 fea5 	bl	80005e8 <__aeabi_dmul>
 800d89e:	4642      	mov	r2, r8
 800d8a0:	ec41 0b18 	vmov	d8, r0, r1
 800d8a4:	464b      	mov	r3, r9
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f2 fce5 	bl	8000278 <__aeabi_dsub>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	f7f2 fcdf 	bl	8000278 <__aeabi_dsub>
 800d8ba:	a335      	add	r3, pc, #212	; (adr r3, 800d990 <__ieee754_pow+0x740>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	f7f2 fe92 	bl	80005e8 <__aeabi_dmul>
 800d8c4:	a334      	add	r3, pc, #208	; (adr r3, 800d998 <__ieee754_pow+0x748>)
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	460f      	mov	r7, r1
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	f7f2 fe89 	bl	80005e8 <__aeabi_dmul>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4630      	mov	r0, r6
 800d8dc:	4639      	mov	r1, r7
 800d8de:	f7f2 fccd 	bl	800027c <__adddf3>
 800d8e2:	9a07      	ldr	r2, [sp, #28]
 800d8e4:	4b37      	ldr	r3, [pc, #220]	; (800d9c4 <__ieee754_pow+0x774>)
 800d8e6:	4413      	add	r3, r2
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fcc6 	bl	800027c <__adddf3>
 800d8f0:	4682      	mov	sl, r0
 800d8f2:	9805      	ldr	r0, [sp, #20]
 800d8f4:	468b      	mov	fp, r1
 800d8f6:	f7f2 fe0d 	bl	8000514 <__aeabi_i2d>
 800d8fa:	9a07      	ldr	r2, [sp, #28]
 800d8fc:	4b32      	ldr	r3, [pc, #200]	; (800d9c8 <__ieee754_pow+0x778>)
 800d8fe:	4413      	add	r3, r2
 800d900:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d904:	4606      	mov	r6, r0
 800d906:	460f      	mov	r7, r1
 800d908:	4652      	mov	r2, sl
 800d90a:	465b      	mov	r3, fp
 800d90c:	ec51 0b18 	vmov	r0, r1, d8
 800d910:	f7f2 fcb4 	bl	800027c <__adddf3>
 800d914:	4642      	mov	r2, r8
 800d916:	464b      	mov	r3, r9
 800d918:	f7f2 fcb0 	bl	800027c <__adddf3>
 800d91c:	4632      	mov	r2, r6
 800d91e:	463b      	mov	r3, r7
 800d920:	f7f2 fcac 	bl	800027c <__adddf3>
 800d924:	2000      	movs	r0, #0
 800d926:	4632      	mov	r2, r6
 800d928:	463b      	mov	r3, r7
 800d92a:	4604      	mov	r4, r0
 800d92c:	460d      	mov	r5, r1
 800d92e:	f7f2 fca3 	bl	8000278 <__aeabi_dsub>
 800d932:	4642      	mov	r2, r8
 800d934:	464b      	mov	r3, r9
 800d936:	f7f2 fc9f 	bl	8000278 <__aeabi_dsub>
 800d93a:	ec53 2b18 	vmov	r2, r3, d8
 800d93e:	f7f2 fc9b 	bl	8000278 <__aeabi_dsub>
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	4650      	mov	r0, sl
 800d948:	4659      	mov	r1, fp
 800d94a:	e610      	b.n	800d56e <__ieee754_pow+0x31e>
 800d94c:	2401      	movs	r4, #1
 800d94e:	e6a1      	b.n	800d694 <__ieee754_pow+0x444>
 800d950:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d9a0 <__ieee754_pow+0x750>
 800d954:	e617      	b.n	800d586 <__ieee754_pow+0x336>
 800d956:	bf00      	nop
 800d958:	4a454eef 	.word	0x4a454eef
 800d95c:	3fca7e28 	.word	0x3fca7e28
 800d960:	93c9db65 	.word	0x93c9db65
 800d964:	3fcd864a 	.word	0x3fcd864a
 800d968:	a91d4101 	.word	0xa91d4101
 800d96c:	3fd17460 	.word	0x3fd17460
 800d970:	518f264d 	.word	0x518f264d
 800d974:	3fd55555 	.word	0x3fd55555
 800d978:	db6fabff 	.word	0xdb6fabff
 800d97c:	3fdb6db6 	.word	0x3fdb6db6
 800d980:	33333303 	.word	0x33333303
 800d984:	3fe33333 	.word	0x3fe33333
 800d988:	e0000000 	.word	0xe0000000
 800d98c:	3feec709 	.word	0x3feec709
 800d990:	dc3a03fd 	.word	0xdc3a03fd
 800d994:	3feec709 	.word	0x3feec709
 800d998:	145b01f5 	.word	0x145b01f5
 800d99c:	be3e2fe0 	.word	0xbe3e2fe0
 800d9a0:	00000000 	.word	0x00000000
 800d9a4:	3ff00000 	.word	0x3ff00000
 800d9a8:	7ff00000 	.word	0x7ff00000
 800d9ac:	43400000 	.word	0x43400000
 800d9b0:	0003988e 	.word	0x0003988e
 800d9b4:	000bb679 	.word	0x000bb679
 800d9b8:	080f24c0 	.word	0x080f24c0
 800d9bc:	3ff00000 	.word	0x3ff00000
 800d9c0:	40080000 	.word	0x40080000
 800d9c4:	080f24e0 	.word	0x080f24e0
 800d9c8:	080f24d0 	.word	0x080f24d0
 800d9cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800dc9c <__ieee754_pow+0xa4c>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	f7f2 fc51 	bl	800027c <__adddf3>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	ec41 0b1a 	vmov	d10, r0, r1
 800d9e0:	462b      	mov	r3, r5
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	f7f2 fc47 	bl	8000278 <__aeabi_dsub>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	ec51 0b1a 	vmov	r0, r1, d10
 800d9f2:	f7f3 f889 	bl	8000b08 <__aeabi_dcmpgt>
 800d9f6:	2800      	cmp	r0, #0
 800d9f8:	f47f ae04 	bne.w	800d604 <__ieee754_pow+0x3b4>
 800d9fc:	4aa2      	ldr	r2, [pc, #648]	; (800dc88 <__ieee754_pow+0xa38>)
 800d9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da02:	4293      	cmp	r3, r2
 800da04:	f340 8107 	ble.w	800dc16 <__ieee754_pow+0x9c6>
 800da08:	151b      	asrs	r3, r3, #20
 800da0a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800da0e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800da12:	fa4a fa03 	asr.w	sl, sl, r3
 800da16:	44da      	add	sl, fp
 800da18:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800da1c:	489b      	ldr	r0, [pc, #620]	; (800dc8c <__ieee754_pow+0xa3c>)
 800da1e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800da22:	4108      	asrs	r0, r1
 800da24:	ea00 030a 	and.w	r3, r0, sl
 800da28:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800da2c:	f1c1 0114 	rsb	r1, r1, #20
 800da30:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800da34:	fa4a fa01 	asr.w	sl, sl, r1
 800da38:	f1bb 0f00 	cmp.w	fp, #0
 800da3c:	f04f 0200 	mov.w	r2, #0
 800da40:	4620      	mov	r0, r4
 800da42:	4629      	mov	r1, r5
 800da44:	bfb8      	it	lt
 800da46:	f1ca 0a00 	rsblt	sl, sl, #0
 800da4a:	f7f2 fc15 	bl	8000278 <__aeabi_dsub>
 800da4e:	ec41 0b19 	vmov	d9, r0, r1
 800da52:	4642      	mov	r2, r8
 800da54:	464b      	mov	r3, r9
 800da56:	ec51 0b19 	vmov	r0, r1, d9
 800da5a:	f7f2 fc0f 	bl	800027c <__adddf3>
 800da5e:	a37a      	add	r3, pc, #488	; (adr r3, 800dc48 <__ieee754_pow+0x9f8>)
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	2000      	movs	r0, #0
 800da66:	4604      	mov	r4, r0
 800da68:	460d      	mov	r5, r1
 800da6a:	f7f2 fdbd 	bl	80005e8 <__aeabi_dmul>
 800da6e:	ec53 2b19 	vmov	r2, r3, d9
 800da72:	4606      	mov	r6, r0
 800da74:	460f      	mov	r7, r1
 800da76:	4620      	mov	r0, r4
 800da78:	4629      	mov	r1, r5
 800da7a:	f7f2 fbfd 	bl	8000278 <__aeabi_dsub>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4640      	mov	r0, r8
 800da84:	4649      	mov	r1, r9
 800da86:	f7f2 fbf7 	bl	8000278 <__aeabi_dsub>
 800da8a:	a371      	add	r3, pc, #452	; (adr r3, 800dc50 <__ieee754_pow+0xa00>)
 800da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da90:	f7f2 fdaa 	bl	80005e8 <__aeabi_dmul>
 800da94:	a370      	add	r3, pc, #448	; (adr r3, 800dc58 <__ieee754_pow+0xa08>)
 800da96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9a:	4680      	mov	r8, r0
 800da9c:	4689      	mov	r9, r1
 800da9e:	4620      	mov	r0, r4
 800daa0:	4629      	mov	r1, r5
 800daa2:	f7f2 fda1 	bl	80005e8 <__aeabi_dmul>
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	4640      	mov	r0, r8
 800daac:	4649      	mov	r1, r9
 800daae:	f7f2 fbe5 	bl	800027c <__adddf3>
 800dab2:	4604      	mov	r4, r0
 800dab4:	460d      	mov	r5, r1
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4630      	mov	r0, r6
 800dabc:	4639      	mov	r1, r7
 800dabe:	f7f2 fbdd 	bl	800027c <__adddf3>
 800dac2:	4632      	mov	r2, r6
 800dac4:	463b      	mov	r3, r7
 800dac6:	4680      	mov	r8, r0
 800dac8:	4689      	mov	r9, r1
 800daca:	f7f2 fbd5 	bl	8000278 <__aeabi_dsub>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4620      	mov	r0, r4
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7f2 fbcf 	bl	8000278 <__aeabi_dsub>
 800dada:	4642      	mov	r2, r8
 800dadc:	4606      	mov	r6, r0
 800dade:	460f      	mov	r7, r1
 800dae0:	464b      	mov	r3, r9
 800dae2:	4640      	mov	r0, r8
 800dae4:	4649      	mov	r1, r9
 800dae6:	f7f2 fd7f 	bl	80005e8 <__aeabi_dmul>
 800daea:	a35d      	add	r3, pc, #372	; (adr r3, 800dc60 <__ieee754_pow+0xa10>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	4604      	mov	r4, r0
 800daf2:	460d      	mov	r5, r1
 800daf4:	f7f2 fd78 	bl	80005e8 <__aeabi_dmul>
 800daf8:	a35b      	add	r3, pc, #364	; (adr r3, 800dc68 <__ieee754_pow+0xa18>)
 800dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafe:	f7f2 fbbb 	bl	8000278 <__aeabi_dsub>
 800db02:	4622      	mov	r2, r4
 800db04:	462b      	mov	r3, r5
 800db06:	f7f2 fd6f 	bl	80005e8 <__aeabi_dmul>
 800db0a:	a359      	add	r3, pc, #356	; (adr r3, 800dc70 <__ieee754_pow+0xa20>)
 800db0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db10:	f7f2 fbb4 	bl	800027c <__adddf3>
 800db14:	4622      	mov	r2, r4
 800db16:	462b      	mov	r3, r5
 800db18:	f7f2 fd66 	bl	80005e8 <__aeabi_dmul>
 800db1c:	a356      	add	r3, pc, #344	; (adr r3, 800dc78 <__ieee754_pow+0xa28>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f7f2 fba9 	bl	8000278 <__aeabi_dsub>
 800db26:	4622      	mov	r2, r4
 800db28:	462b      	mov	r3, r5
 800db2a:	f7f2 fd5d 	bl	80005e8 <__aeabi_dmul>
 800db2e:	a354      	add	r3, pc, #336	; (adr r3, 800dc80 <__ieee754_pow+0xa30>)
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f7f2 fba2 	bl	800027c <__adddf3>
 800db38:	4622      	mov	r2, r4
 800db3a:	462b      	mov	r3, r5
 800db3c:	f7f2 fd54 	bl	80005e8 <__aeabi_dmul>
 800db40:	4602      	mov	r2, r0
 800db42:	460b      	mov	r3, r1
 800db44:	4640      	mov	r0, r8
 800db46:	4649      	mov	r1, r9
 800db48:	f7f2 fb96 	bl	8000278 <__aeabi_dsub>
 800db4c:	4604      	mov	r4, r0
 800db4e:	460d      	mov	r5, r1
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	4640      	mov	r0, r8
 800db56:	4649      	mov	r1, r9
 800db58:	f7f2 fd46 	bl	80005e8 <__aeabi_dmul>
 800db5c:	2200      	movs	r2, #0
 800db5e:	ec41 0b19 	vmov	d9, r0, r1
 800db62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db66:	4620      	mov	r0, r4
 800db68:	4629      	mov	r1, r5
 800db6a:	f7f2 fb85 	bl	8000278 <__aeabi_dsub>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	ec51 0b19 	vmov	r0, r1, d9
 800db76:	f7f2 fe61 	bl	800083c <__aeabi_ddiv>
 800db7a:	4632      	mov	r2, r6
 800db7c:	4604      	mov	r4, r0
 800db7e:	460d      	mov	r5, r1
 800db80:	463b      	mov	r3, r7
 800db82:	4640      	mov	r0, r8
 800db84:	4649      	mov	r1, r9
 800db86:	f7f2 fd2f 	bl	80005e8 <__aeabi_dmul>
 800db8a:	4632      	mov	r2, r6
 800db8c:	463b      	mov	r3, r7
 800db8e:	f7f2 fb75 	bl	800027c <__adddf3>
 800db92:	4602      	mov	r2, r0
 800db94:	460b      	mov	r3, r1
 800db96:	4620      	mov	r0, r4
 800db98:	4629      	mov	r1, r5
 800db9a:	f7f2 fb6d 	bl	8000278 <__aeabi_dsub>
 800db9e:	4642      	mov	r2, r8
 800dba0:	464b      	mov	r3, r9
 800dba2:	f7f2 fb69 	bl	8000278 <__aeabi_dsub>
 800dba6:	460b      	mov	r3, r1
 800dba8:	4602      	mov	r2, r0
 800dbaa:	4939      	ldr	r1, [pc, #228]	; (800dc90 <__ieee754_pow+0xa40>)
 800dbac:	2000      	movs	r0, #0
 800dbae:	f7f2 fb63 	bl	8000278 <__aeabi_dsub>
 800dbb2:	ec41 0b10 	vmov	d0, r0, r1
 800dbb6:	ee10 3a90 	vmov	r3, s1
 800dbba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dbbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbc2:	da2b      	bge.n	800dc1c <__ieee754_pow+0x9cc>
 800dbc4:	4650      	mov	r0, sl
 800dbc6:	f000 f877 	bl	800dcb8 <scalbn>
 800dbca:	ec51 0b10 	vmov	r0, r1, d0
 800dbce:	ec53 2b18 	vmov	r2, r3, d8
 800dbd2:	f7ff bbee 	b.w	800d3b2 <__ieee754_pow+0x162>
 800dbd6:	4b2f      	ldr	r3, [pc, #188]	; (800dc94 <__ieee754_pow+0xa44>)
 800dbd8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dbdc:	429e      	cmp	r6, r3
 800dbde:	f77f af0d 	ble.w	800d9fc <__ieee754_pow+0x7ac>
 800dbe2:	4b2d      	ldr	r3, [pc, #180]	; (800dc98 <__ieee754_pow+0xa48>)
 800dbe4:	440b      	add	r3, r1
 800dbe6:	4303      	orrs	r3, r0
 800dbe8:	d009      	beq.n	800dbfe <__ieee754_pow+0x9ae>
 800dbea:	ec51 0b18 	vmov	r0, r1, d8
 800dbee:	2200      	movs	r2, #0
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	f7f2 ff6b 	bl	8000acc <__aeabi_dcmplt>
 800dbf6:	3800      	subs	r0, #0
 800dbf8:	bf18      	it	ne
 800dbfa:	2001      	movne	r0, #1
 800dbfc:	e448      	b.n	800d490 <__ieee754_pow+0x240>
 800dbfe:	4622      	mov	r2, r4
 800dc00:	462b      	mov	r3, r5
 800dc02:	f7f2 fb39 	bl	8000278 <__aeabi_dsub>
 800dc06:	4642      	mov	r2, r8
 800dc08:	464b      	mov	r3, r9
 800dc0a:	f7f2 ff73 	bl	8000af4 <__aeabi_dcmpge>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	f43f aef4 	beq.w	800d9fc <__ieee754_pow+0x7ac>
 800dc14:	e7e9      	b.n	800dbea <__ieee754_pow+0x99a>
 800dc16:	f04f 0a00 	mov.w	sl, #0
 800dc1a:	e71a      	b.n	800da52 <__ieee754_pow+0x802>
 800dc1c:	ec51 0b10 	vmov	r0, r1, d0
 800dc20:	4619      	mov	r1, r3
 800dc22:	e7d4      	b.n	800dbce <__ieee754_pow+0x97e>
 800dc24:	491a      	ldr	r1, [pc, #104]	; (800dc90 <__ieee754_pow+0xa40>)
 800dc26:	2000      	movs	r0, #0
 800dc28:	f7ff bb31 	b.w	800d28e <__ieee754_pow+0x3e>
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	2100      	movs	r1, #0
 800dc30:	f7ff bb2d 	b.w	800d28e <__ieee754_pow+0x3e>
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7ff bb29 	b.w	800d28e <__ieee754_pow+0x3e>
 800dc3c:	9204      	str	r2, [sp, #16]
 800dc3e:	f7ff bb7b 	b.w	800d338 <__ieee754_pow+0xe8>
 800dc42:	2300      	movs	r3, #0
 800dc44:	f7ff bb65 	b.w	800d312 <__ieee754_pow+0xc2>
 800dc48:	00000000 	.word	0x00000000
 800dc4c:	3fe62e43 	.word	0x3fe62e43
 800dc50:	fefa39ef 	.word	0xfefa39ef
 800dc54:	3fe62e42 	.word	0x3fe62e42
 800dc58:	0ca86c39 	.word	0x0ca86c39
 800dc5c:	be205c61 	.word	0xbe205c61
 800dc60:	72bea4d0 	.word	0x72bea4d0
 800dc64:	3e663769 	.word	0x3e663769
 800dc68:	c5d26bf1 	.word	0xc5d26bf1
 800dc6c:	3ebbbd41 	.word	0x3ebbbd41
 800dc70:	af25de2c 	.word	0xaf25de2c
 800dc74:	3f11566a 	.word	0x3f11566a
 800dc78:	16bebd93 	.word	0x16bebd93
 800dc7c:	3f66c16c 	.word	0x3f66c16c
 800dc80:	5555553e 	.word	0x5555553e
 800dc84:	3fc55555 	.word	0x3fc55555
 800dc88:	3fe00000 	.word	0x3fe00000
 800dc8c:	fff00000 	.word	0xfff00000
 800dc90:	3ff00000 	.word	0x3ff00000
 800dc94:	4090cbff 	.word	0x4090cbff
 800dc98:	3f6f3400 	.word	0x3f6f3400
 800dc9c:	652b82fe 	.word	0x652b82fe
 800dca0:	3c971547 	.word	0x3c971547

0800dca4 <fabs>:
 800dca4:	ec51 0b10 	vmov	r0, r1, d0
 800dca8:	ee10 2a10 	vmov	r2, s0
 800dcac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dcb0:	ec43 2b10 	vmov	d0, r2, r3
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <scalbn>:
 800dcb8:	b570      	push	{r4, r5, r6, lr}
 800dcba:	ec55 4b10 	vmov	r4, r5, d0
 800dcbe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	462b      	mov	r3, r5
 800dcc6:	b999      	cbnz	r1, 800dcf0 <scalbn+0x38>
 800dcc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dccc:	4323      	orrs	r3, r4
 800dcce:	d03f      	beq.n	800dd50 <scalbn+0x98>
 800dcd0:	4b35      	ldr	r3, [pc, #212]	; (800dda8 <scalbn+0xf0>)
 800dcd2:	4629      	mov	r1, r5
 800dcd4:	ee10 0a10 	vmov	r0, s0
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f7f2 fc85 	bl	80005e8 <__aeabi_dmul>
 800dcde:	4b33      	ldr	r3, [pc, #204]	; (800ddac <scalbn+0xf4>)
 800dce0:	429e      	cmp	r6, r3
 800dce2:	4604      	mov	r4, r0
 800dce4:	460d      	mov	r5, r1
 800dce6:	da10      	bge.n	800dd0a <scalbn+0x52>
 800dce8:	a327      	add	r3, pc, #156	; (adr r3, 800dd88 <scalbn+0xd0>)
 800dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcee:	e01f      	b.n	800dd30 <scalbn+0x78>
 800dcf0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dcf4:	4291      	cmp	r1, r2
 800dcf6:	d10c      	bne.n	800dd12 <scalbn+0x5a>
 800dcf8:	ee10 2a10 	vmov	r2, s0
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fabc 	bl	800027c <__adddf3>
 800dd04:	4604      	mov	r4, r0
 800dd06:	460d      	mov	r5, r1
 800dd08:	e022      	b.n	800dd50 <scalbn+0x98>
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dd10:	3936      	subs	r1, #54	; 0x36
 800dd12:	f24c 3250 	movw	r2, #50000	; 0xc350
 800dd16:	4296      	cmp	r6, r2
 800dd18:	dd0d      	ble.n	800dd36 <scalbn+0x7e>
 800dd1a:	2d00      	cmp	r5, #0
 800dd1c:	a11c      	add	r1, pc, #112	; (adr r1, 800dd90 <scalbn+0xd8>)
 800dd1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd22:	da02      	bge.n	800dd2a <scalbn+0x72>
 800dd24:	a11c      	add	r1, pc, #112	; (adr r1, 800dd98 <scalbn+0xe0>)
 800dd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd2a:	a319      	add	r3, pc, #100	; (adr r3, 800dd90 <scalbn+0xd8>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f7f2 fc5a 	bl	80005e8 <__aeabi_dmul>
 800dd34:	e7e6      	b.n	800dd04 <scalbn+0x4c>
 800dd36:	1872      	adds	r2, r6, r1
 800dd38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dd3c:	428a      	cmp	r2, r1
 800dd3e:	dcec      	bgt.n	800dd1a <scalbn+0x62>
 800dd40:	2a00      	cmp	r2, #0
 800dd42:	dd08      	ble.n	800dd56 <scalbn+0x9e>
 800dd44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd50:	ec45 4b10 	vmov	d0, r4, r5
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
 800dd56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dd5a:	da08      	bge.n	800dd6e <scalbn+0xb6>
 800dd5c:	2d00      	cmp	r5, #0
 800dd5e:	a10a      	add	r1, pc, #40	; (adr r1, 800dd88 <scalbn+0xd0>)
 800dd60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd64:	dac0      	bge.n	800dce8 <scalbn+0x30>
 800dd66:	a10e      	add	r1, pc, #56	; (adr r1, 800dda0 <scalbn+0xe8>)
 800dd68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd6c:	e7bc      	b.n	800dce8 <scalbn+0x30>
 800dd6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd72:	3236      	adds	r2, #54	; 0x36
 800dd74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4b0c      	ldr	r3, [pc, #48]	; (800ddb0 <scalbn+0xf8>)
 800dd80:	2200      	movs	r2, #0
 800dd82:	e7d5      	b.n	800dd30 <scalbn+0x78>
 800dd84:	f3af 8000 	nop.w
 800dd88:	c2f8f359 	.word	0xc2f8f359
 800dd8c:	01a56e1f 	.word	0x01a56e1f
 800dd90:	8800759c 	.word	0x8800759c
 800dd94:	7e37e43c 	.word	0x7e37e43c
 800dd98:	8800759c 	.word	0x8800759c
 800dd9c:	fe37e43c 	.word	0xfe37e43c
 800dda0:	c2f8f359 	.word	0xc2f8f359
 800dda4:	81a56e1f 	.word	0x81a56e1f
 800dda8:	43500000 	.word	0x43500000
 800ddac:	ffff3cb0 	.word	0xffff3cb0
 800ddb0:	3c900000 	.word	0x3c900000

0800ddb4 <with_errno>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	460d      	mov	r5, r1
 800ddba:	4616      	mov	r6, r2
 800ddbc:	f7fe fa72 	bl	800c2a4 <__errno>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	6006      	str	r6, [r0, #0]
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	bd70      	pop	{r4, r5, r6, pc}

0800ddc8 <xflow>:
 800ddc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddca:	4614      	mov	r4, r2
 800ddcc:	461d      	mov	r5, r3
 800ddce:	b108      	cbz	r0, 800ddd4 <xflow+0xc>
 800ddd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ddd4:	e9cd 2300 	strd	r2, r3, [sp]
 800ddd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dddc:	4620      	mov	r0, r4
 800ddde:	4629      	mov	r1, r5
 800dde0:	f7f2 fc02 	bl	80005e8 <__aeabi_dmul>
 800dde4:	2222      	movs	r2, #34	; 0x22
 800dde6:	b003      	add	sp, #12
 800dde8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddec:	f7ff bfe2 	b.w	800ddb4 <with_errno>

0800ddf0 <__math_uflow>:
 800ddf0:	b508      	push	{r3, lr}
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ddf8:	f7ff ffe6 	bl	800ddc8 <xflow>
 800ddfc:	ec41 0b10 	vmov	d0, r0, r1
 800de00:	bd08      	pop	{r3, pc}

0800de02 <__math_oflow>:
 800de02:	b508      	push	{r3, lr}
 800de04:	2200      	movs	r2, #0
 800de06:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800de0a:	f7ff ffdd 	bl	800ddc8 <xflow>
 800de0e:	ec41 0b10 	vmov	d0, r0, r1
 800de12:	bd08      	pop	{r3, pc}

0800de14 <_init>:
 800de14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de16:	bf00      	nop
 800de18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de1a:	bc08      	pop	{r3}
 800de1c:	469e      	mov	lr, r3
 800de1e:	4770      	bx	lr

0800de20 <_fini>:
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	bf00      	nop
 800de24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de26:	bc08      	pop	{r3}
 800de28:	469e      	mov	lr, r3
 800de2a:	4770      	bx	lr
