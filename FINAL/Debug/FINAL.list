
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000713c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e4040  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080eb304  080eb304  0010001c  2**0
                  CONTENTS
  4 .ARM          00000008  080eb304  080eb304  000fb304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080eb30c  080eb30c  0010001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080eb30c  080eb30c  000fb30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080eb310  080eb310  000fb310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080eb314  00100000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0010001c  2**0
                  CONTENTS
 10 .bss          000006d8  2000001c  2000001c  0010001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006f4  200006f4  0010001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0010001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0010004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000191f0  00000000  00000000  0010008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004089  00000000  00000000  0011927f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016d8  00000000  00000000  0011d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011b1  00000000  00000000  0011e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025632  00000000  00000000  0011fb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fcaf  00000000  00000000  001451c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df514  00000000  00000000  00164e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e3c  00000000  00000000  00244388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0024a1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072ac 	.word	0x080072ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080072ac 	.word	0x080072ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

#include "adc.h"

ADC_HandleTypeDef hadc1;

void MX_ADC1_Init(void){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <MX_ADC1_Init+0x108>)
 80004d8:	4a3d      	ldr	r2, [pc, #244]	; (80005d0 <MX_ADC1_Init+0x10c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004dc:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <MX_ADC1_Init+0x108>)
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e2:	4b3a      	ldr	r3, [pc, #232]	; (80005cc <MX_ADC1_Init+0x108>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004e8:	4b38      	ldr	r3, [pc, #224]	; (80005cc <MX_ADC1_Init+0x108>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <MX_ADC1_Init+0x108>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b35      	ldr	r3, [pc, #212]	; (80005cc <MX_ADC1_Init+0x108>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fc:	4b33      	ldr	r3, [pc, #204]	; (80005cc <MX_ADC1_Init+0x108>)
 80004fe:	2200      	movs	r2, #0
 8000500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000502:	4b32      	ldr	r3, [pc, #200]	; (80005cc <MX_ADC1_Init+0x108>)
 8000504:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <MX_ADC1_Init+0x110>)
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000508:	4b30      	ldr	r3, [pc, #192]	; (80005cc <MX_ADC1_Init+0x108>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800050e:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <MX_ADC1_Init+0x108>)
 8000510:	2205      	movs	r2, #5
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000514:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <MX_ADC1_Init+0x108>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051c:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <MX_ADC1_Init+0x108>)
 800051e:	2201      	movs	r2, #1
 8000520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000522:	482a      	ldr	r0, [pc, #168]	; (80005cc <MX_ADC1_Init+0x108>)
 8000524:	f002 fc52 	bl	8002dcc <HAL_ADC_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052e:	f001 fe88 	bl	8002242 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000532:	2308      	movs	r3, #8
 8000534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	4822      	ldr	r0, [pc, #136]	; (80005cc <MX_ADC1_Init+0x108>)
 8000544:	f002 fc86 	bl	8002e54 <HAL_ADC_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054e:	f001 fe78 	bl	8002242 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000552:	2309      	movs	r3, #9
 8000554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	481b      	ldr	r0, [pc, #108]	; (80005cc <MX_ADC1_Init+0x108>)
 8000560:	f002 fc78 	bl	8002e54 <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800056a:	f001 fe6a 	bl	8002242 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800056e:	230a      	movs	r3, #10
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000572:	2303      	movs	r3, #3
 8000574:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	4814      	ldr	r0, [pc, #80]	; (80005cc <MX_ADC1_Init+0x108>)
 800057c:	f002 fc6a 	bl	8002e54 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000586:	f001 fe5c 	bl	8002242 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800058a:	230b      	movs	r3, #11
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800058e:	2304      	movs	r3, #4
 8000590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	480d      	ldr	r0, [pc, #52]	; (80005cc <MX_ADC1_Init+0x108>)
 8000598:	f002 fc5c 	bl	8002e54 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005a2:	f001 fe4e 	bl	8002242 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005a6:	230c      	movs	r3, #12
 80005a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005aa:	2305      	movs	r3, #5
 80005ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MX_ADC1_Init+0x108>)
 80005b4:	f002 fc4e 	bl	8002e54 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005be:	f001 fe40 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000038 	.word	0x20000038
 80005d0:	40012000 	.word	0x40012000
 80005d4:	0f000001 	.word	0x0f000001

080005d8 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	2108      	movs	r1, #8
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <button_init+0x14>)
 80005e2:	f003 fc7f 	bl	8003ee4 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020c00 	.word	0x40020c00

080005f0 <MX_DMA_Init>:
 *      Author: ADMIN
 */

#include "dma.h"

void MX_DMA_Init(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_DMA_Init+0x3c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <MX_DMA_Init+0x3c>)
 8000600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_DMA_Init+0x3c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2100      	movs	r1, #0
 8000616:	2038      	movs	r0, #56	; 0x38
 8000618:	f002 ff15 	bl	8003446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800061c:	2038      	movs	r0, #56	; 0x38
 800061e:	f002 ff2e 	bl	800347e <HAL_NVIC_EnableIRQ>

}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <MX_FSMC_Init>:

#include "fsmc.h"

SRAM_HandleTypeDef hsram1;

void MX_FSMC_Init(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	b08e      	sub	sp, #56	; 0x38
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]
 800065a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_FSMC_Init+0xec>)
 800065e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000662:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <MX_FSMC_Init+0xec>)
 8000666:	4a2e      	ldr	r2, [pc, #184]	; (8000720 <MX_FSMC_Init+0xf0>)
 8000668:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_FSMC_Init+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_FSMC_Init+0xec>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_FSMC_Init+0xec>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800067c:	4b27      	ldr	r3, [pc, #156]	; (800071c <MX_FSMC_Init+0xec>)
 800067e:	2210      	movs	r2, #16
 8000680:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_FSMC_Init+0xec>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <MX_FSMC_Init+0xec>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800068e:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_FSMC_Init+0xec>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000694:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_FSMC_Init+0xec>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_FSMC_Init+0xec>)
 800069c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_FSMC_Init+0xec>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_FSMC_Init+0xec>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_FSMC_Init+0xec>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_FSMC_Init+0xec>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_FSMC_Init+0xec>)
 80006be:	2200      	movs	r2, #0
 80006c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80006c2:	230f      	movs	r3, #15
 80006c4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80006c6:	230f      	movs	r3, #15
 80006c8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80006ca:	233c      	movs	r3, #60	; 0x3c
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80006d2:	2310      	movs	r3, #16
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80006d6:	2311      	movs	r3, #17
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80006da:	2300      	movs	r3, #0
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80006de:	2308      	movs	r3, #8
 80006e0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80006e2:	230f      	movs	r3, #15
 80006e4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80006e6:	2309      	movs	r3, #9
 80006e8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80006ee:	2310      	movs	r3, #16
 80006f0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80006f2:	2311      	movs	r3, #17
 80006f4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80006fa:	463a      	mov	r2, r7
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_FSMC_Init+0xec>)
 8000704:	f004 fc74 	bl	8004ff0 <HAL_SRAM_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800070e:	f001 fd98 	bl	8002242 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000712:	bf00      	nop
 8000714:	3738      	adds	r7, #56	; 0x38
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000080 	.word	0x20000080
 8000720:	a0000104 	.word	0xa0000104

08000724 <pointTouch_init>:

struct pointTouch pClassic;
struct pointTouch pSpeed;
struct pointTouch pTime;

void pointTouch_init(){
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	pRight.x_begin = 0;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <pointTouch_init+0x28>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
	pRight.x_end = 100;
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <pointTouch_init+0x28>)
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	605a      	str	r2, [r3, #4]
	pRight.y_begin = 0;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <pointTouch_init+0x28>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
	pRight.y_end = 100;
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <pointTouch_init+0x28>)
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	60da      	str	r2, [r3, #12]
	// tuong tu cho cac bien con lai
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	2000045c 	.word	0x2000045c

08000750 <snake_init>:

void snake_init(){
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
	snake[0].x = 120;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <snake_init+0x48>)
 8000758:	2278      	movs	r2, #120	; 0x78
 800075a:	601a      	str	r2, [r3, #0]
	snake[0].y = 160;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <snake_init+0x48>)
 800075e:	22a0      	movs	r2, #160	; 0xa0
 8000760:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e00d      	b.n	8000784 <snake_init+0x34>
		snake[i].x = 0;
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <snake_init+0x48>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2100      	movs	r1, #0
 800076e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		snake[i].y = 0;
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <snake_init+0x48>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
	for (int i = 1; i < MAX_LENGTH_SNAKE; i++){
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b63      	cmp	r3, #99	; 0x63
 8000788:	ddee      	ble.n	8000768 <snake_init+0x18>
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	2000013c 	.word	0x2000013c

0800079c <MX_GPIO_Init>:
 *      Author: ADMIN
 */

#include "gpio.h"

void MX_GPIO_Init(void){
 800079c:	b580      	push	{r7, lr}
 800079e:	b08e      	sub	sp, #56	; 0x38
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <MX_GPIO_Init+0x240>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a88      	ldr	r2, [pc, #544]	; (80009dc <MX_GPIO_Init+0x240>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b86      	ldr	r3, [pc, #536]	; (80009dc <MX_GPIO_Init+0x240>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	623b      	str	r3, [r7, #32]
 80007cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
 80007d2:	4b82      	ldr	r3, [pc, #520]	; (80009dc <MX_GPIO_Init+0x240>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a81      	ldr	r2, [pc, #516]	; (80009dc <MX_GPIO_Init+0x240>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b7f      	ldr	r3, [pc, #508]	; (80009dc <MX_GPIO_Init+0x240>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	4b7b      	ldr	r3, [pc, #492]	; (80009dc <MX_GPIO_Init+0x240>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a7a      	ldr	r2, [pc, #488]	; (80009dc <MX_GPIO_Init+0x240>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b78      	ldr	r3, [pc, #480]	; (80009dc <MX_GPIO_Init+0x240>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	61bb      	str	r3, [r7, #24]
 8000804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	4b74      	ldr	r3, [pc, #464]	; (80009dc <MX_GPIO_Init+0x240>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a73      	ldr	r2, [pc, #460]	; (80009dc <MX_GPIO_Init+0x240>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b71      	ldr	r3, [pc, #452]	; (80009dc <MX_GPIO_Init+0x240>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b6d      	ldr	r3, [pc, #436]	; (80009dc <MX_GPIO_Init+0x240>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a6c      	ldr	r2, [pc, #432]	; (80009dc <MX_GPIO_Init+0x240>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b6a      	ldr	r3, [pc, #424]	; (80009dc <MX_GPIO_Init+0x240>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b66      	ldr	r3, [pc, #408]	; (80009dc <MX_GPIO_Init+0x240>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a65      	ldr	r2, [pc, #404]	; (80009dc <MX_GPIO_Init+0x240>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b63      	ldr	r3, [pc, #396]	; (80009dc <MX_GPIO_Init+0x240>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b5f      	ldr	r3, [pc, #380]	; (80009dc <MX_GPIO_Init+0x240>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a5e      	ldr	r2, [pc, #376]	; (80009dc <MX_GPIO_Init+0x240>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b5c      	ldr	r3, [pc, #368]	; (80009dc <MX_GPIO_Init+0x240>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b58      	ldr	r3, [pc, #352]	; (80009dc <MX_GPIO_Init+0x240>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a57      	ldr	r2, [pc, #348]	; (80009dc <MX_GPIO_Init+0x240>)
 8000880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b55      	ldr	r3, [pc, #340]	; (80009dc <MX_GPIO_Init+0x240>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2110      	movs	r1, #16
 8000896:	4852      	ldr	r0, [pc, #328]	; (80009e0 <MX_GPIO_Init+0x244>)
 8000898:	f003 fb24 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80008a2:	4850      	ldr	r0, [pc, #320]	; (80009e4 <MX_GPIO_Init+0x248>)
 80008a4:	f003 fb1e 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_POWER_GPIO_Port, ESP_POWER_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ae:	484e      	ldr	r0, [pc, #312]	; (80009e8 <MX_GPIO_Init+0x24c>)
 80008b0:	f003 fb18 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80008ba:	484c      	ldr	r0, [pc, #304]	; (80009ec <MX_GPIO_Init+0x250>)
 80008bc:	f003 fb12 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	484a      	ldr	r0, [pc, #296]	; (80009f0 <MX_GPIO_Init+0x254>)
 80008c8:	f003 fb0c 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2108      	movs	r1, #8
 80008d0:	4848      	ldr	r0, [pc, #288]	; (80009f4 <MX_GPIO_Init+0x258>)
 80008d2:	f003 fb07 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 80008d6:	2310      	movs	r3, #16
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	483c      	ldr	r0, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x244>)
 80008ee:	f003 f95d 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : FSMC_RES_Pin T_MOSI_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80008f2:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	4836      	ldr	r0, [pc, #216]	; (80009e4 <MX_GPIO_Init+0x248>)
 800090c:	f003 f94e 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_BUSY_Pin */
  GPIO_InitStruct.Pin = ESP_BUSY_Pin;
 8000910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP_BUSY_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4830      	ldr	r0, [pc, #192]	; (80009e8 <MX_GPIO_Init+0x24c>)
 8000926:	f003 f941 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_POWER_Pin */
  GPIO_InitStruct.Pin = ESP_POWER_Pin;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_POWER_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4829      	ldr	r0, [pc, #164]	; (80009e8 <MX_GPIO_Init+0x24c>)
 8000944:	f003 f932 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_LATCH_Pin T_CS_Pin T_CLK_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000948:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4822      	ldr	r0, [pc, #136]	; (80009ec <MX_GPIO_Init+0x250>)
 8000962:	f003 f923 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : T_PEN_Pin */
  GPIO_InitStruct.Pin = T_PEN_Pin;
 8000966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	481a      	ldr	r0, [pc, #104]	; (80009e4 <MX_GPIO_Init+0x248>)
 800097c:	f003 f916 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4815      	ldr	r0, [pc, #84]	; (80009f0 <MX_GPIO_Init+0x254>)
 800099a:	f003 f907 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_GPIO_Init+0x248>)
 80009b4:	f003 f8fa 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009b8:	2308      	movs	r3, #8
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <MX_GPIO_Init+0x258>)
 80009d0:	f003 f8ec 	bl	8003bac <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3738      	adds	r7, #56	; 0x38
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40021400 	.word	0x40021400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <MX_I2C1_Init>:

#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C1_Init+0x50>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_I2C1_Init+0x54>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a04:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x58>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_I2C1_Init+0x50>)
 8000a36:	f003 fa6f 	bl	8003f18 <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f001 fbff 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000046c 	.word	0x2000046c
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <home_lcd>:
 *      Author: ADMIN
 */

#include "interface.h"

void home_lcd(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_home);
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <home_lcd+0xa0>)
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a62:	22f0      	movs	r2, #240	; 0xf0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 ff12 	bl	8001890 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8000a6c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	23b9      	movs	r3, #185	; 0xb9
 8000a74:	22b9      	movs	r2, #185	; 0xb9
 8000a76:	2196      	movs	r1, #150	; 0x96
 8000a78:	2041      	movs	r0, #65	; 0x41
 8000a7a:	f000 fc97 	bl	80013ac <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8000a7e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	23eb      	movs	r3, #235	; 0xeb
 8000a86:	22b9      	movs	r2, #185	; 0xb9
 8000a88:	21c8      	movs	r1, #200	; 0xc8
 8000a8a:	2041      	movs	r0, #65	; 0x41
 8000a8c:	f000 fc8e 	bl	80013ac <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8000a90:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	f240 131d 	movw	r3, #285	; 0x11d
 8000a9a:	22b9      	movs	r2, #185	; 0xb9
 8000a9c:	21fa      	movs	r1, #250	; 0xfa
 8000a9e:	2041      	movs	r0, #65	; 0x41
 8000aa0:	f000 fc84 	bl	80013ac <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 19, POS_Y_SECOND + 5, "NEWGAME", BLACK, BLACK, 24, 1);
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	2318      	movs	r3, #24
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <home_lcd+0xa4>)
 8000ab4:	219b      	movs	r1, #155	; 0x9b
 8000ab6:	2054      	movs	r0, #84	; 0x54
 8000ab8:	f001 f9bc 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 12, POS_Y_THIRD + 5, "CONTINUE", BLACK, BLACK, 24, 1);
 8000abc:	2301      	movs	r3, #1
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	2318      	movs	r3, #24
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <home_lcd+0xa8>)
 8000acc:	21cd      	movs	r1, #205	; 0xcd
 8000ace:	204d      	movs	r0, #77	; 0x4d
 8000ad0:	f001 f9b0 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 7, POS_Y_FORTH + 5, "HIGHSCORE", BLACK, BLACK, 24, 1);
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	2318      	movs	r3, #24
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	2300      	movs	r3, #0
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <home_lcd+0xac>)
 8000ae4:	21ff      	movs	r1, #255	; 0xff
 8000ae6:	2048      	movs	r0, #72	; 0x48
 8000ae8:	f001 f9a4 	bl	8001e34 <lcd_ShowStr>
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	0800a2bc 	.word	0x0800a2bc
 8000af8:	080072c4 	.word	0x080072c4
 8000afc:	080072cc 	.word	0x080072cc
 8000b00:	080072d8 	.word	0x080072d8

08000b04 <mode_game_lcd>:

void mode_game_lcd(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_mode);
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <mode_game_lcd+0xc8>)
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b12:	22f0      	movs	r2, #240	; 0xf0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 feba 	bl	8001890 <lcd_ShowPicture>
	lcd_Fill(POS_X_FIRST, POS_Y_FIRST,
 8000b1c:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2387      	movs	r3, #135	; 0x87
 8000b24:	22b9      	movs	r2, #185	; 0xb9
 8000b26:	2164      	movs	r1, #100	; 0x64
 8000b28:	2041      	movs	r0, #65	; 0x41
 8000b2a:	f000 fc3f 	bl	80013ac <lcd_Fill>
				 POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BROWN);
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8000b2e:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	23b9      	movs	r3, #185	; 0xb9
 8000b36:	22b9      	movs	r2, #185	; 0xb9
 8000b38:	2196      	movs	r1, #150	; 0x96
 8000b3a:	2041      	movs	r0, #65	; 0x41
 8000b3c:	f000 fc36 	bl	80013ac <lcd_Fill>
				 POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8000b40:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	23eb      	movs	r3, #235	; 0xeb
 8000b48:	22b9      	movs	r2, #185	; 0xb9
 8000b4a:	21c8      	movs	r1, #200	; 0xc8
 8000b4c:	2041      	movs	r0, #65	; 0x41
 8000b4e:	f000 fc2d 	bl	80013ac <lcd_Fill>
				 POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8000b52:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	f240 131d 	movw	r3, #285	; 0x11d
 8000b5c:	22b9      	movs	r2, #185	; 0xb9
 8000b5e:	21fa      	movs	r1, #250	; 0xfa
 8000b60:	2041      	movs	r0, #65	; 0x41
 8000b62:	f000 fc23 	bl	80013ac <lcd_Fill>
					 POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FIRST + 19, POS_Y_FIRST + 5, "CLASSIC", BLACK, BLACK, 24, 1);
 8000b66:	2301      	movs	r3, #1
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2318      	movs	r3, #24
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <mode_game_lcd+0xcc>)
 8000b76:	2169      	movs	r1, #105	; 0x69
 8000b78:	2054      	movs	r0, #84	; 0x54
 8000b7a:	f001 f95b 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_SECOND + 31, POS_Y_SECOND + 5, "SPEED", BLACK, BLACK, 24, 1);
 8000b7e:	2301      	movs	r3, #1
 8000b80:	9302      	str	r3, [sp, #8]
 8000b82:	2318      	movs	r3, #24
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	2300      	movs	r3, #0
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <mode_game_lcd+0xd0>)
 8000b8e:	219b      	movs	r1, #155	; 0x9b
 8000b90:	2060      	movs	r0, #96	; 0x60
 8000b92:	f001 f94f 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 31, POS_Y_THIRD + 5, "TIMER", BLACK, BLACK, 24, 1);
 8000b96:	2301      	movs	r3, #1
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	2318      	movs	r3, #24
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <mode_game_lcd+0xd4>)
 8000ba6:	21cd      	movs	r1, #205	; 0xcd
 8000ba8:	2060      	movs	r0, #96	; 0x60
 8000baa:	f001 f943 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8000bae:	2301      	movs	r3, #1
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	2318      	movs	r3, #24
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <mode_game_lcd+0xd8>)
 8000bbe:	21ff      	movs	r1, #255	; 0xff
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f001 f937 	bl	8001e34 <lcd_ShowStr>
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	0802fabc 	.word	0x0802fabc
 8000bd0:	080072e4 	.word	0x080072e4
 8000bd4:	080072ec 	.word	0x080072ec
 8000bd8:	080072f4 	.word	0x080072f4
 8000bdc:	080072fc 	.word	0x080072fc

08000be0 <highscore_lcd>:

void highscore_lcd(){
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_highscore);
 8000be6:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <highscore_lcd+0x17c>)
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bee:	22f0      	movs	r2, #240	; 0xf0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fe4c 	bl	8001890 <lcd_ShowPicture>
	lcd_ShowStr(POS_X_RANK, POS_Y_RANK, "RANK", BLACK, BLACK, 16, 1);
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	2300      	movs	r3, #0
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	4a56      	ldr	r2, [pc, #344]	; (8000d60 <highscore_lcd+0x180>)
 8000c08:	2150      	movs	r1, #80	; 0x50
 8000c0a:	200a      	movs	r0, #10
 8000c0c:	f001 f912 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_NAME, POS_Y_RANK, "NAME", BLACK, BLACK, 16, 1);
 8000c10:	2301      	movs	r3, #1
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	2310      	movs	r3, #16
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4a51      	ldr	r2, [pc, #324]	; (8000d64 <highscore_lcd+0x184>)
 8000c20:	2150      	movs	r1, #80	; 0x50
 8000c22:	203c      	movs	r0, #60	; 0x3c
 8000c24:	f001 f906 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_SCORE, POS_Y_RANK, "SCORE", BLACK, BLACK, 16, 1);
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	9301      	str	r3, [sp, #4]
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2300      	movs	r3, #0
 8000c36:	4a4c      	ldr	r2, [pc, #304]	; (8000d68 <highscore_lcd+0x188>)
 8000c38:	2150      	movs	r1, #80	; 0x50
 8000c3a:	20a0      	movs	r0, #160	; 0xa0
 8000c3c:	f001 f8fa 	bl	8001e34 <lcd_ShowStr>
	char c[10] = "";
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 1; i <= num_history; i++){
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e051      	b.n	8000cf8 <highscore_lcd+0x118>
		lcd_ShowStr(POS_X_RANK, POS_Y_RANK + i * SPACE, itoa(i, c, 10), BLACK, BLACK, 16, 1);
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	3305      	adds	r3, #5
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	b29c      	uxth	r4, r3
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	1d39      	adds	r1, r7, #4
 8000c62:	220a      	movs	r2, #10
 8000c64:	4618      	mov	r0, r3
 8000c66:	f006 fab1 	bl	80071cc <itoa>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9302      	str	r3, [sp, #8]
 8000c70:	2310      	movs	r3, #16
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f001 f8d9 	bl	8001e34 <lcd_ShowStr>
		lcd_ShowStr(POS_X_NAME, POS_Y_RANK + i * SPACE, history[i - 1].name, BLACK, BLACK, 16, 1);
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	3305      	adds	r3, #5
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4a34      	ldr	r2, [pc, #208]	; (8000d6c <highscore_lcd+0x18c>)
 8000c9a:	441a      	add	r2, r3
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	203c      	movs	r0, #60	; 0x3c
 8000cac:	f001 f8c2 	bl	8001e34 <lcd_ShowStr>
		lcd_ShowStr(POS_X_SCORE, POS_Y_RANK + i * SPACE, itoa(history[i - 1].score, c, 10), BLACK, BLACK, 16, 1);
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	3305      	adds	r3, #5
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	b29c      	uxth	r4, r3
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	1e5a      	subs	r2, r3, #1
 8000cbe:	492b      	ldr	r1, [pc, #172]	; (8000d6c <highscore_lcd+0x18c>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	330a      	adds	r3, #10
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	220a      	movs	r2, #10
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f006 fa79 	bl	80071cc <itoa>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4621      	mov	r1, r4
 8000cec:	20a0      	movs	r0, #160	; 0xa0
 8000cee:	f001 f8a1 	bl	8001e34 <lcd_ShowStr>
	for(uint8_t i = 1; i <= num_history; i++){
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <highscore_lcd+0x190>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d9a8      	bls.n	8000c54 <highscore_lcd+0x74>
	}
	lcd_Fill(POS_X_FORTH, POS_Y_FORTH,
 8000d02:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	f240 131d 	movw	r3, #285	; 0x11d
 8000d0c:	22b9      	movs	r2, #185	; 0xb9
 8000d0e:	21fa      	movs	r1, #250	; 0xfa
 8000d10:	2041      	movs	r0, #65	; 0x41
 8000d12:	f000 fb4b 	bl	80013ac <lcd_Fill>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_FORTH + 35, POS_Y_FORTH + 5, "QUIT", BLACK, BLACK, 24, 1);
 8000d16:	2301      	movs	r3, #1
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	2318      	movs	r3, #24
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <highscore_lcd+0x194>)
 8000d26:	21ff      	movs	r1, #255	; 0xff
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f001 f883 	bl	8001e34 <lcd_ShowStr>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	f240 131d 	movw	r3, #285	; 0x11d
 8000d36:	22b9      	movs	r2, #185	; 0xb9
 8000d38:	21fa      	movs	r1, #250	; 0xfa
 8000d3a:	2041      	movs	r0, #65	; 0x41
 8000d3c:	f000 fc07 	bl	800154e <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8000d40:	2300      	movs	r3, #0
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8000d48:	22b8      	movs	r2, #184	; 0xb8
 8000d4a:	21fb      	movs	r1, #251	; 0xfb
 8000d4c:	2042      	movs	r0, #66	; 0x42
 8000d4e:	f000 fbfe 	bl	800154e <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	080552bc 	.word	0x080552bc
 8000d60:	08007304 	.word	0x08007304
 8000d64:	0800730c 	.word	0x0800730c
 8000d68:	08007314 	.word	0x08007314
 8000d6c:	200000d0 	.word	0x200000d0
 8000d70:	20000000 	.word	0x20000000
 8000d74:	080072fc 	.word	0x080072fc

08000d78 <game_lcd>:

void game_lcd(){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f000 fae1 	bl	8001348 <lcd_Clear>
	lcd_Fill(0, 200, 239, 319, LGRAYBLUE);
 8000d86:	f24a 6351 	movw	r3, #42577	; 0xa651
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	f240 133f 	movw	r3, #319	; 0x13f
 8000d90:	22ef      	movs	r2, #239	; 0xef
 8000d92:	21c8      	movs	r1, #200	; 0xc8
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 fb09 	bl	80013ac <lcd_Fill>
	lcd_Fill(POS_X_LEFT, POS_Y_LEFT,
 8000d9a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	f240 133b 	movw	r3, #315	; 0x13b
 8000da4:	224b      	movs	r2, #75	; 0x4b
 8000da6:	f240 1109 	movw	r1, #265	; 0x109
 8000daa:	2005      	movs	r0, #5
 8000dac:	f000 fafe 	bl	80013ac <lcd_Fill>
			POS_X_LEFT + BTN_WIDTH, POS_Y_LEFT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_RIGHT, POS_Y_RIGHT,
 8000db0:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	f240 133b 	movw	r3, #315	; 0x13b
 8000dba:	22eb      	movs	r2, #235	; 0xeb
 8000dbc:	f240 1109 	movw	r1, #265	; 0x109
 8000dc0:	20a5      	movs	r0, #165	; 0xa5
 8000dc2:	f000 faf3 	bl	80013ac <lcd_Fill>
			POS_X_RIGHT + BTN_WIDTH, POS_Y_RIGHT + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_UP, POS_Y_UP,
 8000dc6:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	23ff      	movs	r3, #255	; 0xff
 8000dce:	229b      	movs	r2, #155	; 0x9b
 8000dd0:	21cd      	movs	r1, #205	; 0xcd
 8000dd2:	2055      	movs	r0, #85	; 0x55
 8000dd4:	f000 faea 	bl	80013ac <lcd_Fill>
			POS_X_UP + BTN_WIDTH, POS_Y_UP + BTN_HEIGHT, BROWN);
	lcd_Fill(POS_X_DOWN, POS_Y_DOWN,
 8000dd8:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	f240 133b 	movw	r3, #315	; 0x13b
 8000de2:	229b      	movs	r2, #155	; 0x9b
 8000de4:	f240 1109 	movw	r1, #265	; 0x109
 8000de8:	2055      	movs	r0, #85	; 0x55
 8000dea:	f000 fadf 	bl	80013ac <lcd_Fill>
			POS_X_DOWN + BTN_WIDTH, POS_Y_DOWN + BTN_HEIGHT, BROWN);
	lcd_DrawCircle(POS_X_PAUSE, POS_Y_PAUSE, RED, BTN_HEIGHT/2, 1);
 8000dee:	2301      	movs	r3, #1
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2319      	movs	r3, #25
 8000df4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000df8:	21e6      	movs	r1, #230	; 0xe6
 8000dfa:	20c8      	movs	r0, #200	; 0xc8
 8000dfc:	f000 ffad 	bl	8001d5a <lcd_DrawCircle>
	lcd_ShowStr(POS_X_PAUSE - 18, POS_Y_PAUSE - 8, "PAUSE", BLACK, BLACK, 16, 1);
 8000e00:	2301      	movs	r3, #1
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2310      	movs	r3, #16
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <game_lcd+0xc0>)
 8000e10:	21de      	movs	r1, #222	; 0xde
 8000e12:	20b6      	movs	r0, #182	; 0xb6
 8000e14:	f001 f80e 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_CURSCORE, POS_Y_CURSCORE, "SCORE:", BLACK, BLACK, 16, 1);
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	2300      	movs	r3, #0
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <game_lcd+0xc4>)
 8000e28:	21cd      	movs	r1, #205	; 0xcd
 8000e2a:	2005      	movs	r0, #5
 8000e2c:	f001 f802 	bl	8001e34 <lcd_ShowStr>
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800731c 	.word	0x0800731c
 8000e3c:	08007324 	.word	0x08007324

08000e40 <score_lcd>:

void score_lcd(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(POS_X_CURSCORE, POS_Y_CURSCORE + 16, current_score, 5, BLACK, LGRAYBLUE, 16);
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <score_lcd+0x2c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	f24a 6351 	movw	r3, #42577	; 0xa651
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	2300      	movs	r3, #0
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	21dd      	movs	r1, #221	; 0xdd
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f000 fc98 	bl	8001794 <lcd_ShowIntNum>
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000004 	.word	0x20000004

08000e70 <pause_lcd>:

void pause_lcd(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_pause);
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <pause_lcd+0x74>)
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e7e:	22f0      	movs	r2, #240	; 0xf0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 fd04 	bl	8001890 <lcd_ShowPicture>
	lcd_Fill(POS_X_SECOND, POS_Y_SECOND,
 8000e88:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	23b9      	movs	r3, #185	; 0xb9
 8000e90:	22b9      	movs	r2, #185	; 0xb9
 8000e92:	2196      	movs	r1, #150	; 0x96
 8000e94:	2041      	movs	r0, #65	; 0x41
 8000e96:	f000 fa89 	bl	80013ac <lcd_Fill>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BROWN);
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8000e9a:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	23eb      	movs	r3, #235	; 0xeb
 8000ea2:	22b9      	movs	r2, #185	; 0xb9
 8000ea4:	21c8      	movs	r1, #200	; 0xc8
 8000ea6:	2041      	movs	r0, #65	; 0x41
 8000ea8:	f000 fa80 	bl	80013ac <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_ShowStr(POS_X_SECOND + 25, POS_Y_SECOND + 5, "RESUME", BLACK, BLACK, 24, 1);
 8000eac:	2301      	movs	r3, #1
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2318      	movs	r3, #24
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <pause_lcd+0x78>)
 8000ebc:	219b      	movs	r1, #155	; 0x9b
 8000ebe:	205a      	movs	r0, #90	; 0x5a
 8000ec0:	f000 ffb8 	bl	8001e34 <lcd_ShowStr>
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2318      	movs	r3, #24
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4a06      	ldr	r2, [pc, #24]	; (8000eec <pause_lcd+0x7c>)
 8000ed4:	21cd      	movs	r1, #205	; 0xcd
 8000ed6:	2064      	movs	r0, #100	; 0x64
 8000ed8:	f000 ffac 	bl	8001e34 <lcd_ShowStr>
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	0807aabc 	.word	0x0807aabc
 8000ee8:	0800732c 	.word	0x0800732c
 8000eec:	080072fc 	.word	0x080072fc

08000ef0 <game_over_lcd>:

void game_over_lcd(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_gameover);
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <game_over_lcd+0x68>)
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000efe:	22f0      	movs	r2, #240	; 0xf0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 fcc4 	bl	8001890 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8000f08:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	23eb      	movs	r3, #235	; 0xeb
 8000f10:	22b9      	movs	r2, #185	; 0xb9
 8000f12:	21c8      	movs	r1, #200	; 0xc8
 8000f14:	2041      	movs	r0, #65	; 0x41
 8000f16:	f000 fa49 	bl	80013ac <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	23eb      	movs	r3, #235	; 0xeb
 8000f20:	22b9      	movs	r2, #185	; 0xb9
 8000f22:	21c8      	movs	r1, #200	; 0xc8
 8000f24:	2041      	movs	r0, #65	; 0x41
 8000f26:	f000 fb12 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	23ea      	movs	r3, #234	; 0xea
 8000f30:	22b8      	movs	r2, #184	; 0xb8
 8000f32:	21c9      	movs	r1, #201	; 0xc9
 8000f34:	2042      	movs	r0, #66	; 0x42
 8000f36:	f000 fb0a 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	2318      	movs	r3, #24
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <game_over_lcd+0x6c>)
 8000f4a:	21cd      	movs	r1, #205	; 0xcd
 8000f4c:	2064      	movs	r0, #100	; 0x64
 8000f4e:	f000 ff71 	bl	8001e34 <lcd_ShowStr>
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	080a02bc 	.word	0x080a02bc
 8000f5c:	080072fc 	.word	0x080072fc

08000f60 <youwin_lcd>:

void youwin_lcd(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af04      	add	r7, sp, #16
	lcd_ShowPicture(0, 0, 240, 320, gImage_youwin);
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <youwin_lcd+0x68>)
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f6e:	22f0      	movs	r2, #240	; 0xf0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 fc8c 	bl	8001890 <lcd_ShowPicture>
	lcd_Fill(POS_X_THIRD, POS_Y_THIRD,
 8000f78:	f64b 4340 	movw	r3, #48192	; 0xbc40
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	23eb      	movs	r3, #235	; 0xeb
 8000f80:	22b9      	movs	r2, #185	; 0xb9
 8000f82:	21c8      	movs	r1, #200	; 0xc8
 8000f84:	2041      	movs	r0, #65	; 0x41
 8000f86:	f000 fa11 	bl	80013ac <lcd_Fill>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BROWN);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	23eb      	movs	r3, #235	; 0xeb
 8000f90:	22b9      	movs	r2, #185	; 0xb9
 8000f92:	21c8      	movs	r1, #200	; 0xc8
 8000f94:	2041      	movs	r0, #65	; 0x41
 8000f96:	f000 fada 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	23ea      	movs	r3, #234	; 0xea
 8000fa0:	22b8      	movs	r2, #184	; 0xb8
 8000fa2:	21c9      	movs	r1, #201	; 0xc9
 8000fa4:	2042      	movs	r0, #66	; 0x42
 8000fa6:	f000 fad2 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
	lcd_ShowStr(POS_X_THIRD + 35, POS_Y_THIRD + 5, "QUIT", BLACK, BLACK, 24, 1);
 8000faa:	2301      	movs	r3, #1
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2318      	movs	r3, #24
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <youwin_lcd+0x6c>)
 8000fba:	21cd      	movs	r1, #205	; 0xcd
 8000fbc:	2064      	movs	r0, #100	; 0x64
 8000fbe:	f000 ff39 	bl	8001e34 <lcd_ShowStr>
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	080c5abc 	.word	0x080c5abc
 8000fcc:	080072fc 	.word	0x080072fc

08000fd0 <home_not_select>:

void home_not_select(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8000fd6:	f248 4330 	movw	r3, #33840	; 0x8430
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	23b9      	movs	r3, #185	; 0xb9
 8000fde:	22b9      	movs	r2, #185	; 0xb9
 8000fe0:	2196      	movs	r1, #150	; 0x96
 8000fe2:	2041      	movs	r0, #65	; 0x41
 8000fe4:	f000 fab3 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8000fe8:	f248 4330 	movw	r3, #33840	; 0x8430
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	23b8      	movs	r3, #184	; 0xb8
 8000ff0:	22b8      	movs	r2, #184	; 0xb8
 8000ff2:	2197      	movs	r1, #151	; 0x97
 8000ff4:	2042      	movs	r0, #66	; 0x42
 8000ff6:	f000 faaa 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8000ffa:	f248 4330 	movw	r3, #33840	; 0x8430
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	23eb      	movs	r3, #235	; 0xeb
 8001002:	22b9      	movs	r2, #185	; 0xb9
 8001004:	21c8      	movs	r1, #200	; 0xc8
 8001006:	2041      	movs	r0, #65	; 0x41
 8001008:	f000 faa1 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 800100c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	23ea      	movs	r3, #234	; 0xea
 8001014:	22b8      	movs	r2, #184	; 0xb8
 8001016:	21c9      	movs	r1, #201	; 0xc9
 8001018:	2042      	movs	r0, #66	; 0x42
 800101a:	f000 fa98 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 800101e:	f248 4330 	movw	r3, #33840	; 0x8430
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	f240 131d 	movw	r3, #285	; 0x11d
 8001028:	22b9      	movs	r2, #185	; 0xb9
 800102a:	21fa      	movs	r1, #250	; 0xfa
 800102c:	2041      	movs	r0, #65	; 0x41
 800102e:	f000 fa8e 	bl	800154e <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 8001032:	f248 4330 	movw	r3, #33840	; 0x8430
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800103c:	22b8      	movs	r2, #184	; 0xb8
 800103e:	21fb      	movs	r1, #251	; 0xfb
 8001040:	2042      	movs	r0, #66	; 0x42
 8001042:	f000 fa84 	bl	800154e <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, GRAY);
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <home_second_lcd>:

void home_second_lcd(){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af02      	add	r7, sp, #8
	home_not_select();
 8001052:	f7ff ffbd 	bl	8000fd0 <home_not_select>
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8001056:	2300      	movs	r3, #0
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	23b9      	movs	r3, #185	; 0xb9
 800105c:	22b9      	movs	r2, #185	; 0xb9
 800105e:	2196      	movs	r1, #150	; 0x96
 8001060:	2041      	movs	r0, #65	; 0x41
 8001062:	f000 fa74 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8001066:	2300      	movs	r3, #0
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	23b8      	movs	r3, #184	; 0xb8
 800106c:	22b8      	movs	r2, #184	; 0xb8
 800106e:	2197      	movs	r1, #151	; 0x97
 8001070:	2042      	movs	r0, #66	; 0x42
 8001072:	f000 fa6c 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <home_third_lcd>:

void home_third_lcd(){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af02      	add	r7, sp, #8
	home_not_select();
 8001082:	f7ff ffa5 	bl	8000fd0 <home_not_select>
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8001086:	2300      	movs	r3, #0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	23eb      	movs	r3, #235	; 0xeb
 800108c:	22b9      	movs	r2, #185	; 0xb9
 800108e:	21c8      	movs	r1, #200	; 0xc8
 8001090:	2041      	movs	r0, #65	; 0x41
 8001092:	f000 fa5c 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8001096:	2300      	movs	r3, #0
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	23ea      	movs	r3, #234	; 0xea
 800109c:	22b8      	movs	r2, #184	; 0xb8
 800109e:	21c9      	movs	r1, #201	; 0xc9
 80010a0:	2042      	movs	r0, #66	; 0x42
 80010a2:	f000 fa54 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <home_forth_lcd>:

void home_forth_lcd(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af02      	add	r7, sp, #8
	home_not_select();
 80010b2:	f7ff ff8d 	bl	8000fd0 <home_not_select>
	lcd_DrawRectangle(POS_X_FORTH, POS_Y_FORTH,
 80010b6:	2300      	movs	r3, #0
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f240 131d 	movw	r3, #285	; 0x11d
 80010be:	22b9      	movs	r2, #185	; 0xb9
 80010c0:	21fa      	movs	r1, #250	; 0xfa
 80010c2:	2041      	movs	r0, #65	; 0x41
 80010c4:	f000 fa43 	bl	800154e <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH, POS_Y_FORTH + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FORTH + 1, POS_Y_FORTH + 1,
 80010c8:	2300      	movs	r3, #0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80010d0:	22b8      	movs	r2, #184	; 0xb8
 80010d2:	21fb      	movs	r1, #251	; 0xfb
 80010d4:	2042      	movs	r0, #66	; 0x42
 80010d6:	f000 fa3a 	bl	800154e <lcd_DrawRectangle>
			POS_X_FORTH + WIDTH - 1, POS_Y_FORTH + HEIGHT - 1, BLACK);
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <mode_first_lcd>:

void mode_first_lcd(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 80010e6:	2300      	movs	r3, #0
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2387      	movs	r3, #135	; 0x87
 80010ec:	22b9      	movs	r2, #185	; 0xb9
 80010ee:	2164      	movs	r1, #100	; 0x64
 80010f0:	2041      	movs	r0, #65	; 0x41
 80010f2:	f000 fa2c 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 80010f6:	2300      	movs	r3, #0
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2386      	movs	r3, #134	; 0x86
 80010fc:	22b8      	movs	r2, #184	; 0xb8
 80010fe:	2165      	movs	r1, #101	; 0x65
 8001100:	2042      	movs	r0, #66	; 0x42
 8001102:	f000 fa24 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, BLACK);
	home_not_select();
 8001106:	f7ff ff63 	bl	8000fd0 <home_not_select>
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <mode_second_lcd>:

void mode_second_lcd(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 8001116:	f248 4330 	movw	r3, #33840	; 0x8430
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2387      	movs	r3, #135	; 0x87
 800111e:	22b9      	movs	r2, #185	; 0xb9
 8001120:	2164      	movs	r1, #100	; 0x64
 8001122:	2041      	movs	r0, #65	; 0x41
 8001124:	f000 fa13 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8001128:	f248 4330 	movw	r3, #33840	; 0x8430
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2386      	movs	r3, #134	; 0x86
 8001130:	22b8      	movs	r2, #184	; 0xb8
 8001132:	2165      	movs	r1, #101	; 0x65
 8001134:	2042      	movs	r0, #66	; 0x42
 8001136:	f000 fa0a 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_second_lcd();
 800113a:	f7ff ff87 	bl	800104c <home_second_lcd>
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <mode_third_lcd>:

void mode_third_lcd(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800114a:	f248 4330 	movw	r3, #33840	; 0x8430
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2387      	movs	r3, #135	; 0x87
 8001152:	22b9      	movs	r2, #185	; 0xb9
 8001154:	2164      	movs	r1, #100	; 0x64
 8001156:	2041      	movs	r0, #65	; 0x41
 8001158:	f000 f9f9 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 800115c:	f248 4330 	movw	r3, #33840	; 0x8430
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2386      	movs	r3, #134	; 0x86
 8001164:	22b8      	movs	r2, #184	; 0xb8
 8001166:	2165      	movs	r1, #101	; 0x65
 8001168:	2042      	movs	r0, #66	; 0x42
 800116a:	f000 f9f0 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_third_lcd();
 800116e:	f7ff ff85 	bl	800107c <home_third_lcd>
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <mode_forth_lcd>:

void mode_forth_lcd(){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_FIRST, POS_Y_FIRST,
 800117e:	f248 4330 	movw	r3, #33840	; 0x8430
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2387      	movs	r3, #135	; 0x87
 8001186:	22b9      	movs	r2, #185	; 0xb9
 8001188:	2164      	movs	r1, #100	; 0x64
 800118a:	2041      	movs	r0, #65	; 0x41
 800118c:	f000 f9df 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH, POS_Y_FIRST + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_FIRST + 1, POS_Y_FIRST + 1,
 8001190:	f248 4330 	movw	r3, #33840	; 0x8430
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2386      	movs	r3, #134	; 0x86
 8001198:	22b8      	movs	r2, #184	; 0xb8
 800119a:	2165      	movs	r1, #101	; 0x65
 800119c:	2042      	movs	r0, #66	; 0x42
 800119e:	f000 f9d6 	bl	800154e <lcd_DrawRectangle>
			POS_X_FIRST + WIDTH - 1, POS_Y_FIRST + HEIGHT - 1, GRAY);
	home_forth_lcd();
 80011a2:	f7ff ff83 	bl	80010ac <home_forth_lcd>
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <pause_second_lcd>:

void pause_second_lcd(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 80011b2:	2300      	movs	r3, #0
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	23b9      	movs	r3, #185	; 0xb9
 80011b8:	22b9      	movs	r2, #185	; 0xb9
 80011ba:	2196      	movs	r1, #150	; 0x96
 80011bc:	2041      	movs	r0, #65	; 0x41
 80011be:	f000 f9c6 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 80011c2:	2300      	movs	r3, #0
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	23b8      	movs	r3, #184	; 0xb8
 80011c8:	22b8      	movs	r2, #184	; 0xb8
 80011ca:	2197      	movs	r1, #151	; 0x97
 80011cc:	2042      	movs	r0, #66	; 0x42
 80011ce:	f000 f9be 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, BLACK);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 80011d2:	f248 4330 	movw	r3, #33840	; 0x8430
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	23eb      	movs	r3, #235	; 0xeb
 80011da:	22b9      	movs	r2, #185	; 0xb9
 80011dc:	21c8      	movs	r1, #200	; 0xc8
 80011de:	2041      	movs	r0, #65	; 0x41
 80011e0:	f000 f9b5 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 80011e4:	f248 4330 	movw	r3, #33840	; 0x8430
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	23ea      	movs	r3, #234	; 0xea
 80011ec:	22b8      	movs	r2, #184	; 0xb8
 80011ee:	21c9      	movs	r1, #201	; 0xc9
 80011f0:	2042      	movs	r0, #66	; 0x42
 80011f2:	f000 f9ac 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, GRAY);
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <pause_third_lcd>:

void pause_third_lcd(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(POS_X_SECOND, POS_Y_SECOND,
 8001202:	f248 4330 	movw	r3, #33840	; 0x8430
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	23b9      	movs	r3, #185	; 0xb9
 800120a:	22b9      	movs	r2, #185	; 0xb9
 800120c:	2196      	movs	r1, #150	; 0x96
 800120e:	2041      	movs	r0, #65	; 0x41
 8001210:	f000 f99d 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH, POS_Y_SECOND + HEIGHT, GRAY);
	lcd_DrawRectangle(POS_X_SECOND + 1, POS_Y_SECOND + 1,
 8001214:	f248 4330 	movw	r3, #33840	; 0x8430
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	23b8      	movs	r3, #184	; 0xb8
 800121c:	22b8      	movs	r2, #184	; 0xb8
 800121e:	2197      	movs	r1, #151	; 0x97
 8001220:	2042      	movs	r0, #66	; 0x42
 8001222:	f000 f994 	bl	800154e <lcd_DrawRectangle>
			POS_X_SECOND + WIDTH - 1, POS_Y_SECOND + HEIGHT - 1, GRAY);
	lcd_DrawRectangle(POS_X_THIRD, POS_Y_THIRD,
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	23eb      	movs	r3, #235	; 0xeb
 800122c:	22b9      	movs	r2, #185	; 0xb9
 800122e:	21c8      	movs	r1, #200	; 0xc8
 8001230:	2041      	movs	r0, #65	; 0x41
 8001232:	f000 f98c 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH, POS_Y_THIRD + HEIGHT, BLACK);
	lcd_DrawRectangle(POS_X_THIRD + 1, POS_Y_THIRD + 1,
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	23ea      	movs	r3, #234	; 0xea
 800123c:	22b8      	movs	r2, #184	; 0xb8
 800123e:	21c9      	movs	r1, #201	; 0xc9
 8001240:	2042      	movs	r0, #66	; 0x42
 8001242:	f000 f984 	bl	800154e <lcd_DrawRectangle>
			POS_X_THIRD + WIDTH - 1, POS_Y_THIRD + HEIGHT - 1, BLACK);
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <LCD_WR_REG+0x1c>)
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	8013      	strh	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	600ffffe 	.word	0x600ffffe

0800126c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <LCD_WR_DATA+0x1c>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	8053      	strh	r3, [r2, #2]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	600ffffe 	.word	0x600ffffe

0800128c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <LCD_RD_DATA+0x20>)
 8001294:	885b      	ldrh	r3, [r3, #2]
 8001296:	b29b      	uxth	r3, r3
 8001298:	80fb      	strh	r3, [r7, #6]
	return ram;
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	b29b      	uxth	r3, r3
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	600ffffe 	.word	0x600ffffe

080012b0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4604      	mov	r4, r0
 80012b8:	4608      	mov	r0, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4623      	mov	r3, r4
 80012c0:	80fb      	strh	r3, [r7, #6]
 80012c2:	4603      	mov	r3, r0
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]
 80012ca:	4613      	mov	r3, r2
 80012cc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80012ce:	202a      	movs	r0, #42	; 0x2a
 80012d0:	f7ff ffbc 	bl	800124c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ffc6 	bl	800126c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffc0 	bl	800126c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ffba 	bl	800126c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffb4 	bl	800126c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001304:	202b      	movs	r0, #43	; 0x2b
 8001306:	f7ff ffa1 	bl	800124c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ffab 	bl	800126c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	b29b      	uxth	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ffa5 	bl	800126c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001322:	883b      	ldrh	r3, [r7, #0]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff9f 	bl	800126c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800132e:	883b      	ldrh	r3, [r7, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	b29b      	uxth	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff99 	bl	800126c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800133a:	202c      	movs	r0, #44	; 0x2c
 800133c:	f7ff ff86 	bl	800124c <LCD_WR_REG>
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}

08001348 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <lcd_Clear+0x60>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	3b01      	subs	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <lcd_Clear+0x60>)
 800135c:	885b      	ldrh	r3, [r3, #2]
 800135e:	3b01      	subs	r3, #1
 8001360:	b29b      	uxth	r3, r3
 8001362:	2100      	movs	r1, #0
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ffa3 	bl	80012b0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800136a:	2300      	movs	r3, #0
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	e011      	b.n	8001394 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001370:	2300      	movs	r3, #0
 8001372:	81bb      	strh	r3, [r7, #12]
 8001374:	e006      	b.n	8001384 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff77 	bl	800126c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800137e:	89bb      	ldrh	r3, [r7, #12]
 8001380:	3301      	adds	r3, #1
 8001382:	81bb      	strh	r3, [r7, #12]
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <lcd_Clear+0x60>)
 8001386:	885b      	ldrh	r3, [r3, #2]
 8001388:	89ba      	ldrh	r2, [r7, #12]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3f3      	bcc.n	8001376 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	3301      	adds	r3, #1
 8001392:	81fb      	strh	r3, [r7, #14]
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <lcd_Clear+0x60>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	89fa      	ldrh	r2, [r7, #14]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3e8      	bcc.n	8001370 <lcd_Clear+0x28>
		}
	}
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200004c0 	.word	0x200004c0

080013ac <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4604      	mov	r4, r0
 80013b4:	4608      	mov	r0, r1
 80013b6:	4611      	mov	r1, r2
 80013b8:	461a      	mov	r2, r3
 80013ba:	4623      	mov	r3, r4
 80013bc:	80fb      	strh	r3, [r7, #6]
 80013be:	4603      	mov	r3, r0
 80013c0:	80bb      	strh	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]
 80013c6:	4613      	mov	r3, r2
 80013c8:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	883b      	ldrh	r3, [r7, #0]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	88b9      	ldrh	r1, [r7, #4]
 80013d8:	88f8      	ldrh	r0, [r7, #6]
 80013da:	f7ff ff69 	bl	80012b0 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80013de:	88bb      	ldrh	r3, [r7, #4]
 80013e0:	81fb      	strh	r3, [r7, #14]
 80013e2:	e010      	b.n	8001406 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	81bb      	strh	r3, [r7, #12]
 80013e8:	e006      	b.n	80013f8 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80013ea:	8c3b      	ldrh	r3, [r7, #32]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff3d 	bl	800126c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80013f2:	89bb      	ldrh	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	81bb      	strh	r3, [r7, #12]
 80013f8:	89ba      	ldrh	r2, [r7, #12]
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3f4      	bcc.n	80013ea <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	3301      	adds	r3, #1
 8001404:	81fb      	strh	r3, [r7, #14]
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	883b      	ldrh	r3, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d3ea      	bcc.n	80013e4 <lcd_Fill+0x38>
		}
	}
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}

08001418 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
 8001422:	460b      	mov	r3, r1
 8001424:	80bb      	strh	r3, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800142a:	88bb      	ldrh	r3, [r7, #4]
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	88b9      	ldrh	r1, [r7, #4]
 8001430:	88f8      	ldrh	r0, [r7, #6]
 8001432:	f7ff ff3d 	bl	80012b0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff17 	bl	800126c <LCD_WR_DATA>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001446:	b590      	push	{r4, r7, lr}
 8001448:	b08d      	sub	sp, #52	; 0x34
 800144a:	af00      	add	r7, sp, #0
 800144c:	4604      	mov	r4, r0
 800144e:	4608      	mov	r0, r1
 8001450:	4611      	mov	r1, r2
 8001452:	461a      	mov	r2, r3
 8001454:	4623      	mov	r3, r4
 8001456:	80fb      	strh	r3, [r7, #6]
 8001458:	4603      	mov	r3, r0
 800145a:	80bb      	strh	r3, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 800146c:	887a      	ldrh	r2, [r7, #2]
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001474:	883a      	ldrh	r2, [r7, #0]
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b00      	cmp	r3, #0
 8001488:	dd02      	ble.n	8001490 <lcd_DrawLine+0x4a>
 800148a:	2301      	movs	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	e00b      	b.n	80014a8 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <lcd_DrawLine+0x56>
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e005      	b.n	80014a8 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	425b      	negs	r3, r3
 80014a6:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dd02      	ble.n	80014b4 <lcd_DrawLine+0x6e>
 80014ae:	2301      	movs	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	e00b      	b.n	80014cc <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <lcd_DrawLine+0x7a>
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	e005      	b.n	80014cc <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	425b      	negs	r3, r3
 80014ca:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dd02      	ble.n	80014da <lcd_DrawLine+0x94>
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	e001      	b.n	80014de <lcd_DrawLine+0x98>
	else distance=delta_y;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 80014de:	2300      	movs	r3, #0
 80014e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80014e2:	e02b      	b.n	800153c <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	b291      	uxth	r1, r2
 80014ec:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff91 	bl	8001418 <lcd_DrawPoint>
		xerr+=delta_x;
 80014f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	4413      	add	r3, r2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 80014fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	429a      	cmp	r2, r3
 800150c:	dd07      	ble.n	800151e <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800150e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800151e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	429a      	cmp	r2, r3
 8001524:	dd07      	ble.n	8001536 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4413      	add	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001538:	3301      	adds	r3, #1
 800153a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800153c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	429a      	cmp	r2, r3
 8001542:	dacf      	bge.n	80014e4 <lcd_DrawLine+0x9e>
		}
	}
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3734      	adds	r7, #52	; 0x34
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}

0800154e <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 800154e:	b590      	push	{r4, r7, lr}
 8001550:	b085      	sub	sp, #20
 8001552:	af02      	add	r7, sp, #8
 8001554:	4604      	mov	r4, r0
 8001556:	4608      	mov	r0, r1
 8001558:	4611      	mov	r1, r2
 800155a:	461a      	mov	r2, r3
 800155c:	4623      	mov	r3, r4
 800155e:	80fb      	strh	r3, [r7, #6]
 8001560:	4603      	mov	r3, r0
 8001562:	80bb      	strh	r3, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 800156c:	88bc      	ldrh	r4, [r7, #4]
 800156e:	887a      	ldrh	r2, [r7, #2]
 8001570:	88b9      	ldrh	r1, [r7, #4]
 8001572:	88f8      	ldrh	r0, [r7, #6]
 8001574:	8b3b      	ldrh	r3, [r7, #24]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	4623      	mov	r3, r4
 800157a:	f7ff ff64 	bl	8001446 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 800157e:	883c      	ldrh	r4, [r7, #0]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	88b9      	ldrh	r1, [r7, #4]
 8001584:	88f8      	ldrh	r0, [r7, #6]
 8001586:	8b3b      	ldrh	r3, [r7, #24]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	4623      	mov	r3, r4
 800158c:	f7ff ff5b 	bl	8001446 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001590:	883c      	ldrh	r4, [r7, #0]
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	8839      	ldrh	r1, [r7, #0]
 8001596:	88f8      	ldrh	r0, [r7, #6]
 8001598:	8b3b      	ldrh	r3, [r7, #24]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4623      	mov	r3, r4
 800159e:	f7ff ff52 	bl	8001446 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 80015a2:	883c      	ldrh	r4, [r7, #0]
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	88b9      	ldrh	r1, [r7, #4]
 80015a8:	8878      	ldrh	r0, [r7, #2]
 80015aa:	8b3b      	ldrh	r3, [r7, #24]
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4623      	mov	r3, r4
 80015b0:	f7ff ff49 	bl	8001446 <lcd_DrawLine>
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4604      	mov	r4, r0
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4623      	mov	r3, r4
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4603      	mov	r3, r0
 80015d0:	80bb      	strh	r3, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
 80015d6:	4613      	mov	r3, r2
 80015d8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80015da:	2300      	movs	r3, #0
 80015dc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80015e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf14      	ite	ne
 80015fe:	2301      	movne	r3, #1
 8001600:	2300      	moveq	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b29a      	uxth	r2, r3
 8001608:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800160c:	b29b      	uxth	r3, r3
 800160e:	fb12 f303 	smulbb	r3, r2, r3
 8001612:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	3b20      	subs	r3, #32
 8001618:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	b29a      	uxth	r2, r3
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	4413      	add	r3, r2
 8001622:	b29b      	uxth	r3, r3
 8001624:	3b01      	subs	r3, #1
 8001626:	b29c      	uxth	r4, r3
 8001628:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800162c:	b29a      	uxth	r2, r3
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	b29b      	uxth	r3, r3
 8001634:	3b01      	subs	r3, #1
 8001636:	b29b      	uxth	r3, r3
 8001638:	88b9      	ldrh	r1, [r7, #4]
 800163a:	88f8      	ldrh	r0, [r7, #6]
 800163c:	4622      	mov	r2, r4
 800163e:	f7ff fe37 	bl	80012b0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001642:	2300      	movs	r3, #0
 8001644:	827b      	strh	r3, [r7, #18]
 8001646:	e07a      	b.n	800173e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001648:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d028      	beq.n	80016a2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001650:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001654:	2b10      	cmp	r3, #16
 8001656:	d108      	bne.n	800166a <lcd_ShowChar+0xae>
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	8a7b      	ldrh	r3, [r7, #18]
 800165c:	493c      	ldr	r1, [pc, #240]	; (8001750 <lcd_ShowChar+0x194>)
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	440a      	add	r2, r1
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	75fb      	strb	r3, [r7, #23]
 8001668:	e01b      	b.n	80016a2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800166a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800166e:	2b18      	cmp	r3, #24
 8001670:	d10b      	bne.n	800168a <lcd_ShowChar+0xce>
 8001672:	78fa      	ldrb	r2, [r7, #3]
 8001674:	8a79      	ldrh	r1, [r7, #18]
 8001676:	4837      	ldr	r0, [pc, #220]	; (8001754 <lcd_ShowChar+0x198>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4403      	add	r3, r0
 8001682:	440b      	add	r3, r1
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	75fb      	strb	r3, [r7, #23]
 8001688:	e00b      	b.n	80016a2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800168a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800168e:	2b20      	cmp	r3, #32
 8001690:	d15a      	bne.n	8001748 <lcd_ShowChar+0x18c>
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	8a7b      	ldrh	r3, [r7, #18]
 8001696:	4930      	ldr	r1, [pc, #192]	; (8001758 <lcd_ShowChar+0x19c>)
 8001698:	0192      	lsls	r2, r2, #6
 800169a:	440a      	add	r2, r1
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	75bb      	strb	r3, [r7, #22]
 80016a6:	e044      	b.n	8001732 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80016a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d120      	bne.n	80016f2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80016b0:	7dfa      	ldrb	r2, [r7, #23]
 80016b2:	7dbb      	ldrb	r3, [r7, #22]
 80016b4:	fa42 f303 	asr.w	r3, r2, r3
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <lcd_ShowChar+0x10e>
 80016c0:	883b      	ldrh	r3, [r7, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fdd2 	bl	800126c <LCD_WR_DATA>
 80016c8:	e003      	b.n	80016d2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80016ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fdcd 	bl	800126c <LCD_WR_DATA>
				m++;
 80016d2:	7d7b      	ldrb	r3, [r7, #21]
 80016d4:	3301      	adds	r3, #1
 80016d6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80016d8:	7d7b      	ldrb	r3, [r7, #21]
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80016e0:	fb01 f202 	mul.w	r2, r1, r2
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11f      	bne.n	800172c <lcd_ShowChar+0x170>
				{
					m=0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	757b      	strb	r3, [r7, #21]
					break;
 80016f0:	e022      	b.n	8001738 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80016f2:	7dfa      	ldrb	r2, [r7, #23]
 80016f4:	7dbb      	ldrb	r3, [r7, #22]
 80016f6:	fa42 f303 	asr.w	r3, r2, r3
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <lcd_ShowChar+0x152>
 8001702:	883a      	ldrh	r2, [r7, #0]
 8001704:	88b9      	ldrh	r1, [r7, #4]
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fe85 	bl	8001418 <lcd_DrawPoint>
				x++;
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	3301      	adds	r3, #1
 8001712:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001714:	88fa      	ldrh	r2, [r7, #6]
 8001716:	8a3b      	ldrh	r3, [r7, #16]
 8001718:	1ad2      	subs	r2, r2, r3
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	429a      	cmp	r2, r3
 800171e:	d105      	bne.n	800172c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001720:	8a3b      	ldrh	r3, [r7, #16]
 8001722:	80fb      	strh	r3, [r7, #6]
					y++;
 8001724:	88bb      	ldrh	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	80bb      	strh	r3, [r7, #4]
					break;
 800172a:	e005      	b.n	8001738 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800172c:	7dbb      	ldrb	r3, [r7, #22]
 800172e:	3301      	adds	r3, #1
 8001730:	75bb      	strb	r3, [r7, #22]
 8001732:	7dbb      	ldrb	r3, [r7, #22]
 8001734:	2b07      	cmp	r3, #7
 8001736:	d9b7      	bls.n	80016a8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001738:	8a7b      	ldrh	r3, [r7, #18]
 800173a:	3301      	adds	r3, #1
 800173c:	827b      	strh	r3, [r7, #18]
 800173e:	8a7a      	ldrh	r2, [r7, #18]
 8001740:	89bb      	ldrh	r3, [r7, #12]
 8001742:	429a      	cmp	r2, r3
 8001744:	d380      	bcc.n	8001648 <lcd_ShowChar+0x8c>
 8001746:	e000      	b.n	800174a <lcd_ShowChar+0x18e>
		else return;
 8001748:	bf00      	nop
				}
			}
		}
	}
}
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}
 8001750:	0800733c 	.word	0x0800733c
 8001754:	0800792c 	.word	0x0800792c
 8001758:	08008afc 	.word	0x08008afc

0800175c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	460a      	mov	r2, r1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4613      	mov	r3, r2
 800176a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800176c:	2301      	movs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001770:	e004      	b.n	800177c <mypow+0x20>
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	71ba      	strb	r2, [r7, #6]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f5      	bne.n	8001772 <mypow+0x16>
	return result;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af04      	add	r7, sp, #16
 800179a:	4604      	mov	r4, r0
 800179c:	4608      	mov	r0, r1
 800179e:	4611      	mov	r1, r2
 80017a0:	461a      	mov	r2, r3
 80017a2:	4623      	mov	r3, r4
 80017a4:	80fb      	strh	r3, [r7, #6]
 80017a6:	4603      	mov	r3, r0
 80017a8:	80bb      	strh	r3, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]
 80017ae:	4613      	mov	r3, r2
 80017b0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80017b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80017be:	2300      	movs	r3, #0
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	e059      	b.n	8001878 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80017c4:	887c      	ldrh	r4, [r7, #2]
 80017c6:	787a      	ldrb	r2, [r7, #1]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	200a      	movs	r0, #10
 80017d6:	f7ff ffc1 	bl	800175c <mypow>
 80017da:	4603      	mov	r3, r0
 80017dc:	fbb4 f1f3 	udiv	r1, r4, r3
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <lcd_ShowIntNum+0xf8>)
 80017e2:	fba3 2301 	umull	r2, r3, r3, r1
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	1aca      	subs	r2, r1, r3
 80017f2:	4613      	mov	r3, r2
 80017f4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d121      	bne.n	8001840 <lcd_ShowIntNum+0xac>
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	787b      	ldrb	r3, [r7, #1]
 8001800:	3b01      	subs	r3, #1
 8001802:	429a      	cmp	r2, r3
 8001804:	da1c      	bge.n	8001840 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001806:	7b3b      	ldrb	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d117      	bne.n	800183c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	b29a      	uxth	r2, r3
 8001810:	7b7b      	ldrb	r3, [r7, #13]
 8001812:	b29b      	uxth	r3, r3
 8001814:	fb12 f303 	smulbb	r3, r2, r3
 8001818:	b29a      	uxth	r2, r3
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4413      	add	r3, r2
 800181e:	b298      	uxth	r0, r3
 8001820:	8c3a      	ldrh	r2, [r7, #32]
 8001822:	88b9      	ldrh	r1, [r7, #4]
 8001824:	2300      	movs	r3, #0
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4613      	mov	r3, r2
 8001834:	2220      	movs	r2, #32
 8001836:	f7ff fec1 	bl	80015bc <lcd_ShowChar>
				continue;
 800183a:	e01a      	b.n	8001872 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 800183c:	2301      	movs	r3, #1
 800183e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	b29a      	uxth	r2, r3
 8001844:	7b7b      	ldrb	r3, [r7, #13]
 8001846:	b29b      	uxth	r3, r3
 8001848:	fb12 f303 	smulbb	r3, r2, r3
 800184c:	b29a      	uxth	r2, r3
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4413      	add	r3, r2
 8001852:	b298      	uxth	r0, r3
 8001854:	7b3b      	ldrb	r3, [r7, #12]
 8001856:	3330      	adds	r3, #48	; 0x30
 8001858:	b2da      	uxtb	r2, r3
 800185a:	8c3c      	ldrh	r4, [r7, #32]
 800185c:	88b9      	ldrh	r1, [r7, #4]
 800185e:	2300      	movs	r3, #0
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4623      	mov	r3, r4
 800186e:	f7ff fea5 	bl	80015bc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	3301      	adds	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	787b      	ldrb	r3, [r7, #1]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3a1      	bcc.n	80017c4 <lcd_ShowIntNum+0x30>
	}
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	cccccccd 	.word	0xcccccccd

08001890 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	4604      	mov	r4, r0
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4623      	mov	r3, r4
 80018a0:	80fb      	strh	r3, [r7, #6]
 80018a2:	4603      	mov	r3, r0
 80018a4:	80bb      	strh	r3, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	807b      	strh	r3, [r7, #2]
 80018aa:	4613      	mov	r3, r2
 80018ac:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4413      	add	r3, r2
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29c      	uxth	r4, r3
 80018be:	88ba      	ldrh	r2, [r7, #4]
 80018c0:	883b      	ldrh	r3, [r7, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	88b9      	ldrh	r1, [r7, #4]
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	4622      	mov	r2, r4
 80018d0:	f7ff fcee 	bl	80012b0 <lcd_AddressSet>
	for(i=0;i<length;i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	82fb      	strh	r3, [r7, #22]
 80018d8:	e027      	b.n	800192a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 80018da:	2300      	movs	r3, #0
 80018dc:	82bb      	strh	r3, [r7, #20]
 80018de:	e01d      	b.n	800191c <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	3301      	adds	r3, #1
 80018f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	7bbb      	ldrb	r3, [r7, #14]
 8001902:	b21b      	sxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b21b      	sxth	r3, r3
 8001908:	b29b      	uxth	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fcae 	bl	800126c <LCD_WR_DATA>
			k++;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	3301      	adds	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001916:	8abb      	ldrh	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	82bb      	strh	r3, [r7, #20]
 800191c:	8aba      	ldrh	r2, [r7, #20]
 800191e:	883b      	ldrh	r3, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d3dd      	bcc.n	80018e0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001924:	8afb      	ldrh	r3, [r7, #22]
 8001926:	3301      	adds	r3, #1
 8001928:	82fb      	strh	r3, [r7, #22]
 800192a:	8afa      	ldrh	r2, [r7, #22]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	429a      	cmp	r2, r3
 8001930:	d3d3      	bcc.n	80018da <lcd_ShowPicture+0x4a>
		}
	}
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <lcd_SetDir+0x44>)
 8001958:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800195c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <lcd_SetDir+0x44>)
 8001960:	22f0      	movs	r2, #240	; 0xf0
 8001962:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001964:	e006      	b.n	8001974 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <lcd_SetDir+0x44>)
 8001968:	22f0      	movs	r2, #240	; 0xf0
 800196a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <lcd_SetDir+0x44>)
 800196e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001972:	805a      	strh	r2, [r3, #2]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	200004c0 	.word	0x200004c0

08001984 <lcd_init>:


void lcd_init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198e:	48aa      	ldr	r0, [pc, #680]	; (8001c38 <lcd_init+0x2b4>)
 8001990:	f002 faa8 	bl	8003ee4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001994:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001998:	f001 f9f4 	bl	8002d84 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a2:	48a5      	ldr	r0, [pc, #660]	; (8001c38 <lcd_init+0x2b4>)
 80019a4:	f002 fa9e 	bl	8003ee4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80019a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ac:	f001 f9ea 	bl	8002d84 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff ffc3 	bl	800193c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80019b6:	20d3      	movs	r0, #211	; 0xd3
 80019b8:	f7ff fc48 	bl	800124c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80019bc:	f7ff fc66 	bl	800128c <LCD_RD_DATA>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <lcd_init+0x2b8>)
 80019c6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80019c8:	f7ff fc60 	bl	800128c <LCD_RD_DATA>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b9a      	ldr	r3, [pc, #616]	; (8001c3c <lcd_init+0x2b8>)
 80019d2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80019d4:	f7ff fc5a 	bl	800128c <LCD_RD_DATA>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b97      	ldr	r3, [pc, #604]	; (8001c3c <lcd_init+0x2b8>)
 80019de:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80019e0:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <lcd_init+0x2b8>)
 80019e2:	889b      	ldrh	r3, [r3, #4]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b94      	ldr	r3, [pc, #592]	; (8001c3c <lcd_init+0x2b8>)
 80019ea:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80019ec:	f7ff fc4e 	bl	800128c <LCD_RD_DATA>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b91      	ldr	r3, [pc, #580]	; (8001c3c <lcd_init+0x2b8>)
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <lcd_init+0x2b8>)
 80019fe:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001a00:	20cf      	movs	r0, #207	; 0xcf
 8001a02:	f7ff fc23 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fc30 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001a0c:	20c1      	movs	r0, #193	; 0xc1
 8001a0e:	f7ff fc2d 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001a12:	2030      	movs	r0, #48	; 0x30
 8001a14:	f7ff fc2a 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001a18:	20ed      	movs	r0, #237	; 0xed
 8001a1a:	f7ff fc17 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001a1e:	2064      	movs	r0, #100	; 0x64
 8001a20:	f7ff fc24 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f7ff fc21 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001a2a:	2012      	movs	r0, #18
 8001a2c:	f7ff fc1e 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001a30:	2081      	movs	r0, #129	; 0x81
 8001a32:	f7ff fc1b 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001a36:	20e8      	movs	r0, #232	; 0xe8
 8001a38:	f7ff fc08 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001a3c:	2085      	movs	r0, #133	; 0x85
 8001a3e:	f7ff fc15 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001a42:	2010      	movs	r0, #16
 8001a44:	f7ff fc12 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001a48:	207a      	movs	r0, #122	; 0x7a
 8001a4a:	f7ff fc0f 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001a4e:	20cb      	movs	r0, #203	; 0xcb
 8001a50:	f7ff fbfc 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001a54:	2039      	movs	r0, #57	; 0x39
 8001a56:	f7ff fc09 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001a5a:	202c      	movs	r0, #44	; 0x2c
 8001a5c:	f7ff fc06 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fc03 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001a66:	2034      	movs	r0, #52	; 0x34
 8001a68:	f7ff fc00 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7ff fbfd 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001a72:	20f7      	movs	r0, #247	; 0xf7
 8001a74:	f7ff fbea 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001a78:	2020      	movs	r0, #32
 8001a7a:	f7ff fbf7 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001a7e:	20ea      	movs	r0, #234	; 0xea
 8001a80:	f7ff fbe4 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fbf1 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fbee 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001a90:	20c0      	movs	r0, #192	; 0xc0
 8001a92:	f7ff fbdb 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001a96:	201b      	movs	r0, #27
 8001a98:	f7ff fbe8 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001a9c:	20c1      	movs	r0, #193	; 0xc1
 8001a9e:	f7ff fbd5 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7ff fbe2 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001aa8:	20c5      	movs	r0, #197	; 0xc5
 8001aaa:	f7ff fbcf 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001aae:	2030      	movs	r0, #48	; 0x30
 8001ab0:	f7ff fbdc 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001ab4:	2030      	movs	r0, #48	; 0x30
 8001ab6:	f7ff fbd9 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001aba:	20c7      	movs	r0, #199	; 0xc7
 8001abc:	f7ff fbc6 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001ac0:	20b7      	movs	r0, #183	; 0xb7
 8001ac2:	f7ff fbd3 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001ac6:	2036      	movs	r0, #54	; 0x36
 8001ac8:	f7ff fbc0 	bl	800124c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001acc:	2008      	movs	r0, #8
 8001ace:	f7ff fbcd 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001ad2:	203a      	movs	r0, #58	; 0x3a
 8001ad4:	f7ff fbba 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001ad8:	2055      	movs	r0, #85	; 0x55
 8001ada:	f7ff fbc7 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001ade:	20b1      	movs	r0, #177	; 0xb1
 8001ae0:	f7ff fbb4 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff fbc1 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001aea:	201a      	movs	r0, #26
 8001aec:	f7ff fbbe 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001af0:	20b6      	movs	r0, #182	; 0xb6
 8001af2:	f7ff fbab 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001af6:	200a      	movs	r0, #10
 8001af8:	f7ff fbb8 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001afc:	20a2      	movs	r0, #162	; 0xa2
 8001afe:	f7ff fbb5 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001b02:	20f2      	movs	r0, #242	; 0xf2
 8001b04:	f7ff fba2 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fbaf 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001b0e:	2026      	movs	r0, #38	; 0x26
 8001b10:	f7ff fb9c 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff fba9 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001b1a:	20e0      	movs	r0, #224	; 0xe0
 8001b1c:	f7ff fb96 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001b20:	200f      	movs	r0, #15
 8001b22:	f7ff fba3 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001b26:	202a      	movs	r0, #42	; 0x2a
 8001b28:	f7ff fba0 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001b2c:	2028      	movs	r0, #40	; 0x28
 8001b2e:	f7ff fb9d 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001b32:	2008      	movs	r0, #8
 8001b34:	f7ff fb9a 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001b38:	200e      	movs	r0, #14
 8001b3a:	f7ff fb97 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001b3e:	2008      	movs	r0, #8
 8001b40:	f7ff fb94 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001b44:	2054      	movs	r0, #84	; 0x54
 8001b46:	f7ff fb91 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001b4a:	20a9      	movs	r0, #169	; 0xa9
 8001b4c:	f7ff fb8e 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001b50:	2043      	movs	r0, #67	; 0x43
 8001b52:	f7ff fb8b 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001b56:	200a      	movs	r0, #10
 8001b58:	f7ff fb88 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001b5c:	200f      	movs	r0, #15
 8001b5e:	f7ff fb85 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fb82 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fb7f 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fb7c 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fb79 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001b7a:	20e1      	movs	r0, #225	; 0xe1
 8001b7c:	f7ff fb66 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fb73 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001b86:	2015      	movs	r0, #21
 8001b88:	f7ff fb70 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001b8c:	2017      	movs	r0, #23
 8001b8e:	f7ff fb6d 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001b92:	2007      	movs	r0, #7
 8001b94:	f7ff fb6a 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001b98:	2011      	movs	r0, #17
 8001b9a:	f7ff fb67 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001b9e:	2006      	movs	r0, #6
 8001ba0:	f7ff fb64 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001ba4:	202b      	movs	r0, #43	; 0x2b
 8001ba6:	f7ff fb61 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001baa:	2056      	movs	r0, #86	; 0x56
 8001bac:	f7ff fb5e 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001bb0:	203c      	movs	r0, #60	; 0x3c
 8001bb2:	f7ff fb5b 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f7ff fb58 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001bbc:	2010      	movs	r0, #16
 8001bbe:	f7ff fb55 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f7ff fb52 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001bc8:	203f      	movs	r0, #63	; 0x3f
 8001bca:	f7ff fb4f 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001bce:	203f      	movs	r0, #63	; 0x3f
 8001bd0:	f7ff fb4c 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	f7ff fb49 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001bda:	202b      	movs	r0, #43	; 0x2b
 8001bdc:	f7ff fb36 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fb43 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fb40 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff fb3d 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001bf2:	203f      	movs	r0, #63	; 0x3f
 8001bf4:	f7ff fb3a 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001bf8:	202a      	movs	r0, #42	; 0x2a
 8001bfa:	f7ff fb27 	bl	800124c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fb34 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff fb31 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fb2e 	bl	800126c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001c10:	20ef      	movs	r0, #239	; 0xef
 8001c12:	f7ff fb2b 	bl	800126c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001c16:	2011      	movs	r0, #17
 8001c18:	f7ff fb18 	bl	800124c <LCD_WR_REG>
	HAL_Delay(120);
 8001c1c:	2078      	movs	r0, #120	; 0x78
 8001c1e:	f001 f8b1 	bl	8002d84 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001c22:	2029      	movs	r0, #41	; 0x29
 8001c24:	f7ff fb12 	bl	800124c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <lcd_init+0x2bc>)
 8001c30:	f002 f958 	bl	8003ee4 <HAL_GPIO_WritePin>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	200004c0 	.word	0x200004c0
 8001c40:	40020000 	.word	0x40020000

08001c44 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b298      	uxth	r0, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	8b3a      	ldrh	r2, [r7, #24]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7ff fbd3 	bl	8001418 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b298      	uxth	r0, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	8b3a      	ldrh	r2, [r7, #24]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7ff fbc3 	bl	8001418 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b298      	uxth	r0, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	8b3a      	ldrh	r2, [r7, #24]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7ff fbb3 	bl	8001418 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	b298      	uxth	r0, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	8b3a      	ldrh	r2, [r7, #24]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff fba3 	bl	8001418 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	b298      	uxth	r0, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	8b3a      	ldrh	r2, [r7, #24]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7ff fb93 	bl	8001418 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	b298      	uxth	r0, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	8b3a      	ldrh	r2, [r7, #24]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7ff fb83 	bl	8001418 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	8b3a      	ldrh	r2, [r7, #24]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7ff fb73 	bl	8001418 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	8b3a      	ldrh	r2, [r7, #24]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7ff fb63 	bl	8001418 <lcd_DrawPoint>
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b08a      	sub	sp, #40	; 0x28
 8001d5e:	af02      	add	r7, sp, #8
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4613      	mov	r3, r2
 8001d68:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	f1c3 0303 	rsb	r3, r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]


	if (fill)
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d04f      	beq.n	8001e22 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001d82:	e029      	b.n	8001dd8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e00a      	b.n	8001da0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	68b9      	ldr	r1, [r7, #8]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff ff55 	bl	8001c44 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	ddf0      	ble.n	8001d8a <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da06      	bge.n	8001dbc <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	009a      	lsls	r2, r3, #2
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	3306      	adds	r3, #6
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e00a      	b.n	8001dd2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	009a      	lsls	r2, r3, #2
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	330a      	adds	r3, #10
 8001dca:	613b      	str	r3, [r7, #16]
				y--;
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	ddd1      	ble.n	8001d84 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001de0:	e023      	b.n	8001e2a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff ff29 	bl	8001c44 <_draw_circle_8>
			if (d < 0) {
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da06      	bge.n	8001e06 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	009a      	lsls	r2, r3, #2
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	3306      	adds	r3, #6
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e00a      	b.n	8001e1c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	009a      	lsls	r2, r3, #2
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	330a      	adds	r3, #10
 8001e14:	613b      	str	r3, [r7, #16]
				y--;
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	61bb      	str	r3, [r7, #24]
			x++;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dddb      	ble.n	8001de2 <lcd_DrawCircle+0x88>
}
 8001e2a:	bf00      	nop
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b08b      	sub	sp, #44	; 0x2c
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	60ba      	str	r2, [r7, #8]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	81fb      	strh	r3, [r7, #14]
 8001e42:	460b      	mov	r3, r1
 8001e44:	81bb      	strh	r3, [r7, #12]
 8001e46:	4613      	mov	r3, r2
 8001e48:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001e52:	e048      	b.n	8001ee6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d145      	bne.n	8001ee6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001e5a:	89fa      	ldrh	r2, [r7, #14]
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <lcd_ShowStr+0xc4>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	1acb      	subs	r3, r1, r3
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dc3f      	bgt.n	8001ef0 <lcd_ShowStr+0xbc>
 8001e70:	89ba      	ldrh	r2, [r7, #12]
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <lcd_ShowStr+0xc4>)
 8001e74:	885b      	ldrh	r3, [r3, #2]
 8001e76:	4619      	mov	r1, r3
 8001e78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e7c:	1acb      	subs	r3, r1, r3
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dc36      	bgt.n	8001ef0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d902      	bls.n	8001e90 <lcd_ShowStr+0x5c>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
 8001e8e:	e02a      	b.n	8001ee6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b0d      	cmp	r3, #13
 8001e96:	d10b      	bne.n	8001eb0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001e98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	89bb      	ldrh	r3, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001ea4:	8abb      	ldrh	r3, [r7, #20]
 8001ea6:	81fb      	strh	r3, [r7, #14]
					str++;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	e017      	b.n	8001ee0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	88fc      	ldrh	r4, [r7, #6]
 8001eb6:	89b9      	ldrh	r1, [r7, #12]
 8001eb8:	89f8      	ldrh	r0, [r7, #14]
 8001eba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ebe:	9302      	str	r3, [sp, #8]
 8001ec0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	4623      	mov	r3, r4
 8001ecc:	f7ff fb76 	bl	80015bc <lcd_ShowChar>
					x+=sizey/2;
 8001ed0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	89fb      	ldrh	r3, [r7, #14]
 8001edc:	4413      	add	r3, r2
 8001ede:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1b2      	bne.n	8001e54 <lcd_ShowStr+0x20>
 8001eee:	e000      	b.n	8001ef2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ef0:	bf00      	nop
			}
		}
	}
}
 8001ef2:	371c      	adds	r7, #28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd90      	pop	{r4, r7, pc}
 8001ef8:	200004c0 	.word	0x200004c0

08001efc <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <led7_Scan+0x104>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <led7_Scan+0x104>)
 8001f0a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001f0c:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <led7_Scan+0x108>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <led7_Scan+0x10c>)
 8001f14:	5c9b      	ldrb	r3, [r3, r2]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	b21a      	sxth	r2, r3
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <led7_Scan+0x104>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <led7_Scan+0x104>)
 8001f28:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <led7_Scan+0x108>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d846      	bhi.n	8001fc0 <led7_Scan+0xc4>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <led7_Scan+0x3c>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f67 	.word	0x08001f67
 8001f40:	08001f85 	.word	0x08001f85
 8001f44:	08001fa3 	.word	0x08001fa3
	case 0:
		spi_buffer |= 0x00b0;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <led7_Scan+0x104>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <led7_Scan+0x104>)
 8001f54:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001f56:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <led7_Scan+0x104>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <led7_Scan+0x104>)
 8001f62:	801a      	strh	r2, [r3, #0]
		break;
 8001f64:	e02d      	b.n	8001fc2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <led7_Scan+0x104>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <led7_Scan+0x104>)
 8001f72:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <led7_Scan+0x104>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	f023 0320 	bic.w	r3, r3, #32
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <led7_Scan+0x104>)
 8001f80:	801a      	strh	r2, [r3, #0]
		break;
 8001f82:	e01e      	b.n	8001fc2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <led7_Scan+0x104>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <led7_Scan+0x104>)
 8001f90:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <led7_Scan+0x104>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f023 0310 	bic.w	r3, r3, #16
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <led7_Scan+0x104>)
 8001f9e:	801a      	strh	r2, [r3, #0]
		break;
 8001fa0:	e00f      	b.n	8001fc2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <led7_Scan+0x104>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <led7_Scan+0x104>)
 8001fae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <led7_Scan+0x104>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <led7_Scan+0x104>)
 8001fbc:	801a      	strh	r2, [r3, #0]
		break;
 8001fbe:	e000      	b.n	8001fc2 <led7_Scan+0xc6>
	default:
		break;
 8001fc0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <led7_Scan+0x108>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	425a      	negs	r2, r3
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	bf58      	it	pl
 8001fd4:	4253      	negpl	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <led7_Scan+0x108>)
 8001fda:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2140      	movs	r1, #64	; 0x40
 8001fe0:	480a      	ldr	r0, [pc, #40]	; (800200c <led7_Scan+0x110>)
 8001fe2:	f001 ff7f 	bl	8003ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4905      	ldr	r1, [pc, #20]	; (8002000 <led7_Scan+0x104>)
 8001fec:	4808      	ldr	r0, [pc, #32]	; (8002010 <led7_Scan+0x114>)
 8001fee:	f002 fdf8 	bl	8004be2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2140      	movs	r1, #64	; 0x40
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <led7_Scan+0x110>)
 8001ff8:	f001 ff74 	bl	8003ee4 <HAL_GPIO_WritePin>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	2000000c 	.word	0x2000000c
 8002004:	200004c6 	.word	0x200004c6
 8002008:	20000008 	.word	0x20000008
 800200c:	40021800 	.word	0x40021800
 8002010:	20000530 	.word	0x20000530

08002014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002018:	f000 fe42 	bl	8002ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201c:	f000 f896 	bl	800214c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002020:	f7fe fbbc 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 8002024:	f7fe fae4 	bl	80005f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002028:	f7fe fa4c 	bl	80004c4 <MX_ADC1_Init>
  MX_FSMC_Init();
 800202c:	f7fe fb00 	bl	8000630 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002030:	f7fe fce2 	bl	80009f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002034:	f000 f95a 	bl	80022ec <MX_SPI1_Init>
  MX_TIM2_Init();
 8002038:	f000 fcfc 	bl	8002a34 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800203c:	f000 fdb2 	bl	8002ba4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002040:	f000 fca8 	bl	8002994 <MX_TIM1_Init>
  MX_TIM13_Init();
 8002044:	f000 fd42 	bl	8002acc <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8002048:	f000 fdd6 	bl	8002bf8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800204c:	f000 f8e8 	bl	8002220 <system_init>
  home_lcd();
 8002050:	f7fe fd00 	bl	8000a54 <home_lcd>
  HAL_Delay(500);
 8002054:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002058:	f000 fe94 	bl	8002d84 <HAL_Delay>
  home_second_lcd();
 800205c:	f7fe fff6 	bl	800104c <home_second_lcd>
		  HAL_Delay(500);
 8002060:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002064:	f000 fe8e 	bl	8002d84 <HAL_Delay>
		  home_third_lcd();
 8002068:	f7ff f808 	bl	800107c <home_third_lcd>
		HAL_Delay(500);
 800206c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002070:	f000 fe88 	bl	8002d84 <HAL_Delay>
		home_forth_lcd();
 8002074:	f7ff f81a 	bl	80010ac <home_forth_lcd>
		  HAL_Delay(500);
 8002078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800207c:	f000 fe82 	bl	8002d84 <HAL_Delay>
  mode_game_lcd();
 8002080:	f7fe fd40 	bl	8000b04 <mode_game_lcd>
  HAL_Delay(500);
 8002084:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002088:	f000 fe7c 	bl	8002d84 <HAL_Delay>
		  mode_first_lcd();
 800208c:	f7ff f828 	bl	80010e0 <mode_first_lcd>
		  HAL_Delay(500);
 8002090:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002094:	f000 fe76 	bl	8002d84 <HAL_Delay>
		  mode_second_lcd();
 8002098:	f7ff f83a 	bl	8001110 <mode_second_lcd>
		HAL_Delay(500);
 800209c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020a0:	f000 fe70 	bl	8002d84 <HAL_Delay>
		mode_third_lcd();
 80020a4:	f7ff f84e 	bl	8001144 <mode_third_lcd>
		  HAL_Delay(500);
 80020a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020ac:	f000 fe6a 	bl	8002d84 <HAL_Delay>
		  mode_forth_lcd();
 80020b0:	f7ff f862 	bl	8001178 <mode_forth_lcd>
		  HAL_Delay(500);
 80020b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020b8:	f000 fe64 	bl	8002d84 <HAL_Delay>

		  strcpy(history[0].name, "abc");
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <main+0x128>)
 80020be:	4a20      	ldr	r2, [pc, #128]	; (8002140 <main+0x12c>)
 80020c0:	6810      	ldr	r0, [r2, #0]
 80020c2:	6018      	str	r0, [r3, #0]
		  history[0].score = 1000;
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <main+0x128>)
 80020c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ca:	815a      	strh	r2, [r3, #10]
		  strcpy(history[1].name, "def");
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <main+0x130>)
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <main+0x134>)
 80020d0:	6810      	ldr	r0, [r2, #0]
 80020d2:	6018      	str	r0, [r3, #0]
		  history[1].score = 124;
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <main+0x128>)
 80020d6:	227c      	movs	r2, #124	; 0x7c
 80020d8:	82da      	strh	r2, [r3, #22]
	highscore_lcd();
 80020da:	f7fe fd81 	bl	8000be0 <highscore_lcd>
		HAL_Delay(500);
 80020de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020e2:	f000 fe4f 	bl	8002d84 <HAL_Delay>
	game_lcd();
 80020e6:	f7fe fe47 	bl	8000d78 <game_lcd>
		HAL_Delay(500);
 80020ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020ee:	f000 fe49 	bl	8002d84 <HAL_Delay>
	score_lcd();
 80020f2:	f7fe fea5 	bl	8000e40 <score_lcd>
		HAL_Delay(500);
 80020f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020fa:	f000 fe43 	bl	8002d84 <HAL_Delay>
	pause_lcd();
 80020fe:	f7fe feb7 	bl	8000e70 <pause_lcd>
		HAL_Delay(500);
 8002102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002106:	f000 fe3d 	bl	8002d84 <HAL_Delay>
		pause_second_lcd();
 800210a:	f7ff f84f 	bl	80011ac <pause_second_lcd>
		HAL_Delay(500);
 800210e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002112:	f000 fe37 	bl	8002d84 <HAL_Delay>
		pause_third_lcd();
 8002116:	f7ff f871 	bl	80011fc <pause_third_lcd>
		HAL_Delay(500);
 800211a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800211e:	f000 fe31 	bl	8002d84 <HAL_Delay>
	game_over_lcd();
 8002122:	f7fe fee5 	bl	8000ef0 <game_over_lcd>
		HAL_Delay(1000);
 8002126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800212a:	f000 fe2b 	bl	8002d84 <HAL_Delay>
	youwin_lcd();
 800212e:	f7fe ff17 	bl	8000f60 <youwin_lcd>
		HAL_Delay(1000);
 8002132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002136:	f000 fe25 	bl	8002d84 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800213a:	e7fe      	b.n	800213a <main+0x126>
 800213c:	200000d0 	.word	0x200000d0
 8002140:	08007334 	.word	0x08007334
 8002144:	200000dc 	.word	0x200000dc
 8002148:	08007338 	.word	0x08007338

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b094      	sub	sp, #80	; 0x50
 8002150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002152:	f107 0320 	add.w	r3, r7, #32
 8002156:	2230      	movs	r2, #48	; 0x30
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f005 f87a 	bl	8007254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <SystemClock_Config+0xcc>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <SystemClock_Config+0xcc>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217e:	6413      	str	r3, [r2, #64]	; 0x40
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <SystemClock_Config+0xcc>)
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <SystemClock_Config+0xd0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <SystemClock_Config+0xd0>)
 8002196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <SystemClock_Config+0xd0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021ac:	2301      	movs	r3, #1
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021b0:	2310      	movs	r3, #16
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021b4:	2302      	movs	r3, #2
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b8:	2300      	movs	r3, #0
 80021ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021bc:	2308      	movs	r3, #8
 80021be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021c0:	23a8      	movs	r3, #168	; 0xa8
 80021c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021c8:	2304      	movs	r3, #4
 80021ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021cc:	f107 0320 	add.w	r3, r7, #32
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 ffe5 	bl	80041a0 <HAL_RCC_OscConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021dc:	f000 f831 	bl	8002242 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e0:	230f      	movs	r3, #15
 80021e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e4:	2302      	movs	r3, #2
 80021e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80021f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2105      	movs	r1, #5
 80021fe:	4618      	mov	r0, r3
 8002200:	f002 fa46 	bl	8004690 <HAL_RCC_ClockConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800220a:	f000 f81a 	bl	8002242 <Error_Handler>
  }
}
 800220e:	bf00      	nop
 8002210:	3750      	adds	r7, #80	; 0x50
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000

08002220 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	  timer_init();
 8002224:	f000 f812 	bl	800224c <timer_init>
	  button_init();
 8002228:	f7fe f9d6 	bl	80005d8 <button_init>
	  lcd_init();
 800222c:	f7ff fbaa 	bl	8001984 <lcd_init>
	  pointTouch_init();		//khoi tao cac vi tri nhan
 8002230:	f7fe fa78 	bl	8000724 <pointTouch_init>
	  snake_init();				//khoi tao ran
 8002234:	f7fe fa8c 	bl	8000750 <snake_init>
	  //uart_init_esp();
	  setTimer2(50);
 8002238:	2032      	movs	r0, #50	; 0x32
 800223a:	f000 f811 	bl	8002260 <setTimer2>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}

08002242 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002246:	b672      	cpsid	i
}
 8002248:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800224a:	e7fe      	b.n	800224a <Error_Handler+0x8>

0800224c <timer_init>:
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;



void timer_init(){
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <timer_init+0x10>)
 8002252:	f002 ff61 	bl	8005118 <HAL_TIM_Base_Start_IT>
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200005d4 	.word	0x200005d4

08002260 <setTimer2>:
	timer1_MUL = duration / TIMER_CYCLE_2;
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}*/

void setTimer2(uint16_t duration){
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration / TIMER_CYCLE_2;
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <setTimer2+0x2c>)
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <setTimer2+0x2c>)
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <setTimer2+0x30>)
 8002276:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <setTimer2+0x34>)
 800227a:	2200      	movs	r2, #0
 800227c:	801a      	strh	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	2000052c 	.word	0x2000052c
 8002290:	2000052a 	.word	0x2000052a
 8002294:	20000528 	.word	0x20000528

08002298 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d116      	bne.n	80022d8 <HAL_TIM_PeriodElapsedCallback+0x40>
			if(timer1_counter == 0) {
				flag_timer1 = 1;
				timer1_counter = timer1_MUL;
			}
		}*/
		if(timer2_counter > 0){
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d010      	beq.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80022bc:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80022ce:	881a      	ldrh	r2, [r3, #0]
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80022d2:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 80022d4:	f7ff fe12 	bl	8001efc <led7_Scan>
	}
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000052a 	.word	0x2000052a
 80022e4:	20000528 	.word	0x20000528
 80022e8:	2000052c 	.word	0x2000052c

080022ec <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_SPI1_Init+0x64>)
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <MX_SPI1_Init+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <MX_SPI1_Init+0x64>)
 80022f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_SPI1_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <MX_SPI1_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_SPI1_Init+0x64>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <MX_SPI1_Init+0x64>)
 8002312:	2200      	movs	r2, #0
 8002314:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_SPI1_Init+0x64>)
 8002318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_SPI1_Init+0x64>)
 8002320:	2200      	movs	r2, #0
 8002322:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <MX_SPI1_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_SPI1_Init+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <MX_SPI1_Init+0x64>)
 8002332:	2200      	movs	r2, #0
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_SPI1_Init+0x64>)
 8002338:	220a      	movs	r2, #10
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <MX_SPI1_Init+0x64>)
 800233e:	f002 fbc7 	bl	8004ad0 <HAL_SPI_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002348:	f7ff ff7b 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000530 	.word	0x20000530
 8002354:	40013000 	.word	0x40013000

08002358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_MspInit+0x4c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_MspInit+0x4c>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_MspInit+0x4c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_MspInit+0x4c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_MspInit+0x4c>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_MspInit+0x4c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3c      	ldr	r2, [pc, #240]	; (80024b8 <HAL_ADC_MspInit+0x110>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d171      	bne.n	80024ae <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_ADC_MspInit+0x114>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <HAL_ADC_MspInit+0x114>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6453      	str	r3, [r2, #68]	; 0x44
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_ADC_MspInit+0x114>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_ADC_MspInit+0x114>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a33      	ldr	r2, [pc, #204]	; (80024bc <HAL_ADC_MspInit+0x114>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_ADC_MspInit+0x114>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_ADC_MspInit+0x114>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <HAL_ADC_MspInit+0x114>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_ADC_MspInit+0x114>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800241e:	2307      	movs	r3, #7
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4823      	ldr	r0, [pc, #140]	; (80024c0 <HAL_ADC_MspInit+0x118>)
 8002432:	f001 fbbb 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002436:	2303      	movs	r3, #3
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800243a:	2303      	movs	r3, #3
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	4619      	mov	r1, r3
 8002448:	481e      	ldr	r0, [pc, #120]	; (80024c4 <HAL_ADC_MspInit+0x11c>)
 800244a:	f001 fbaf 	bl	8003bac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002450:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <HAL_ADC_MspInit+0x124>)
 8002452:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002474:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800247c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002484:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 8002494:	f001 f80e 	bl	80034b4 <HAL_DMA_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800249e:	f7ff fed0 	bl	8002242 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 80024a6:	639a      	str	r2, [r3, #56]	; 0x38
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_ADC_MspInit+0x120>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40012000 	.word	0x40012000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020400 	.word	0x40020400
 80024c8:	200004c8 	.word	0x200004c8
 80024cc:	40026410 	.word	0x40026410

080024d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <HAL_I2C_MspInit+0x84>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d12b      	bne.n	800254a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_I2C_MspInit+0x88>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_I2C_MspInit+0x88>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_I2C_MspInit+0x88>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800250e:	23c0      	movs	r3, #192	; 0xc0
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002512:	2312      	movs	r3, #18
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251e:	2304      	movs	r3, #4
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	480c      	ldr	r0, [pc, #48]	; (800255c <HAL_I2C_MspInit+0x8c>)
 800252a:	f001 fb3f 	bl	8003bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_I2C_MspInit+0x88>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_I2C_MspInit+0x88>)
 8002538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_I2C_MspInit+0x88>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	; 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40005400 	.word	0x40005400
 8002558:	40023800 	.word	0x40023800
 800255c:	40020400 	.word	0x40020400

08002560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a19      	ldr	r2, [pc, #100]	; (80025e4 <HAL_SPI_MspInit+0x84>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d12b      	bne.n	80025da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_SPI_MspInit+0x88>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_SPI_MspInit+0x88>)
 800258c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_SPI_MspInit+0x88>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_SPI_MspInit+0x88>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_SPI_MspInit+0x88>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_SPI_MspInit+0x88>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80025ba:	2338      	movs	r3, #56	; 0x38
 80025bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ca:	2305      	movs	r3, #5
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <HAL_SPI_MspInit+0x8c>)
 80025d6:	f001 fae9 	bl	8003bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	; 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40013000 	.word	0x40013000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020400 	.word	0x40020400

080025f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a22      	ldr	r2, [pc, #136]	; (8002688 <HAL_TIM_Base_MspInit+0x98>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	4a20      	ldr	r2, [pc, #128]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6453      	str	r3, [r2, #68]	; 0x44
 8002612:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800261e:	e02e      	b.n	800267e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d116      	bne.n	8002658 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	201c      	movs	r0, #28
 800264c:	f000 fefb 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002650:	201c      	movs	r0, #28
 8002652:	f000 ff14 	bl	800347e <HAL_NVIC_EnableIRQ>
}
 8002656:	e012      	b.n	800267e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM13)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_TIM_Base_MspInit+0xa0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10d      	bne.n	800267e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 800266c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_TIM_Base_MspInit+0x9c>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40010000 	.word	0x40010000
 800268c:	40023800 	.word	0x40023800
 8002690:	40001c00 	.word	0x40001c00

08002694 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_TIM_MspPostInit+0x68>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11e      	bne.n	80026f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_TIM_MspPostInit+0x6c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <HAL_TIM_MspPostInit+0x6c>)
 80026c0:	f043 0320 	orr.w	r3, r3, #32
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <HAL_TIM_MspPostInit+0x6c>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80026e4:	2309      	movs	r3, #9
 80026e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	4619      	mov	r1, r3
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <HAL_TIM_MspPostInit+0x70>)
 80026f0:	f001 fa5c 	bl	8003bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80026f4:	bf00      	nop
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40001c00 	.word	0x40001c00
 8002700:	40023800 	.word	0x40023800
 8002704:	40021400 	.word	0x40021400

08002708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	; 0x30
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3a      	ldr	r2, [pc, #232]	; (8002810 <HAL_UART_MspInit+0x108>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d135      	bne.n	8002796 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <HAL_UART_MspInit+0x10c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a38      	ldr	r2, [pc, #224]	; (8002814 <HAL_UART_MspInit+0x10c>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <HAL_UART_MspInit+0x10c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_UART_MspInit+0x10c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a31      	ldr	r2, [pc, #196]	; (8002814 <HAL_UART_MspInit+0x10c>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_UART_MspInit+0x10c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002762:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002774:	2307      	movs	r3, #7
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4826      	ldr	r0, [pc, #152]	; (8002818 <HAL_UART_MspInit+0x110>)
 8002780:	f001 fa14 	bl	8003bac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	2025      	movs	r0, #37	; 0x25
 800278a:	f000 fe5c 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800278e:	2025      	movs	r0, #37	; 0x25
 8002790:	f000 fe75 	bl	800347e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002794:	e038      	b.n	8002808 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a20      	ldr	r2, [pc, #128]	; (800281c <HAL_UART_MspInit+0x114>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d133      	bne.n	8002808 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_UART_MspInit+0x10c>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <HAL_UART_MspInit+0x10c>)
 80027aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_UART_MspInit+0x10c>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_UART_MspInit+0x10c>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4a13      	ldr	r2, [pc, #76]	; (8002814 <HAL_UART_MspInit+0x10c>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6313      	str	r3, [r2, #48]	; 0x30
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_UART_MspInit+0x10c>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027d8:	230c      	movs	r3, #12
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e8:	2307      	movs	r3, #7
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 031c 	add.w	r3, r7, #28
 80027f0:	4619      	mov	r1, r3
 80027f2:	4809      	ldr	r0, [pc, #36]	; (8002818 <HAL_UART_MspInit+0x110>)
 80027f4:	f001 f9da 	bl	8003bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	2026      	movs	r0, #38	; 0x26
 80027fe:	f000 fe22 	bl	8003446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002802:	2026      	movs	r0, #38	; 0x26
 8002804:	f000 fe3b 	bl	800347e <HAL_NVIC_EnableIRQ>
}
 8002808:	bf00      	nop
 800280a:	3730      	adds	r7, #48	; 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40011000 	.word	0x40011000
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000
 800281c:	40004400 	.word	0x40004400

08002820 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_FSMC_MspInit+0x88>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d131      	bne.n	80028a0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_FSMC_MspInit+0x88>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_FSMC_MspInit+0x8c>)
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_FSMC_MspInit+0x8c>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6393      	str	r3, [r2, #56]	; 0x38
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_FSMC_MspInit+0x8c>)
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800285e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8002862:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002870:	230c      	movs	r3, #12
 8002872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	4619      	mov	r1, r3
 8002878:	480d      	ldr	r0, [pc, #52]	; (80028b0 <HAL_FSMC_MspInit+0x90>)
 800287a:	f001 f997 	bl	8003bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800287e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002882:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002890:	230c      	movs	r3, #12
 8002892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <HAL_FSMC_MspInit+0x94>)
 800289a:	f001 f987 	bl	8003bac <HAL_GPIO_Init>
 800289e:	e000      	b.n	80028a2 <HAL_FSMC_MspInit+0x82>
    return;
 80028a0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000588 	.word	0x20000588
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40020c00 	.word	0x40020c00

080028b8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80028c0:	f7ff ffae 	bl	8002820 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <NMI_Handler+0x4>

080028d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <HardFault_Handler+0x4>

080028d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <MemManage_Handler+0x4>

080028de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002918:	f000 fa14 	bl	8002d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}

08002920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <TIM2_IRQHandler+0x10>)
 8002926:	f002 fcc0 	bl	80052aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200005d4 	.word	0x200005d4

08002934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <USART1_IRQHandler+0x10>)
 800293a:	f003 fbfb 	bl	8006134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000668 	.word	0x20000668

08002948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <USART2_IRQHandler+0x10>)
 800294e:	f003 fbf1 	bl	8006134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200006ac 	.word	0x200006ac

0800295c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <DMA2_Stream0_IRQHandler+0x10>)
 8002962:	f000 fee7 	bl	8003734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200004c8 	.word	0x200004c8

08002970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <SystemInit+0x20>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <SystemInit+0x20>)
 800297c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <MX_TIM1_Init>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void){
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a8:	463b      	mov	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029b0:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <MX_TIM1_Init+0x9c>)
 80029b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029b8:	2253      	movs	r2, #83	; 0x53
 80029ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029dc:	4813      	ldr	r0, [pc, #76]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029de:	f002 fb4b 	bl	8005078 <HAL_TIM_Base_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029e8:	f7ff fc2b 	bl	8002242 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	4619      	mov	r1, r3
 80029f8:	480c      	ldr	r0, [pc, #48]	; (8002a2c <MX_TIM1_Init+0x98>)
 80029fa:	f002 fe21 	bl	8005640 <HAL_TIM_ConfigClockSource>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002a04:	f7ff fc1d 	bl	8002242 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a10:	463b      	mov	r3, r7
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	; (8002a2c <MX_TIM1_Init+0x98>)
 8002a16:	f003 f9ed 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a20:	f7ff fc0f 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000058c 	.word	0x2000058c
 8002a30:	40010000 	.word	0x40010000

08002a34 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a48:	463b      	mov	r3, r7
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a5a:	f240 3247 	movw	r2, #839	; 0x347
 8002a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a68:	2263      	movs	r2, #99	; 0x63
 8002a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6c:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a78:	4813      	ldr	r0, [pc, #76]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a7a:	f002 fafd 	bl	8005078 <HAL_TIM_Base_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a84:	f7ff fbdd 	bl	8002242 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	4619      	mov	r1, r3
 8002a94:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002a96:	f002 fdd3 	bl	8005640 <HAL_TIM_ConfigClockSource>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002aa0:	f7ff fbcf 	bl	8002242 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <MX_TIM2_Init+0x94>)
 8002ab2:	f003 f99f 	bl	8005df4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002abc:	f7ff fbc1 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200005d4 	.word	0x200005d4

08002acc <MX_TIM13_Init>:
/**
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
 8002ae0:	615a      	str	r2, [r3, #20]
 8002ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <MX_TIM13_Init+0x98>)
 8002ae8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002aec:	f240 3247 	movw	r2, #839	; 0x347
 8002af0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002afa:	2263      	movs	r2, #99	; 0x63
 8002afc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002b0a:	4815      	ldr	r0, [pc, #84]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002b0c:	f002 fab4 	bl	8005078 <HAL_TIM_Base_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002b16:	f7ff fb94 	bl	8002242 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002b1a:	4811      	ldr	r0, [pc, #68]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002b1c:	f002 fb6c 	bl	80051f8 <HAL_TIM_PWM_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002b26:	f7ff fb8c 	bl	8002242 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b2a:	2360      	movs	r3, #96	; 0x60
 8002b2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4807      	ldr	r0, [pc, #28]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002b42:	f002 fcbb 	bl	80054bc <HAL_TIM_PWM_ConfigChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002b4c:	f7ff fb79 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002b50:	4803      	ldr	r0, [pc, #12]	; (8002b60 <MX_TIM13_Init+0x94>)
 8002b52:	f7ff fd9f 	bl	8002694 <HAL_TIM_MspPostInit>

}
 8002b56:	bf00      	nop
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	2000061c 	.word	0x2000061c
 8002b64:	40001c00 	.word	0x40001c00

08002b68 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_UART_RxCpltCallback+0x30>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10a      	bne.n	8002b90 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002b7a:	230a      	movs	r3, #10
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4907      	ldr	r1, [pc, #28]	; (8002b9c <HAL_UART_RxCpltCallback+0x34>)
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <HAL_UART_RxCpltCallback+0x38>)
 8002b82:	f003 fa14 	bl	8005fae <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002b86:	2201      	movs	r2, #1
 8002b88:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_UART_RxCpltCallback+0x34>)
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <HAL_UART_RxCpltCallback+0x38>)
 8002b8c:	f003 faa1 	bl	80060d2 <HAL_UART_Receive_IT>
	}
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40011000 	.word	0x40011000
 8002b9c:	20000664 	.word	0x20000664
 8002ba0:	20000668 	.word	0x20000668

08002ba4 <MX_USART1_UART_Init>:
#include "usart.h"

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

void MX_USART1_UART_Init(void){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <MX_USART1_UART_Init+0x50>)
 8002bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bca:	220c      	movs	r2, #12
 8002bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bdc:	f003 f99a 	bl	8005f14 <HAL_UART_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002be6:	f7ff fb2c 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000668 	.word	0x20000668
 8002bf4:	40011000 	.word	0x40011000

08002bf8 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void){
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <MX_USART2_UART_Init+0x50>)
 8002c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c30:	f003 f970 	bl	8005f14 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c3a:	f7ff fb02 	bl	8002242 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200006ac 	.word	0x200006ac
 8002c48:	40004400 	.word	0x40004400

08002c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c50:	480d      	ldr	r0, [pc, #52]	; (8002c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c52:	490e      	ldr	r1, [pc, #56]	; (8002c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c54:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c68:	4c0b      	ldr	r4, [pc, #44]	; (8002c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c76:	f7ff fe7b 	bl	8002970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f004 faf3 	bl	8007264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7e:	f7ff f9c9 	bl	8002014 <main>
  bx  lr    
 8002c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c8c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002c90:	080eb314 	.word	0x080eb314
  ldr r2, =_sbss
 8002c94:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002c98:	200006f4 	.word	0x200006f4

08002c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c9c:	e7fe      	b.n	8002c9c <ADC_IRQHandler>
	...

08002ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_Init+0x40>)
 8002caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_Init+0x40>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_Init+0x40>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f000 fbb1 	bl	8003430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cce:	200f      	movs	r0, #15
 8002cd0:	f000 f808 	bl	8002ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd4:	f7ff fb40 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023c00 	.word	0x40023c00

08002ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x54>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x58>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fbc9 	bl	800349a <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00e      	b.n	8002d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d80a      	bhi.n	8002d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f000 fb91 	bl	8003446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <HAL_InitTick+0x5c>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000010 	.word	0x20000010
 8002d3c:	20000018 	.word	0x20000018
 8002d40:	20000014 	.word	0x20000014

08002d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_IncTick+0x20>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x24>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_IncTick+0x24>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000018 	.word	0x20000018
 8002d68:	200006f0 	.word	0x200006f0

08002d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_GetTick+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	200006f0 	.word	0x200006f0

08002d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7ff ffee 	bl	8002d6c <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d005      	beq.n	8002daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_Delay+0x44>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002daa:	bf00      	nop
 8002dac:	f7ff ffde 	bl	8002d6c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8f7      	bhi.n	8002dac <HAL_Delay+0x28>
  {
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000018 	.word	0x20000018

08002dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e033      	b.n	8002e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fadc 	bl	80023a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e12:	f023 0302 	bic.w	r3, r3, #2
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f93a 	bl	8003098 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
 8002e3a:	e001      	b.n	8002e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1c>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e105      	b.n	800307c <HAL_ADC_ConfigChannel+0x228>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b09      	cmp	r3, #9
 8002e7e:	d925      	bls.n	8002ecc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68d9      	ldr	r1, [r3, #12]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	3b1e      	subs	r3, #30
 8002e96:	2207      	movs	r2, #7
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68d9      	ldr	r1, [r3, #12]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4603      	mov	r3, r0
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4403      	add	r3, r0
 8002ebe:	3b1e      	subs	r3, #30
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	e022      	b.n	8002f12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6919      	ldr	r1, [r3, #16]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6919      	ldr	r1, [r3, #16]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4403      	add	r3, r0
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d824      	bhi.n	8002f64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	3b05      	subs	r3, #5
 8002f2c:	221f      	movs	r2, #31
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	400a      	ands	r2, r1
 8002f3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	3b05      	subs	r3, #5
 8002f56:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	635a      	str	r2, [r3, #52]	; 0x34
 8002f62:	e04c      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d824      	bhi.n	8002fb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3b23      	subs	r3, #35	; 0x23
 8002f7e:	221f      	movs	r2, #31
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43da      	mvns	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b23      	subs	r3, #35	; 0x23
 8002fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb4:	e023      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b41      	subs	r3, #65	; 0x41
 8002fc8:	221f      	movs	r2, #31
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b41      	subs	r3, #65	; 0x41
 8002ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <HAL_ADC_ConfigChannel+0x234>)
 8003000:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_ADC_ConfigChannel+0x238>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d109      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1cc>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b12      	cmp	r3, #18
 8003012:	d105      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_ADC_ConfigChannel+0x238>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d123      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x21e>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b10      	cmp	r3, #16
 8003030:	d003      	beq.n	800303a <HAL_ADC_ConfigChannel+0x1e6>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b11      	cmp	r3, #17
 8003038:	d11b      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b10      	cmp	r3, #16
 800304c:	d111      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <HAL_ADC_ConfigChannel+0x23c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_ADC_ConfigChannel+0x240>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	0c9a      	lsrs	r2, r3, #18
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003064:	e002      	b.n	800306c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3b01      	subs	r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f9      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	40012300 	.word	0x40012300
 800308c:	40012000 	.word	0x40012000
 8003090:	20000010 	.word	0x20000010
 8003094:	431bde83 	.word	0x431bde83

08003098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a0:	4b79      	ldr	r3, [pc, #484]	; (8003288 <ADC_Init+0x1f0>)
 80030a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	021a      	lsls	r2, r3, #8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	4a58      	ldr	r2, [pc, #352]	; (800328c <ADC_Init+0x1f4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d022      	beq.n	8003176 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800313e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6899      	ldr	r1, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003160:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	e00f      	b.n	8003196 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003194:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0202 	bic.w	r2, r2, #2
 80031a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7e1b      	ldrb	r3, [r3, #24]
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	3b01      	subs	r3, #1
 80031f0:	035a      	lsls	r2, r3, #13
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	e007      	b.n	800320c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800321a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	3b01      	subs	r3, #1
 8003228:	051a      	lsls	r2, r3, #20
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800324e:	025a      	lsls	r2, r3, #9
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003266:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6899      	ldr	r1, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	029a      	lsls	r2, r3, #10
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	40012300 	.word	0x40012300
 800328c:	0f000001 	.word	0x0f000001

08003290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ac:	4013      	ands	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <__NVIC_SetPriorityGrouping+0x44>)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60d3      	str	r3, [r2, #12]
}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <__NVIC_GetPriorityGrouping+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 0307 	and.w	r3, r3, #7
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	2b00      	cmp	r3, #0
 8003304:	db0b      	blt.n	800331e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	f003 021f 	and.w	r2, r3, #31
 800330c:	4907      	ldr	r1, [pc, #28]	; (800332c <__NVIC_EnableIRQ+0x38>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2001      	movs	r0, #1
 8003316:	fa00 f202 	lsl.w	r2, r0, r2
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	e000e100 	.word	0xe000e100

08003330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	2b00      	cmp	r3, #0
 8003342:	db0a      	blt.n	800335a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	490c      	ldr	r1, [pc, #48]	; (800337c <__NVIC_SetPriority+0x4c>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	0112      	lsls	r2, r2, #4
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	440b      	add	r3, r1
 8003354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003358:	e00a      	b.n	8003370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <__NVIC_SetPriority+0x50>)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3b04      	subs	r3, #4
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	440b      	add	r3, r1
 800336e:	761a      	strb	r2, [r3, #24]
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e100 	.word	0xe000e100
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f1c3 0307 	rsb	r3, r3, #7
 800339e:	2b04      	cmp	r3, #4
 80033a0:	bf28      	it	cs
 80033a2:	2304      	movcs	r3, #4
 80033a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d902      	bls.n	80033b4 <NVIC_EncodePriority+0x30>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3b03      	subs	r3, #3
 80033b2:	e000      	b.n	80033b6 <NVIC_EncodePriority+0x32>
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	401a      	ands	r2, r3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033cc:	f04f 31ff 	mov.w	r1, #4294967295
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa01 f303 	lsl.w	r3, r1, r3
 80033d6:	43d9      	mvns	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	4313      	orrs	r3, r2
         );
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033fc:	d301      	bcc.n	8003402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033fe:	2301      	movs	r3, #1
 8003400:	e00f      	b.n	8003422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <SysTick_Config+0x40>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800340a:	210f      	movs	r1, #15
 800340c:	f04f 30ff 	mov.w	r0, #4294967295
 8003410:	f7ff ff8e 	bl	8003330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <SysTick_Config+0x40>)
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800341a:	4b04      	ldr	r3, [pc, #16]	; (800342c <SysTick_Config+0x40>)
 800341c:	2207      	movs	r2, #7
 800341e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	e000e010 	.word	0xe000e010

08003430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff29 	bl	8003290 <__NVIC_SetPriorityGrouping>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003458:	f7ff ff3e 	bl	80032d8 <__NVIC_GetPriorityGrouping>
 800345c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6978      	ldr	r0, [r7, #20]
 8003464:	f7ff ff8e 	bl	8003384 <NVIC_EncodePriority>
 8003468:	4602      	mov	r2, r0
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff5d 	bl	8003330 <__NVIC_SetPriority>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	4603      	mov	r3, r0
 8003486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff31 	bl	80032f4 <__NVIC_EnableIRQ>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ffa2 	bl	80033ec <SysTick_Config>
 80034a8:	4603      	mov	r3, r0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034c0:	f7ff fc54 	bl	8002d6c <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e099      	b.n	8003604 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	e00f      	b.n	8003512 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f2:	f7ff fc3b 	bl	8002d6c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d908      	bls.n	8003512 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2203      	movs	r2, #3
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e078      	b.n	8003604 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e8      	bne.n	80034f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_DMA_Init+0x158>)
 800352c:	4013      	ands	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800353e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	2b04      	cmp	r3, #4
 800356a:	d107      	bne.n	800357c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	4313      	orrs	r3, r2
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d117      	bne.n	80035d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fa7b 	bl	8003ab4 <DMA_CheckFifoParam>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035d2:	2301      	movs	r3, #1
 80035d4:	e016      	b.n	8003604 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa32 	bl	8003a48 <DMA_CalcBaseAndBitshift>
 80035e4:	4603      	mov	r3, r0
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	223f      	movs	r2, #63	; 0x3f
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	f010803f 	.word	0xf010803f

08003610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800361e:	f7ff fba5 	bl	8002d6c <HAL_GetTick>
 8003622:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d008      	beq.n	8003642 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e052      	b.n	80036e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0216 	bic.w	r2, r2, #22
 8003650:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003660:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_DMA_Abort+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0208 	bic.w	r2, r2, #8
 8003680:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003692:	e013      	b.n	80036bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003694:	f7ff fb6a 	bl	8002d6c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d90c      	bls.n	80036bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e015      	b.n	80036e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e4      	bne.n	8003694 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	223f      	movs	r2, #63	; 0x3f
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d004      	beq.n	800370e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e00c      	b.n	8003728 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2205      	movs	r2, #5
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003740:	4b8e      	ldr	r3, [pc, #568]	; (800397c <HAL_DMA_IRQHandler+0x248>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a8e      	ldr	r2, [pc, #568]	; (8003980 <HAL_DMA_IRQHandler+0x24c>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0a9b      	lsrs	r3, r3, #10
 800374c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	2208      	movs	r2, #8
 8003760:	409a      	lsls	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01a      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0204 	bic.w	r2, r2, #4
 8003786:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	2208      	movs	r2, #8
 800378e:	409a      	lsls	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	2201      	movs	r2, #1
 80037a6:	409a      	lsls	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d012      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	2201      	movs	r2, #1
 80037c4:	409a      	lsls	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	2204      	movs	r2, #4
 80037dc:	409a      	lsls	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2204      	movs	r2, #4
 80037fa:	409a      	lsls	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	2210      	movs	r2, #16
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d043      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d03c      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	2210      	movs	r2, #16
 8003830:	409a      	lsls	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d018      	beq.n	8003876 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d024      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	e01f      	b.n	80038a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e016      	b.n	80038a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d107      	bne.n	8003894 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0208 	bic.w	r2, r2, #8
 8003892:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	2220      	movs	r2, #32
 80038aa:	409a      	lsls	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 808f 	beq.w	80039d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8087 	beq.w	80039d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	2220      	movs	r2, #32
 80038cc:	409a      	lsls	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d136      	bne.n	800394c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0216 	bic.w	r2, r2, #22
 80038ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <HAL_DMA_IRQHandler+0x1da>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0208 	bic.w	r2, r2, #8
 800391c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	223f      	movs	r2, #63	; 0x3f
 8003924:	409a      	lsls	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	2b00      	cmp	r3, #0
 8003940:	d07e      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
        }
        return;
 800394a:	e079      	b.n	8003a40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01d      	beq.n	8003996 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	2b00      	cmp	r3, #0
 800396e:	d031      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
 8003978:	e02c      	b.n	80039d4 <HAL_DMA_IRQHandler+0x2a0>
 800397a:	bf00      	nop
 800397c:	20000010 	.word	0x20000010
 8003980:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d023      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
 8003994:	e01e      	b.n	80039d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0210 	bic.w	r2, r2, #16
 80039b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d032      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d022      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2205      	movs	r2, #5
 80039ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d307      	bcc.n	8003a1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f2      	bne.n	8003a00 <HAL_DMA_IRQHandler+0x2cc>
 8003a1a:	e000      	b.n	8003a1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
 8003a3e:	e000      	b.n	8003a42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a40:	bf00      	nop
    }
  }
}
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	3b10      	subs	r3, #16
 8003a58:	4a14      	ldr	r2, [pc, #80]	; (8003aac <DMA_CalcBaseAndBitshift+0x64>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x68>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d909      	bls.n	8003a8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a7e:	f023 0303 	bic.w	r3, r3, #3
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	659a      	str	r2, [r3, #88]	; 0x58
 8003a88:	e007      	b.n	8003a9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a92:	f023 0303 	bic.w	r3, r3, #3
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	aaaaaaab 	.word	0xaaaaaaab
 8003ab0:	080eb2d4 	.word	0x080eb2d4

08003ab4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11f      	bne.n	8003b0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d856      	bhi.n	8003b82 <DMA_CheckFifoParam+0xce>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <DMA_CheckFifoParam+0x28>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003aed 	.word	0x08003aed
 8003ae0:	08003aff 	.word	0x08003aff
 8003ae4:	08003aed 	.word	0x08003aed
 8003ae8:	08003b83 	.word	0x08003b83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d046      	beq.n	8003b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afc:	e043      	b.n	8003b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b06:	d140      	bne.n	8003b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b0c:	e03d      	b.n	8003b8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b16:	d121      	bne.n	8003b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d837      	bhi.n	8003b8e <DMA_CheckFifoParam+0xda>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <DMA_CheckFifoParam+0x70>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b3b 	.word	0x08003b3b
 8003b2c:	08003b35 	.word	0x08003b35
 8003b30:	08003b4d 	.word	0x08003b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      break;
 8003b38:	e030      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d025      	beq.n	8003b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4a:	e022      	b.n	8003b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b54:	d11f      	bne.n	8003b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b5a:	e01c      	b.n	8003b96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d903      	bls.n	8003b6a <DMA_CheckFifoParam+0xb6>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d003      	beq.n	8003b70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b68:	e018      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6e:	e015      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b80:	e00b      	b.n	8003b9a <DMA_CheckFifoParam+0xe6>
      break;
 8003b82:	bf00      	nop
 8003b84:	e00a      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
 8003b88:	e008      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e006      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e004      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
 8003b94:	e002      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b96:	bf00      	nop
 8003b98:	e000      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop

08003bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e16b      	b.n	8003ea0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc8:	2201      	movs	r2, #1
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	f040 815a 	bne.w	8003e9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d005      	beq.n	8003bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d130      	bne.n	8003c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4013      	ands	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c34:	2201      	movs	r2, #1
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 0201 	and.w	r2, r3, #1
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d017      	beq.n	8003c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	2203      	movs	r2, #3
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d123      	bne.n	8003cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	08da      	lsrs	r2, r3, #3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3208      	adds	r2, #8
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	43db      	mvns	r3, r3
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	4013      	ands	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0203 	and.w	r2, r3, #3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80b4 	beq.w	8003e9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b60      	ldr	r3, [pc, #384]	; (8003eb8 <HAL_GPIO_Init+0x30c>)
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	4a5f      	ldr	r2, [pc, #380]	; (8003eb8 <HAL_GPIO_Init+0x30c>)
 8003d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d40:	6453      	str	r3, [r2, #68]	; 0x44
 8003d42:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <HAL_GPIO_Init+0x30c>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d4e:	4a5b      	ldr	r2, [pc, #364]	; (8003ebc <HAL_GPIO_Init+0x310>)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	3302      	adds	r3, #2
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	220f      	movs	r2, #15
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a52      	ldr	r2, [pc, #328]	; (8003ec0 <HAL_GPIO_Init+0x314>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02b      	beq.n	8003dd2 <HAL_GPIO_Init+0x226>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a51      	ldr	r2, [pc, #324]	; (8003ec4 <HAL_GPIO_Init+0x318>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d025      	beq.n	8003dce <HAL_GPIO_Init+0x222>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a50      	ldr	r2, [pc, #320]	; (8003ec8 <HAL_GPIO_Init+0x31c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01f      	beq.n	8003dca <HAL_GPIO_Init+0x21e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ecc <HAL_GPIO_Init+0x320>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d019      	beq.n	8003dc6 <HAL_GPIO_Init+0x21a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4e      	ldr	r2, [pc, #312]	; (8003ed0 <HAL_GPIO_Init+0x324>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_GPIO_Init+0x216>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4d      	ldr	r2, [pc, #308]	; (8003ed4 <HAL_GPIO_Init+0x328>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00d      	beq.n	8003dbe <HAL_GPIO_Init+0x212>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4c      	ldr	r2, [pc, #304]	; (8003ed8 <HAL_GPIO_Init+0x32c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <HAL_GPIO_Init+0x20e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4b      	ldr	r2, [pc, #300]	; (8003edc <HAL_GPIO_Init+0x330>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d101      	bne.n	8003db6 <HAL_GPIO_Init+0x20a>
 8003db2:	2307      	movs	r3, #7
 8003db4:	e00e      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003db6:	2308      	movs	r3, #8
 8003db8:	e00c      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003dba:	2306      	movs	r3, #6
 8003dbc:	e00a      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003dbe:	2305      	movs	r3, #5
 8003dc0:	e008      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	e006      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e004      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_GPIO_Init+0x228>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	f002 0203 	and.w	r2, r2, #3
 8003dda:	0092      	lsls	r2, r2, #2
 8003ddc:	4093      	lsls	r3, r2
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de4:	4935      	ldr	r1, [pc, #212]	; (8003ebc <HAL_GPIO_Init+0x310>)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df2:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e16:	4a32      	ldr	r2, [pc, #200]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e1c:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e40:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e46:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e94:	4a12      	ldr	r2, [pc, #72]	; (8003ee0 <HAL_GPIO_Init+0x334>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b0f      	cmp	r3, #15
 8003ea4:	f67f ae90 	bls.w	8003bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40013800 	.word	0x40013800
 8003ec0:	40020000 	.word	0x40020000
 8003ec4:	40020400 	.word	0x40020400
 8003ec8:	40020800 	.word	0x40020800
 8003ecc:	40020c00 	.word	0x40020c00
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40021400 	.word	0x40021400
 8003ed8:	40021800 	.word	0x40021800
 8003edc:	40021c00 	.word	0x40021c00
 8003ee0:	40013c00 	.word	0x40013c00

08003ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef4:	787b      	ldrb	r3, [r7, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f00:	e003      	b.n	8003f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	041a      	lsls	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	619a      	str	r2, [r3, #24]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e12b      	b.n	8004182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fe fac6 	bl	80024d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f7c:	f000 fd80 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8003f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4a81      	ldr	r2, [pc, #516]	; (800418c <HAL_I2C_Init+0x274>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d807      	bhi.n	8003f9c <HAL_I2C_Init+0x84>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a80      	ldr	r2, [pc, #512]	; (8004190 <HAL_I2C_Init+0x278>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bf94      	ite	ls
 8003f94:	2301      	movls	r3, #1
 8003f96:	2300      	movhi	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e006      	b.n	8003faa <HAL_I2C_Init+0x92>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a7d      	ldr	r2, [pc, #500]	; (8004194 <HAL_I2C_Init+0x27c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	bf94      	ite	ls
 8003fa4:	2301      	movls	r3, #1
 8003fa6:	2300      	movhi	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0e7      	b.n	8004182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a78      	ldr	r2, [pc, #480]	; (8004198 <HAL_I2C_Init+0x280>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	0c9b      	lsrs	r3, r3, #18
 8003fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a6a      	ldr	r2, [pc, #424]	; (800418c <HAL_I2C_Init+0x274>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d802      	bhi.n	8003fec <HAL_I2C_Init+0xd4>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	e009      	b.n	8004000 <HAL_I2C_Init+0xe8>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ff2:	fb02 f303 	mul.w	r3, r2, r3
 8003ff6:	4a69      	ldr	r2, [pc, #420]	; (800419c <HAL_I2C_Init+0x284>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	099b      	lsrs	r3, r3, #6
 8003ffe:	3301      	adds	r3, #1
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	430b      	orrs	r3, r1
 8004006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	495c      	ldr	r1, [pc, #368]	; (800418c <HAL_I2C_Init+0x274>)
 800401c:	428b      	cmp	r3, r1
 800401e:	d819      	bhi.n	8004054 <HAL_I2C_Init+0x13c>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1e59      	subs	r1, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	fbb1 f3f3 	udiv	r3, r1, r3
 800402e:	1c59      	adds	r1, r3, #1
 8004030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004034:	400b      	ands	r3, r1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_I2C_Init+0x138>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1e59      	subs	r1, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	fbb1 f3f3 	udiv	r3, r1, r3
 8004048:	3301      	adds	r3, #1
 800404a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404e:	e051      	b.n	80040f4 <HAL_I2C_Init+0x1dc>
 8004050:	2304      	movs	r3, #4
 8004052:	e04f      	b.n	80040f4 <HAL_I2C_Init+0x1dc>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d111      	bne.n	8004080 <HAL_I2C_Init+0x168>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1e58      	subs	r0, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	440b      	add	r3, r1
 800406a:	fbb0 f3f3 	udiv	r3, r0, r3
 800406e:	3301      	adds	r3, #1
 8004070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e012      	b.n	80040a6 <HAL_I2C_Init+0x18e>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1e58      	subs	r0, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	0099      	lsls	r1, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	fbb0 f3f3 	udiv	r3, r0, r3
 8004096:	3301      	adds	r3, #1
 8004098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Init+0x196>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e022      	b.n	80040f4 <HAL_I2C_Init+0x1dc>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10e      	bne.n	80040d4 <HAL_I2C_Init+0x1bc>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1e58      	subs	r0, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6859      	ldr	r1, [r3, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	440b      	add	r3, r1
 80040c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d2:	e00f      	b.n	80040f4 <HAL_I2C_Init+0x1dc>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1e58      	subs	r0, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	0099      	lsls	r1, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ea:	3301      	adds	r3, #1
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	6809      	ldr	r1, [r1, #0]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6911      	ldr	r1, [r2, #16]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68d2      	ldr	r2, [r2, #12]
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	430b      	orrs	r3, r1
 8004136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	000186a0 	.word	0x000186a0
 8004190:	001e847f 	.word	0x001e847f
 8004194:	003d08ff 	.word	0x003d08ff
 8004198:	431bde83 	.word	0x431bde83
 800419c:	10624dd3 	.word	0x10624dd3

080041a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e267      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d075      	beq.n	80042aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041be:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d00c      	beq.n	80041e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ca:	4b85      	ldr	r3, [pc, #532]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d112      	bne.n	80041fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4b82      	ldr	r3, [pc, #520]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e2:	d10b      	bne.n	80041fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	4b7e      	ldr	r3, [pc, #504]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05b      	beq.n	80042a8 <HAL_RCC_OscConfig+0x108>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d157      	bne.n	80042a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e242      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d106      	bne.n	8004214 <HAL_RCC_OscConfig+0x74>
 8004206:	4b76      	ldr	r3, [pc, #472]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a75      	ldr	r2, [pc, #468]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e01d      	b.n	8004250 <HAL_RCC_OscConfig+0xb0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x98>
 800421e:	4b70      	ldr	r3, [pc, #448]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a6f      	ldr	r2, [pc, #444]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b6d      	ldr	r3, [pc, #436]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6c      	ldr	r2, [pc, #432]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xb0>
 8004238:	4b69      	ldr	r3, [pc, #420]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a68      	ldr	r2, [pc, #416]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b66      	ldr	r3, [pc, #408]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a65      	ldr	r2, [pc, #404]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fe fd88 	bl	8002d6c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004260:	f7fe fd84 	bl	8002d6c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e207      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0xc0>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe fd74 	bl	8002d6c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe fd70 	bl	8002d6c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1f3      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	4b51      	ldr	r3, [pc, #324]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0xe8>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d063      	beq.n	800437e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b6:	4b4a      	ldr	r3, [pc, #296]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b47      	ldr	r3, [pc, #284]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b44      	ldr	r3, [pc, #272]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b41      	ldr	r3, [pc, #260]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x152>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1c7      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4937      	ldr	r1, [pc, #220]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCC_OscConfig+0x244>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fe fd29 	bl	8002d6c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431e:	f7fe fd25 	bl	8002d6c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1a8      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b28      	ldr	r3, [pc, #160]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4925      	ldr	r1, [pc, #148]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <HAL_RCC_OscConfig+0x244>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe fd08 	bl	8002d6c <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004360:	f7fe fd04 	bl	8002d6c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e187      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d036      	beq.n	80043f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <HAL_RCC_OscConfig+0x248>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fe fce8 	bl	8002d6c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe fce4 	bl	8002d6c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e167      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCC_OscConfig+0x240>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x200>
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_OscConfig+0x248>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fe fcd1 	bl	8002d6c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e00e      	b.n	80043ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fe fccd 	bl	8002d6c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d907      	bls.n	80043ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e150      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	42470000 	.word	0x42470000
 80043e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4b88      	ldr	r3, [pc, #544]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ea      	bne.n	80043ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8097 	beq.w	8004534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b81      	ldr	r3, [pc, #516]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	4b7d      	ldr	r3, [pc, #500]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	4a7c      	ldr	r2, [pc, #496]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	6413      	str	r3, [r2, #64]	; 0x40
 8004426:	4b7a      	ldr	r3, [pc, #488]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b77      	ldr	r3, [pc, #476]	; (8004614 <HAL_RCC_OscConfig+0x474>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b74      	ldr	r3, [pc, #464]	; (8004614 <HAL_RCC_OscConfig+0x474>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a73      	ldr	r2, [pc, #460]	; (8004614 <HAL_RCC_OscConfig+0x474>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fe fc8d 	bl	8002d6c <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fe fc89 	bl	8002d6c <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e10c      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b6a      	ldr	r3, [pc, #424]	; (8004614 <HAL_RCC_OscConfig+0x474>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x2ea>
 800447c:	4b64      	ldr	r3, [pc, #400]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	4a63      	ldr	r2, [pc, #396]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	; 0x70
 8004488:	e01c      	b.n	80044c4 <HAL_RCC_OscConfig+0x324>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x30c>
 8004492:	4b5f      	ldr	r3, [pc, #380]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a5e      	ldr	r2, [pc, #376]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6713      	str	r3, [r2, #112]	; 0x70
 800449e:	4b5c      	ldr	r3, [pc, #368]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a5b      	ldr	r2, [pc, #364]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0x324>
 80044ac:	4b58      	ldr	r3, [pc, #352]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	4a57      	ldr	r2, [pc, #348]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	; 0x70
 80044b8:	4b55      	ldr	r3, [pc, #340]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	4a54      	ldr	r2, [pc, #336]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80044be:	f023 0304 	bic.w	r3, r3, #4
 80044c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fe fc4e 	bl	8002d6c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fe fc4a 	bl	8002d6c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0cb      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	4b49      	ldr	r3, [pc, #292]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ee      	beq.n	80044d4 <HAL_RCC_OscConfig+0x334>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f8:	f7fe fc38 	bl	8002d6c <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fe fc34 	bl	8002d6c <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0b5      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ee      	bne.n	8004500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	4a38      	ldr	r2, [pc, #224]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80a1 	beq.w	8004680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453e:	4b34      	ldr	r3, [pc, #208]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b08      	cmp	r3, #8
 8004548:	d05c      	beq.n	8004604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d141      	bne.n	80045d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <HAL_RCC_OscConfig+0x478>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe fc08 	bl	8002d6c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004560:	f7fe fc04 	bl	8002d6c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e087      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	4b27      	ldr	r3, [pc, #156]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	3b01      	subs	r3, #1
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	491b      	ldr	r1, [pc, #108]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a8:	4b1b      	ldr	r3, [pc, #108]	; (8004618 <HAL_RCC_OscConfig+0x478>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ae:	f7fe fbdd 	bl	8002d6c <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fe fbd9 	bl	8002d6c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e05c      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x416>
 80045d4:	e054      	b.n	8004680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCC_OscConfig+0x478>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fe fbc6 	bl	8002d6c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fe fbc2 	bl	8002d6c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e045      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_RCC_OscConfig+0x470>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x444>
 8004602:	e03d      	b.n	8004680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d107      	bne.n	800461c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e038      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
 8004610:	40023800 	.word	0x40023800
 8004614:	40007000 	.word	0x40007000
 8004618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_RCC_OscConfig+0x4ec>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d028      	beq.n	800467c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d121      	bne.n	800467c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d11a      	bne.n	800467c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004654:	4293      	cmp	r3, r2
 8004656:	d111      	bne.n	800467c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	3b01      	subs	r3, #1
 8004666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d107      	bne.n	800467c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800

08004690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0cc      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b68      	ldr	r3, [pc, #416]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d90c      	bls.n	80046cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b65      	ldr	r3, [pc, #404]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0b8      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e4:	4b59      	ldr	r3, [pc, #356]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a58      	ldr	r2, [pc, #352]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a52      	ldr	r2, [pc, #328]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b50      	ldr	r3, [pc, #320]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	494d      	ldr	r1, [pc, #308]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d044      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d119      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d003      	beq.n	800474e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800474a:	2b03      	cmp	r3, #3
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e06f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e067      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4934      	ldr	r1, [pc, #208]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004780:	f7fe faf4 	bl	8002d6c <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fe faf0 	bl	8002d6c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e04f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d20c      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e032      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4916      	ldr	r1, [pc, #88]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	490e      	ldr	r1, [pc, #56]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004816:	f000 f821 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fa54 	bl	8002ce4 <HAL_InitTick>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023c00 	.word	0x40023c00
 800484c:	40023800 	.word	0x40023800
 8004850:	080eb2bc 	.word	0x080eb2bc
 8004854:	20000010 	.word	0x20000010
 8004858:	20000014 	.word	0x20000014

0800485c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b094      	sub	sp, #80	; 0x50
 8004862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	647b      	str	r3, [r7, #68]	; 0x44
 8004868:	2300      	movs	r3, #0
 800486a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800486c:	2300      	movs	r3, #0
 800486e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004874:	4b79      	ldr	r3, [pc, #484]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d00d      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0x40>
 8004880:	2b08      	cmp	r3, #8
 8004882:	f200 80e1 	bhi.w	8004a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x34>
 800488a:	2b04      	cmp	r3, #4
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x3a>
 800488e:	e0db      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004890:	4b73      	ldr	r3, [pc, #460]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004894:	e0db      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004896:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800489a:	e0d8      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800489c:	4b6f      	ldr	r3, [pc, #444]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a6:	4b6d      	ldr	r3, [pc, #436]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d063      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b2:	4b6a      	ldr	r3, [pc, #424]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	2200      	movs	r2, #0
 80048ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80048bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
 80048c6:	2300      	movs	r3, #0
 80048c8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048ce:	4622      	mov	r2, r4
 80048d0:	462b      	mov	r3, r5
 80048d2:	f04f 0000 	mov.w	r0, #0
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	0159      	lsls	r1, r3, #5
 80048dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e0:	0150      	lsls	r0, r2, #5
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4621      	mov	r1, r4
 80048e8:	1a51      	subs	r1, r2, r1
 80048ea:	6139      	str	r1, [r7, #16]
 80048ec:	4629      	mov	r1, r5
 80048ee:	eb63 0301 	sbc.w	r3, r3, r1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004900:	4659      	mov	r1, fp
 8004902:	018b      	lsls	r3, r1, #6
 8004904:	4651      	mov	r1, sl
 8004906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800490a:	4651      	mov	r1, sl
 800490c:	018a      	lsls	r2, r1, #6
 800490e:	4651      	mov	r1, sl
 8004910:	ebb2 0801 	subs.w	r8, r2, r1
 8004914:	4659      	mov	r1, fp
 8004916:	eb63 0901 	sbc.w	r9, r3, r1
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800492a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800492e:	4690      	mov	r8, r2
 8004930:	4699      	mov	r9, r3
 8004932:	4623      	mov	r3, r4
 8004934:	eb18 0303 	adds.w	r3, r8, r3
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	462b      	mov	r3, r5
 800493c:	eb49 0303 	adc.w	r3, r9, r3
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800494e:	4629      	mov	r1, r5
 8004950:	024b      	lsls	r3, r1, #9
 8004952:	4621      	mov	r1, r4
 8004954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004958:	4621      	mov	r1, r4
 800495a:	024a      	lsls	r2, r1, #9
 800495c:	4610      	mov	r0, r2
 800495e:	4619      	mov	r1, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004962:	2200      	movs	r2, #0
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
 8004966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800496c:	f7fb fc2c 	bl	80001c8 <__aeabi_uldivmod>
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4613      	mov	r3, r2
 8004976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004978:	e058      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	2200      	movs	r2, #0
 8004982:	4618      	mov	r0, r3
 8004984:	4611      	mov	r1, r2
 8004986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800498a:	623b      	str	r3, [r7, #32]
 800498c:	2300      	movs	r3, #0
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
 8004990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	f04f 0000 	mov.w	r0, #0
 800499c:	f04f 0100 	mov.w	r1, #0
 80049a0:	0159      	lsls	r1, r3, #5
 80049a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a6:	0150      	lsls	r0, r2, #5
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4641      	mov	r1, r8
 80049ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80049b2:	4649      	mov	r1, r9
 80049b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049cc:	ebb2 040a 	subs.w	r4, r2, sl
 80049d0:	eb63 050b 	sbc.w	r5, r3, fp
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	00eb      	lsls	r3, r5, #3
 80049de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e2:	00e2      	lsls	r2, r4, #3
 80049e4:	4614      	mov	r4, r2
 80049e6:	461d      	mov	r5, r3
 80049e8:	4643      	mov	r3, r8
 80049ea:	18e3      	adds	r3, r4, r3
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	464b      	mov	r3, r9
 80049f0:	eb45 0303 	adc.w	r3, r5, r3
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a02:	4629      	mov	r1, r5
 8004a04:	028b      	lsls	r3, r1, #10
 8004a06:	4621      	mov	r1, r4
 8004a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	028a      	lsls	r2, r1, #10
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a16:	2200      	movs	r2, #0
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	61fa      	str	r2, [r7, #28]
 8004a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a20:	f7fb fbd2 	bl	80001c8 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	3301      	adds	r3, #1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a46:	e002      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3750      	adds	r7, #80	; 0x50
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	007a1200 	.word	0x007a1200

08004a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000010 	.word	0x20000010

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a84:	f7ff fff0 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0a9b      	lsrs	r3, r3, #10
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4903      	ldr	r1, [pc, #12]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	080eb2cc 	.word	0x080eb2cc

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aac:	f7ff ffdc 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0b5b      	lsrs	r3, r3, #13
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	080eb2cc 	.word	0x080eb2cc

08004ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07b      	b.n	8004bda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d108      	bne.n	8004afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af2:	d009      	beq.n	8004b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	61da      	str	r2, [r3, #28]
 8004afa:	e005      	b.n	8004b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fd1c 	bl	8002560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	ea42 0103 	orr.w	r1, r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0104 	and.w	r1, r3, #4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	f003 0210 	and.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69da      	ldr	r2, [r3, #28]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b088      	sub	sp, #32
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_SPI_Transmit+0x22>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e126      	b.n	8004e52 <HAL_SPI_Transmit+0x270>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c0c:	f7fe f8ae 	bl	8002d6c <HAL_GetTick>
 8004c10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
 8004c24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c26:	e10b      	b.n	8004e40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0x52>
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c38:	e102      	b.n	8004e40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	d10f      	bne.n	8004ca2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d007      	beq.n	8004cc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc8:	d14b      	bne.n	8004d62 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0xf6>
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d13e      	bne.n	8004d56 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	1c9a      	adds	r2, r3, #2
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cfc:	e02b      	b.n	8004d56 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d112      	bne.n	8004d32 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	881a      	ldrh	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d30:	e011      	b.n	8004d56 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d32:	f7fe f81b 	bl	8002d6c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d803      	bhi.n	8004d4a <HAL_SPI_Transmit+0x168>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d102      	bne.n	8004d50 <HAL_SPI_Transmit+0x16e>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d54:	e074      	b.n	8004e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ce      	bne.n	8004cfe <HAL_SPI_Transmit+0x11c>
 8004d60:	e04c      	b.n	8004dfc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Transmit+0x18e>
 8004d6a:	8afb      	ldrh	r3, [r7, #22]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d140      	bne.n	8004df2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	7812      	ldrb	r2, [r2, #0]
 8004d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d96:	e02c      	b.n	8004df2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d113      	bne.n	8004dce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dcc:	e011      	b.n	8004df2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dce:	f7fd ffcd 	bl	8002d6c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d803      	bhi.n	8004de6 <HAL_SPI_Transmit+0x204>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d102      	bne.n	8004dec <HAL_SPI_Transmit+0x20a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df0:	e026      	b.n	8004e40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1cd      	bne.n	8004d98 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f8b3 	bl	8004f6c <SPI_EndRxTxTransaction>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e000      	b.n	8004e40 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e6c:	f7fd ff7e 	bl	8002d6c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	4413      	add	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e7c:	f7fd ff76 	bl	8002d6c <HAL_GetTick>
 8004e80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	015b      	lsls	r3, r3, #5
 8004e88:	0d1b      	lsrs	r3, r3, #20
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e92:	e054      	b.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d050      	beq.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e9c:	f7fd ff66 	bl	8002d6c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d902      	bls.n	8004eb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d13d      	bne.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eca:	d111      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	d004      	beq.n	8004ee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ede:	d107      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef8:	d10f      	bne.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e017      	b.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d19b      	bne.n	8004e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000010 	.word	0x20000010

08004f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f78:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <SPI_EndRxTxTransaction+0x7c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <SPI_EndRxTxTransaction+0x80>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	0d5b      	lsrs	r3, r3, #21
 8004f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f96:	d112      	bne.n	8004fbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff ff5a 	bl	8004e5c <SPI_WaitFlagStateUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e00f      	b.n	8004fde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d0f2      	beq.n	8004fbe <SPI_EndRxTxTransaction+0x52>
 8004fd8:	e000      	b.n	8004fdc <SPI_EndRxTxTransaction+0x70>
        break;
 8004fda:	bf00      	nop
  }

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000010 	.word	0x20000010
 8004fec:	165e9f81 	.word	0x165e9f81

08004ff0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e034      	b.n	8005070 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7fd fc4c 	bl	80028b8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3308      	adds	r3, #8
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f001 ffe6 	bl	8006ffc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	461a      	mov	r2, r3
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	f002 f830 	bl	80070a0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6858      	ldr	r0, [r3, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	f002 f865 	bl	800711c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	6892      	ldr	r2, [r2, #8]
 8005066:	f041 0101 	orr.w	r1, r1, #1
 800506a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e041      	b.n	800510e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fd faa6 	bl	80025f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f000 fbb2 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04e      	b.n	80051ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a23      	ldr	r2, [pc, #140]	; (80051dc <HAL_TIM_Base_Start_IT+0xc4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d022      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d01d      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d018      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1e      	ldr	r2, [pc, #120]	; (80051e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1b      	ldr	r2, [pc, #108]	; (80051ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a19      	ldr	r2, [pc, #100]	; (80051f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d111      	bne.n	80051bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d010      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ba:	e007      	b.n	80051cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	40010400 	.word	0x40010400
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40001800 	.word	0x40001800

080051f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e041      	b.n	800528e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f839 	bl	8005296 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 faf2 	bl	8005820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d122      	bne.n	8005306 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d11b      	bne.n	8005306 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0202 	mvn.w	r2, #2
 80052d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa78 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 80052f2:	e005      	b.n	8005300 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fa6a 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fa7b 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d122      	bne.n	800535a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b04      	cmp	r3, #4
 8005320:	d11b      	bne.n	800535a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f06f 0204 	mvn.w	r2, #4
 800532a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa4e 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 8005346:	e005      	b.n	8005354 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fa40 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa51 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b08      	cmp	r3, #8
 8005366:	d122      	bne.n	80053ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b08      	cmp	r3, #8
 8005374:	d11b      	bne.n	80053ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f06f 0208 	mvn.w	r2, #8
 800537e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2204      	movs	r2, #4
 8005384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fa24 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 800539a:	e005      	b.n	80053a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 fa16 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa27 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d122      	bne.n	8005402 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d11b      	bne.n	8005402 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f06f 0210 	mvn.w	r2, #16
 80053d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2208      	movs	r2, #8
 80053d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9fa 	bl	80057e2 <HAL_TIM_IC_CaptureCallback>
 80053ee:	e005      	b.n	80053fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9ec 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f9fd 	bl	80057f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10e      	bne.n	800542e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0201 	mvn.w	r2, #1
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fc ff35 	bl	8002298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d10e      	bne.n	800545a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b80      	cmp	r3, #128	; 0x80
 8005448:	d107      	bne.n	800545a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fd53 	bl	8005f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d10e      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f9c2 	bl	800580a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b20      	cmp	r3, #32
 8005492:	d10e      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d107      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f06f 0220 	mvn.w	r2, #32
 80054aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fd1d 	bl	8005eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e0ae      	b.n	8005638 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	f200 809f 	bhi.w	8005628 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005629 	.word	0x08005629
 80054f8:	08005629 	.word	0x08005629
 80054fc:	08005629 	.word	0x08005629
 8005500:	08005565 	.word	0x08005565
 8005504:	08005629 	.word	0x08005629
 8005508:	08005629 	.word	0x08005629
 800550c:	08005629 	.word	0x08005629
 8005510:	080055a7 	.word	0x080055a7
 8005514:	08005629 	.word	0x08005629
 8005518:	08005629 	.word	0x08005629
 800551c:	08005629 	.word	0x08005629
 8005520:	080055e7 	.word	0x080055e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68b9      	ldr	r1, [r7, #8]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fa18 	bl	8005960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0208 	orr.w	r2, r2, #8
 800553e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0204 	bic.w	r2, r2, #4
 800554e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6999      	ldr	r1, [r3, #24]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	619a      	str	r2, [r3, #24]
      break;
 8005562:	e064      	b.n	800562e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fa68 	bl	8005a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800557e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6999      	ldr	r1, [r3, #24]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	021a      	lsls	r2, r3, #8
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	619a      	str	r2, [r3, #24]
      break;
 80055a4:	e043      	b.n	800562e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fabd 	bl	8005b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69da      	ldr	r2, [r3, #28]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0208 	orr.w	r2, r2, #8
 80055c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0204 	bic.w	r2, r2, #4
 80055d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69d9      	ldr	r1, [r3, #28]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	61da      	str	r2, [r3, #28]
      break;
 80055e4:	e023      	b.n	800562e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fb11 	bl	8005c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69d9      	ldr	r1, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	021a      	lsls	r2, r3, #8
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	61da      	str	r2, [r3, #28]
      break;
 8005626:	e002      	b.n	800562e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	75fb      	strb	r3, [r7, #23]
      break;
 800562c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005636:	7dfb      	ldrb	r3, [r7, #23]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_TIM_ConfigClockSource+0x1c>
 8005658:	2302      	movs	r3, #2
 800565a:	e0b4      	b.n	80057c6 <HAL_TIM_ConfigClockSource+0x186>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800567a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005694:	d03e      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0xd4>
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569a:	f200 8087 	bhi.w	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a2:	f000 8086 	beq.w	80057b2 <HAL_TIM_ConfigClockSource+0x172>
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056aa:	d87f      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b70      	cmp	r3, #112	; 0x70
 80056ae:	d01a      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0xa6>
 80056b0:	2b70      	cmp	r3, #112	; 0x70
 80056b2:	d87b      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b60      	cmp	r3, #96	; 0x60
 80056b6:	d050      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x11a>
 80056b8:	2b60      	cmp	r3, #96	; 0x60
 80056ba:	d877      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b50      	cmp	r3, #80	; 0x50
 80056be:	d03c      	beq.n	800573a <HAL_TIM_ConfigClockSource+0xfa>
 80056c0:	2b50      	cmp	r3, #80	; 0x50
 80056c2:	d873      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d058      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x13a>
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d86f      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b30      	cmp	r3, #48	; 0x30
 80056ce:	d064      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056d0:	2b30      	cmp	r3, #48	; 0x30
 80056d2:	d86b      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d060      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d867      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d05c      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d05a      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056e4:	e062      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6899      	ldr	r1, [r3, #8]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f000 fb5d 	bl	8005db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	609a      	str	r2, [r3, #8]
      break;
 8005712:	e04f      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6818      	ldr	r0, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6899      	ldr	r1, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f000 fb46 	bl	8005db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005736:	609a      	str	r2, [r3, #8]
      break;
 8005738:	e03c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	461a      	mov	r2, r3
 8005748:	f000 faba 	bl	8005cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2150      	movs	r1, #80	; 0x50
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fb13 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 8005758:	e02c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	461a      	mov	r2, r3
 8005768:	f000 fad9 	bl	8005d1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2160      	movs	r1, #96	; 0x60
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb03 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 8005778:	e01c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	461a      	mov	r2, r3
 8005788:	f000 fa9a 	bl	8005cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	4618      	mov	r0, r3
 8005794:	f000 faf3 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 8005798:	e00c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4619      	mov	r1, r3
 80057a4:	4610      	mov	r0, r2
 80057a6:	f000 faea 	bl	8005d7e <TIM_ITRx_SetConfig>
      break;
 80057aa:	e003      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
      break;
 80057b0:	e000      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a40      	ldr	r2, [pc, #256]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3d      	ldr	r2, [pc, #244]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3c      	ldr	r2, [pc, #240]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3b      	ldr	r2, [pc, #236]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3a      	ldr	r2, [pc, #232]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2f      	ldr	r2, [pc, #188]	; (8005934 <TIM_Base_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d02b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d027      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <TIM_Base_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d023      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2b      	ldr	r2, [pc, #172]	; (800593c <TIM_Base_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2a      	ldr	r2, [pc, #168]	; (8005940 <TIM_Base_SetConfig+0x120>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a29      	ldr	r2, [pc, #164]	; (8005944 <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a28      	ldr	r2, [pc, #160]	; (8005948 <TIM_Base_SetConfig+0x128>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a27      	ldr	r2, [pc, #156]	; (800594c <TIM_Base_SetConfig+0x12c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a26      	ldr	r2, [pc, #152]	; (8005950 <TIM_Base_SetConfig+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a25      	ldr	r2, [pc, #148]	; (8005954 <TIM_Base_SetConfig+0x134>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a24      	ldr	r2, [pc, #144]	; (8005958 <TIM_Base_SetConfig+0x138>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a23      	ldr	r2, [pc, #140]	; (800595c <TIM_Base_SetConfig+0x13c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <TIM_Base_SetConfig+0x114>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <TIM_Base_SetConfig+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d103      	bne.n	8005920 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	615a      	str	r2, [r3, #20]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40010000 	.word	0x40010000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800
 8005940:	40000c00 	.word	0x40000c00
 8005944:	40010400 	.word	0x40010400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	40001800 	.word	0x40001800
 8005958:	40001c00 	.word	0x40001c00
 800595c:	40002000 	.word	0x40002000

08005960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f023 0302 	bic.w	r3, r3, #2
 80059a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <TIM_OC1_SetConfig+0xd8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d003      	beq.n	80059c4 <TIM_OC1_SetConfig+0x64>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <TIM_OC1_SetConfig+0xdc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d10c      	bne.n	80059de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f023 0308 	bic.w	r3, r3, #8
 80059ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 0304 	bic.w	r3, r3, #4
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <TIM_OC1_SetConfig+0xd8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC1_SetConfig+0x8e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a14      	ldr	r2, [pc, #80]	; (8005a3c <TIM_OC1_SetConfig+0xdc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d111      	bne.n	8005a12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	bf00      	nop
 8005a2e:	371c      	adds	r7, #28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f023 0210 	bic.w	r2, r3, #16
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0320 	bic.w	r3, r3, #32
 8005a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a22      	ldr	r2, [pc, #136]	; (8005b24 <TIM_OC2_SetConfig+0xe4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_OC2_SetConfig+0x68>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <TIM_OC2_SetConfig+0xe8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d10d      	bne.n	8005ac4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <TIM_OC2_SetConfig+0xe4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC2_SetConfig+0x94>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <TIM_OC2_SetConfig+0xe8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d113      	bne.n	8005afc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400

08005b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a21      	ldr	r2, [pc, #132]	; (8005c0c <TIM_OC3_SetConfig+0xe0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_OC3_SetConfig+0x66>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a20      	ldr	r2, [pc, #128]	; (8005c10 <TIM_OC3_SetConfig+0xe4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10d      	bne.n	8005bae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <TIM_OC3_SetConfig+0xe0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC3_SetConfig+0x92>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <TIM_OC3_SetConfig+0xe4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d113      	bne.n	8005be6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	621a      	str	r2, [r3, #32]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40010400 	.word	0x40010400

08005c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <TIM_OC4_SetConfig+0xa4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_OC4_SetConfig+0x68>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <TIM_OC4_SetConfig+0xa8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d109      	bne.n	8005c90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	019b      	lsls	r3, r3, #6
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40010400 	.word	0x40010400

08005cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 030a 	bic.w	r3, r3, #10
 8005cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b087      	sub	sp, #28
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f023 0210 	bic.w	r2, r3, #16
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	031b      	lsls	r3, r3, #12
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f043 0307 	orr.w	r3, r3, #7
 8005da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	609a      	str	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	021a      	lsls	r2, r3, #8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	609a      	str	r2, [r3, #8]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e05a      	b.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d01d      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1b      	ldr	r2, [pc, #108]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a18      	ldr	r2, [pc, #96]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d10c      	bne.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40010400 	.word	0x40010400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40001800 	.word	0x40001800

08005eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e03f      	b.n	8005fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fc fbe4 	bl	8002708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2224      	movs	r2, #36	; 0x24
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fddb 	bl	8006b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b08a      	sub	sp, #40	; 0x28
 8005fb2:	af02      	add	r7, sp, #8
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d17c      	bne.n	80060c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_UART_Transmit+0x2c>
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e075      	b.n	80060ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_UART_Transmit+0x3e>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e06e      	b.n	80060ca <HAL_UART_Transmit+0x11c>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2221      	movs	r2, #33	; 0x21
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006002:	f7fc feb3 	bl	8002d6c <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	88fa      	ldrh	r2, [r7, #6]
 8006012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800601c:	d108      	bne.n	8006030 <HAL_UART_Transmit+0x82>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	e003      	b.n	8006038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006040:	e02a      	b.n	8006098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fb1f 	bl	8006690 <UART_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e036      	b.n	80060ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10b      	bne.n	800607a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	3302      	adds	r3, #2
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e007      	b.n	800608a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	781a      	ldrb	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1cf      	bne.n	8006042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	2140      	movs	r1, #64	; 0x40
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 faef 	bl	8006690 <UART_WaitOnFlagUntilTimeout>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e006      	b.n	80060ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	4613      	mov	r3, r2
 80060de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d11d      	bne.n	8006128 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_UART_Receive_IT+0x26>
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e016      	b.n	800612a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_UART_Receive_IT+0x38>
 8006106:	2302      	movs	r3, #2
 8006108:	e00f      	b.n	800612a <HAL_UART_Receive_IT+0x58>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	461a      	mov	r2, r3
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fb24 	bl	800676c <UART_Start_Receive_IT>
 8006124:	4603      	mov	r3, r0
 8006126:	e000      	b.n	800612a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006128:	2302      	movs	r3, #2
  }
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
	...

08006134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b0ba      	sub	sp, #232	; 0xe8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800615a:	2300      	movs	r3, #0
 800615c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10f      	bne.n	800619a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b00      	cmp	r3, #0
 8006184:	d009      	beq.n	800619a <HAL_UART_IRQHandler+0x66>
 8006186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fc03 	bl	800699e <UART_Receive_IT>
      return;
 8006198:	e256      	b.n	8006648 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800619a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 80de 	beq.w	8006360 <HAL_UART_IRQHandler+0x22c>
 80061a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80d1 	beq.w	8006360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00b      	beq.n	80061e2 <HAL_UART_IRQHandler+0xae>
 80061ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f043 0201 	orr.w	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00b      	beq.n	8006206 <HAL_UART_IRQHandler+0xd2>
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f043 0202 	orr.w	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00b      	beq.n	800622a <HAL_UART_IRQHandler+0xf6>
 8006212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d011      	beq.n	800625a <HAL_UART_IRQHandler+0x126>
 8006236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d005      	beq.n	800625a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f043 0208 	orr.w	r2, r3, #8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 81ed 	beq.w	800663e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_UART_IRQHandler+0x14e>
 8006270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fb8e 	bl	800699e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d103      	bne.n	80062ae <HAL_UART_IRQHandler+0x17a>
 80062a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d04f      	beq.n	800634e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa96 	bl	80067e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d141      	bne.n	8006346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3314      	adds	r3, #20
 80062ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1d9      	bne.n	80062c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	2b00      	cmp	r3, #0
 8006314:	d013      	beq.n	800633e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	4a7d      	ldr	r2, [pc, #500]	; (8006510 <HAL_UART_IRQHandler+0x3dc>)
 800631c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	4618      	mov	r0, r3
 8006324:	f7fd f9e4 	bl	80036f0 <HAL_DMA_Abort_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006338:	4610      	mov	r0, r2
 800633a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633c:	e00e      	b.n	800635c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f990 	bl	8006664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	e00a      	b.n	800635c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f98c 	bl	8006664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800634c:	e006      	b.n	800635c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f988 	bl	8006664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800635a:	e170      	b.n	800663e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635c:	bf00      	nop
    return;
 800635e:	e16e      	b.n	800663e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 814a 	bne.w	80065fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800636a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8143 	beq.w	80065fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 813c 	beq.w	80065fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	f040 80b4 	bne.w	8006514 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8140 	beq.w	8006642 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063ca:	429a      	cmp	r2, r3
 80063cc:	f080 8139 	bcs.w	8006642 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e2:	f000 8088 	beq.w	80064f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	330c      	adds	r3, #12
 800640e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800641e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800642a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1d9      	bne.n	80063e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3314      	adds	r3, #20
 8006438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800645a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800645e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e1      	bne.n	8006432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3314      	adds	r3, #20
 8006474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800647e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3314      	adds	r3, #20
 800648e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006492:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e3      	bne.n	800646e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c6:	f023 0310 	bic.w	r3, r3, #16
 80064ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80064da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e3      	bne.n	80064b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fd f88d 	bl	8003610 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064fe:	b29b      	uxth	r3, r3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f8b6 	bl	8006678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800650c:	e099      	b.n	8006642 <HAL_UART_IRQHandler+0x50e>
 800650e:	bf00      	nop
 8006510:	080068a7 	.word	0x080068a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800651c:	b29b      	uxth	r3, r3
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 808b 	beq.w	8006646 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8086 	beq.w	8006646 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800655e:	647a      	str	r2, [r7, #68]	; 0x44
 8006560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800656c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e3      	bne.n	800653a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3314      	adds	r3, #20
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	623b      	str	r3, [r7, #32]
   return(result);
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3314      	adds	r3, #20
 8006592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006596:	633a      	str	r2, [r7, #48]	; 0x30
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800659c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e3      	bne.n	8006572 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065dc:	61fa      	str	r2, [r7, #28]
 80065de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	69b9      	ldr	r1, [r7, #24]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e3      	bne.n	80065b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f83e 	bl	8006678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065fc:	e023      	b.n	8006646 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_UART_IRQHandler+0x4ea>
 800660a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f959 	bl	80068ce <UART_Transmit_IT>
    return;
 800661c:	e014      	b.n	8006648 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <HAL_UART_IRQHandler+0x514>
 800662a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f999 	bl	800696e <UART_EndTransmit_IT>
    return;
 800663c:	e004      	b.n	8006648 <HAL_UART_IRQHandler+0x514>
    return;
 800663e:	bf00      	nop
 8006640:	e002      	b.n	8006648 <HAL_UART_IRQHandler+0x514>
      return;
 8006642:	bf00      	nop
 8006644:	e000      	b.n	8006648 <HAL_UART_IRQHandler+0x514>
      return;
 8006646:	bf00      	nop
  }
}
 8006648:	37e8      	adds	r7, #232	; 0xe8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop

08006650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b090      	sub	sp, #64	; 0x40
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a0:	e050      	b.n	8006744 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a8:	d04c      	beq.n	8006744 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80066b0:	f7fc fb5c 	bl	8002d6c <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066bc:	429a      	cmp	r2, r3
 80066be:	d241      	bcs.n	8006744 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	330c      	adds	r3, #12
 80066de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e0:	637a      	str	r2, [r7, #52]	; 0x34
 80066e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3314      	adds	r3, #20
 80066fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	613b      	str	r3, [r7, #16]
   return(result);
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	63bb      	str	r3, [r7, #56]	; 0x38
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3314      	adds	r3, #20
 8006712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006714:	623a      	str	r2, [r7, #32]
 8006716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	69f9      	ldr	r1, [r7, #28]
 800671a:	6a3a      	ldr	r2, [r7, #32]
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	61bb      	str	r3, [r7, #24]
   return(result);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e5      	bne.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e00f      	b.n	8006764 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4013      	ands	r3, r2
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	429a      	cmp	r2, r3
 8006752:	bf0c      	ite	eq
 8006754:	2301      	moveq	r3, #1
 8006756:	2300      	movne	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	429a      	cmp	r2, r3
 8006760:	d09f      	beq.n	80066a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3740      	adds	r7, #64	; 0x40
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	88fa      	ldrh	r2, [r7, #6]
 8006784:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2222      	movs	r2, #34	; 0x22
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0220 	orr.w	r2, r2, #32
 80067d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b095      	sub	sp, #84	; 0x54
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	330c      	adds	r3, #12
 8006806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006808:	643a      	str	r2, [r7, #64]	; 0x40
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800680e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e5      	bne.n	80067e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3314      	adds	r3, #20
 8006822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	61fb      	str	r3, [r7, #28]
   return(result);
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	64bb      	str	r3, [r7, #72]	; 0x48
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3314      	adds	r3, #20
 800683a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800683c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e5      	bne.n	800681c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	2b01      	cmp	r3, #1
 8006856:	d119      	bne.n	800688c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	330c      	adds	r3, #12
 800685e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	e853 3f00 	ldrex	r3, [r3]
 8006866:	60bb      	str	r3, [r7, #8]
   return(result);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f023 0310 	bic.w	r3, r3, #16
 800686e:	647b      	str	r3, [r7, #68]	; 0x44
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006878:	61ba      	str	r2, [r7, #24]
 800687a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687c:	6979      	ldr	r1, [r7, #20]
 800687e:	69ba      	ldr	r2, [r7, #24]
 8006880:	e841 2300 	strex	r3, r2, [r1]
 8006884:	613b      	str	r3, [r7, #16]
   return(result);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e5      	bne.n	8006858 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
}
 800689a:	bf00      	nop
 800689c:	3754      	adds	r7, #84	; 0x54
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fecf 	bl	8006664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c6:	bf00      	nop
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b21      	cmp	r3, #33	; 0x21
 80068e0:	d13e      	bne.n	8006960 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	d114      	bne.n	8006916 <UART_Transmit_IT+0x48>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d110      	bne.n	8006916 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006908:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	1c9a      	adds	r2, r3, #2
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	621a      	str	r2, [r3, #32]
 8006914:	e008      	b.n	8006928 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	1c59      	adds	r1, r3, #1
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6211      	str	r1, [r2, #32]
 8006920:	781a      	ldrb	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800692c:	b29b      	uxth	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	b29b      	uxth	r3, r3
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4619      	mov	r1, r3
 8006936:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10f      	bne.n	800695c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800694a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	e000      	b.n	8006962 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
  }
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006984:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff fe5e 	bl	8006650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b08c      	sub	sp, #48	; 0x30
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b22      	cmp	r3, #34	; 0x22
 80069b0:	f040 80ab 	bne.w	8006b0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069bc:	d117      	bne.n	80069ee <UART_Receive_IT+0x50>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d113      	bne.n	80069ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069dc:	b29a      	uxth	r2, r3
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	1c9a      	adds	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	629a      	str	r2, [r3, #40]	; 0x28
 80069ec:	e026      	b.n	8006a3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a00:	d007      	beq.n	8006a12 <UART_Receive_IT+0x74>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <UART_Receive_IT+0x82>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e008      	b.n	8006a32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d15a      	bne.n	8006b06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0220 	bic.w	r2, r2, #32
 8006a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d135      	bne.n	8006afc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f023 0310 	bic.w	r3, r3, #16
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab6:	623a      	str	r2, [r7, #32]
 8006ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	69f9      	ldr	r1, [r7, #28]
 8006abc:	6a3a      	ldr	r2, [r7, #32]
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e5      	bne.n	8006a96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d10a      	bne.n	8006aee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fdbf 	bl	8006678 <HAL_UARTEx_RxEventCallback>
 8006afa:	e002      	b.n	8006b02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7fc f833 	bl	8002b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e002      	b.n	8006b0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	e000      	b.n	8006b0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b0a:	2302      	movs	r3, #2
  }
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3730      	adds	r7, #48	; 0x30
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b18:	b0c0      	sub	sp, #256	; 0x100
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	68d9      	ldr	r1, [r3, #12]
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	ea40 0301 	orr.w	r3, r0, r1
 8006b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b6c:	f021 010c 	bic.w	r1, r1, #12
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	6999      	ldr	r1, [r3, #24]
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	ea40 0301 	orr.w	r3, r0, r1
 8006b9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b8f      	ldr	r3, [pc, #572]	; (8006de0 <UART_SetConfig+0x2cc>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d005      	beq.n	8006bb4 <UART_SetConfig+0xa0>
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b8d      	ldr	r3, [pc, #564]	; (8006de4 <UART_SetConfig+0x2d0>)
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d104      	bne.n	8006bbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bb4:	f7fd ff78 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 8006bb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bbc:	e003      	b.n	8006bc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bbe:	f7fd ff5f 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8006bc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	f040 810c 	bne.w	8006dec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006be2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006be6:	4622      	mov	r2, r4
 8006be8:	462b      	mov	r3, r5
 8006bea:	1891      	adds	r1, r2, r2
 8006bec:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bee:	415b      	adcs	r3, r3
 8006bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	eb12 0801 	adds.w	r8, r2, r1
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	eb43 0901 	adc.w	r9, r3, r1
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c16:	4690      	mov	r8, r2
 8006c18:	4699      	mov	r9, r3
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	eb18 0303 	adds.w	r3, r8, r3
 8006c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c24:	462b      	mov	r3, r5
 8006c26:	eb49 0303 	adc.w	r3, r9, r3
 8006c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c42:	460b      	mov	r3, r1
 8006c44:	18db      	adds	r3, r3, r3
 8006c46:	653b      	str	r3, [r7, #80]	; 0x50
 8006c48:	4613      	mov	r3, r2
 8006c4a:	eb42 0303 	adc.w	r3, r2, r3
 8006c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c58:	f7f9 fab6 	bl	80001c8 <__aeabi_uldivmod>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4b61      	ldr	r3, [pc, #388]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006c62:	fba3 2302 	umull	r2, r3, r3, r2
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	011c      	lsls	r4, r3, #4
 8006c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	1891      	adds	r1, r2, r2
 8006c82:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c84:	415b      	adcs	r3, r3
 8006c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006c92:	4649      	mov	r1, r9
 8006c94:	eb43 0b01 	adc.w	fp, r3, r1
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ca4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cac:	4692      	mov	sl, r2
 8006cae:	469b      	mov	fp, r3
 8006cb0:	4643      	mov	r3, r8
 8006cb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	eb4b 0303 	adc.w	r3, fp, r3
 8006cc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	18db      	adds	r3, r3, r3
 8006cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8006cde:	4613      	mov	r3, r2
 8006ce0:	eb42 0303 	adc.w	r3, r2, r3
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cee:	f7f9 fa6b 	bl	80001c8 <__aeabi_uldivmod>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	2264      	movs	r2, #100	; 0x64
 8006d02:	fb02 f303 	mul.w	r3, r2, r3
 8006d06:	1acb      	subs	r3, r1, r3
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d0e:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006d10:	fba3 2302 	umull	r2, r3, r3, r2
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d1c:	441c      	add	r4, r3
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d40:	4641      	mov	r1, r8
 8006d42:	1851      	adds	r1, r2, r1
 8006d44:	6339      	str	r1, [r7, #48]	; 0x30
 8006d46:	4649      	mov	r1, r9
 8006d48:	414b      	adcs	r3, r1
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d58:	4659      	mov	r1, fp
 8006d5a:	00cb      	lsls	r3, r1, #3
 8006d5c:	4651      	mov	r1, sl
 8006d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d62:	4651      	mov	r1, sl
 8006d64:	00ca      	lsls	r2, r1, #3
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	189b      	adds	r3, r3, r2
 8006d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d74:	464b      	mov	r3, r9
 8006d76:	460a      	mov	r2, r1
 8006d78:	eb42 0303 	adc.w	r3, r2, r3
 8006d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d94:	460b      	mov	r3, r1
 8006d96:	18db      	adds	r3, r3, r3
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	eb42 0303 	adc.w	r3, r2, r3
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006da6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006daa:	f7f9 fa0d 	bl	80001c8 <__aeabi_uldivmod>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <UART_SetConfig+0x2d4>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	f003 0207 	and.w	r2, r3, #7
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4422      	add	r2, r4
 8006dda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ddc:	e106      	b.n	8006fec <UART_SetConfig+0x4d8>
 8006dde:	bf00      	nop
 8006de0:	40011000 	.word	0x40011000
 8006de4:	40011400 	.word	0x40011400
 8006de8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006df6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dfe:	4642      	mov	r2, r8
 8006e00:	464b      	mov	r3, r9
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	6239      	str	r1, [r7, #32]
 8006e06:	415b      	adcs	r3, r3
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e0e:	4641      	mov	r1, r8
 8006e10:	1854      	adds	r4, r2, r1
 8006e12:	4649      	mov	r1, r9
 8006e14:	eb43 0501 	adc.w	r5, r3, r1
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	00eb      	lsls	r3, r5, #3
 8006e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e26:	00e2      	lsls	r2, r4, #3
 8006e28:	4614      	mov	r4, r2
 8006e2a:	461d      	mov	r5, r3
 8006e2c:	4643      	mov	r3, r8
 8006e2e:	18e3      	adds	r3, r4, r3
 8006e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e34:	464b      	mov	r3, r9
 8006e36:	eb45 0303 	adc.w	r3, r5, r3
 8006e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	008b      	lsls	r3, r1, #2
 8006e5e:	4621      	mov	r1, r4
 8006e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e64:	4621      	mov	r1, r4
 8006e66:	008a      	lsls	r2, r1, #2
 8006e68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e6c:	f7f9 f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4b60      	ldr	r3, [pc, #384]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006e76:	fba3 2302 	umull	r2, r3, r3, r2
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	011c      	lsls	r4, r3, #4
 8006e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e90:	4642      	mov	r2, r8
 8006e92:	464b      	mov	r3, r9
 8006e94:	1891      	adds	r1, r2, r2
 8006e96:	61b9      	str	r1, [r7, #24]
 8006e98:	415b      	adcs	r3, r3
 8006e9a:	61fb      	str	r3, [r7, #28]
 8006e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	1851      	adds	r1, r2, r1
 8006ea4:	6139      	str	r1, [r7, #16]
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	414b      	adcs	r3, r1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb8:	4659      	mov	r1, fp
 8006eba:	00cb      	lsls	r3, r1, #3
 8006ebc:	4651      	mov	r1, sl
 8006ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	00ca      	lsls	r2, r1, #3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4642      	mov	r2, r8
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	460a      	mov	r2, r1
 8006ed8:	eb42 0303 	adc.w	r3, r2, r3
 8006edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ef8:	4649      	mov	r1, r9
 8006efa:	008b      	lsls	r3, r1, #2
 8006efc:	4641      	mov	r1, r8
 8006efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f02:	4641      	mov	r1, r8
 8006f04:	008a      	lsls	r2, r1, #2
 8006f06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f0a:	f7f9 f95d 	bl	80001c8 <__aeabi_uldivmod>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	4b38      	ldr	r3, [pc, #224]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006f16:	fba3 2301 	umull	r2, r3, r3, r1
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	2264      	movs	r2, #100	; 0x64
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	1acb      	subs	r3, r1, r3
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	3332      	adds	r3, #50	; 0x32
 8006f28:	4a33      	ldr	r2, [pc, #204]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f34:	441c      	add	r4, r3
 8006f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	673b      	str	r3, [r7, #112]	; 0x70
 8006f3e:	677a      	str	r2, [r7, #116]	; 0x74
 8006f40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	1891      	adds	r1, r2, r2
 8006f4a:	60b9      	str	r1, [r7, #8]
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f54:	4641      	mov	r1, r8
 8006f56:	1851      	adds	r1, r2, r1
 8006f58:	6039      	str	r1, [r7, #0]
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	414b      	adcs	r3, r1
 8006f5e:	607b      	str	r3, [r7, #4]
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	00cb      	lsls	r3, r1, #3
 8006f70:	4651      	mov	r1, sl
 8006f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f76:	4651      	mov	r1, sl
 8006f78:	00ca      	lsls	r2, r1, #3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4642      	mov	r2, r8
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f86:	464b      	mov	r3, r9
 8006f88:	460a      	mov	r2, r1
 8006f8a:	eb42 0303 	adc.w	r3, r2, r3
 8006f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9a:	667a      	str	r2, [r7, #100]	; 0x64
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fa8:	4649      	mov	r1, r9
 8006faa:	008b      	lsls	r3, r1, #2
 8006fac:	4641      	mov	r1, r8
 8006fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb2:	4641      	mov	r1, r8
 8006fb4:	008a      	lsls	r2, r1, #2
 8006fb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fba:	f7f9 f905 	bl	80001c8 <__aeabi_uldivmod>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	2164      	movs	r1, #100	; 0x64
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	3332      	adds	r3, #50	; 0x32
 8006fd6:	4a08      	ldr	r2, [pc, #32]	; (8006ff8 <UART_SetConfig+0x4e4>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4422      	add	r2, r4
 8006fea:	609a      	str	r2, [r3, #8]
}
 8006fec:	bf00      	nop
 8006fee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff8:	51eb851f 	.word	0x51eb851f

08006ffc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007014:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4b20      	ldr	r3, [pc, #128]	; (800709c <FSMC_NORSRAM_Init+0xa0>)
 800701a:	4013      	ands	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007026:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800702c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007032:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007038:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800703e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007044:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800704a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007050:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007056:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800705c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007062:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007068:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d103      	bne.n	8007080 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800707e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68f9      	ldr	r1, [r7, #12]
 8007088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	fff00080 	.word	0xfff00080

080070a0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ba:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070c2:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070ce:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80070d6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80070de:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80070e8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	3b02      	subs	r3, #2
 80070f0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80070f2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80070f8:	4313      	orrs	r3, r2
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007134:	d122      	bne.n	800717c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4b15      	ldr	r3, [pc, #84]	; (8007198 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007144:	4013      	ands	r3, r2
 8007146:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007152:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800715a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007162:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007168:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6979      	ldr	r1, [r7, #20]
 8007176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800717a:	e005      	b.n	8007188 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	cff00000 	.word	0xcff00000

0800719c <__itoa>:
 800719c:	1e93      	subs	r3, r2, #2
 800719e:	2b22      	cmp	r3, #34	; 0x22
 80071a0:	b510      	push	{r4, lr}
 80071a2:	460c      	mov	r4, r1
 80071a4:	d904      	bls.n	80071b0 <__itoa+0x14>
 80071a6:	2300      	movs	r3, #0
 80071a8:	700b      	strb	r3, [r1, #0]
 80071aa:	461c      	mov	r4, r3
 80071ac:	4620      	mov	r0, r4
 80071ae:	bd10      	pop	{r4, pc}
 80071b0:	2a0a      	cmp	r2, #10
 80071b2:	d109      	bne.n	80071c8 <__itoa+0x2c>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	da07      	bge.n	80071c8 <__itoa+0x2c>
 80071b8:	232d      	movs	r3, #45	; 0x2d
 80071ba:	700b      	strb	r3, [r1, #0]
 80071bc:	4240      	negs	r0, r0
 80071be:	2101      	movs	r1, #1
 80071c0:	4421      	add	r1, r4
 80071c2:	f000 f805 	bl	80071d0 <__utoa>
 80071c6:	e7f1      	b.n	80071ac <__itoa+0x10>
 80071c8:	2100      	movs	r1, #0
 80071ca:	e7f9      	b.n	80071c0 <__itoa+0x24>

080071cc <itoa>:
 80071cc:	f7ff bfe6 	b.w	800719c <__itoa>

080071d0 <__utoa>:
 80071d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d2:	4c1f      	ldr	r4, [pc, #124]	; (8007250 <__utoa+0x80>)
 80071d4:	b08b      	sub	sp, #44	; 0x2c
 80071d6:	4605      	mov	r5, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	466e      	mov	r6, sp
 80071dc:	f104 0c20 	add.w	ip, r4, #32
 80071e0:	6820      	ldr	r0, [r4, #0]
 80071e2:	6861      	ldr	r1, [r4, #4]
 80071e4:	4637      	mov	r7, r6
 80071e6:	c703      	stmia	r7!, {r0, r1}
 80071e8:	3408      	adds	r4, #8
 80071ea:	4564      	cmp	r4, ip
 80071ec:	463e      	mov	r6, r7
 80071ee:	d1f7      	bne.n	80071e0 <__utoa+0x10>
 80071f0:	7921      	ldrb	r1, [r4, #4]
 80071f2:	7139      	strb	r1, [r7, #4]
 80071f4:	1e91      	subs	r1, r2, #2
 80071f6:	6820      	ldr	r0, [r4, #0]
 80071f8:	6038      	str	r0, [r7, #0]
 80071fa:	2922      	cmp	r1, #34	; 0x22
 80071fc:	f04f 0100 	mov.w	r1, #0
 8007200:	d904      	bls.n	800720c <__utoa+0x3c>
 8007202:	7019      	strb	r1, [r3, #0]
 8007204:	460b      	mov	r3, r1
 8007206:	4618      	mov	r0, r3
 8007208:	b00b      	add	sp, #44	; 0x2c
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720c:	1e58      	subs	r0, r3, #1
 800720e:	4684      	mov	ip, r0
 8007210:	fbb5 f7f2 	udiv	r7, r5, r2
 8007214:	fb02 5617 	mls	r6, r2, r7, r5
 8007218:	3628      	adds	r6, #40	; 0x28
 800721a:	446e      	add	r6, sp
 800721c:	460c      	mov	r4, r1
 800721e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007222:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007226:	462e      	mov	r6, r5
 8007228:	42b2      	cmp	r2, r6
 800722a:	f101 0101 	add.w	r1, r1, #1
 800722e:	463d      	mov	r5, r7
 8007230:	d9ee      	bls.n	8007210 <__utoa+0x40>
 8007232:	2200      	movs	r2, #0
 8007234:	545a      	strb	r2, [r3, r1]
 8007236:	1919      	adds	r1, r3, r4
 8007238:	1aa5      	subs	r5, r4, r2
 800723a:	42aa      	cmp	r2, r5
 800723c:	dae3      	bge.n	8007206 <__utoa+0x36>
 800723e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007242:	780e      	ldrb	r6, [r1, #0]
 8007244:	7006      	strb	r6, [r0, #0]
 8007246:	3201      	adds	r2, #1
 8007248:	f801 5901 	strb.w	r5, [r1], #-1
 800724c:	e7f4      	b.n	8007238 <__utoa+0x68>
 800724e:	bf00      	nop
 8007250:	080eb2dc 	.word	0x080eb2dc

08007254 <memset>:
 8007254:	4402      	add	r2, r0
 8007256:	4603      	mov	r3, r0
 8007258:	4293      	cmp	r3, r2
 800725a:	d100      	bne.n	800725e <memset+0xa>
 800725c:	4770      	bx	lr
 800725e:	f803 1b01 	strb.w	r1, [r3], #1
 8007262:	e7f9      	b.n	8007258 <memset+0x4>

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4d0d      	ldr	r5, [pc, #52]	; (800729c <__libc_init_array+0x38>)
 8007268:	4c0d      	ldr	r4, [pc, #52]	; (80072a0 <__libc_init_array+0x3c>)
 800726a:	1b64      	subs	r4, r4, r5
 800726c:	10a4      	asrs	r4, r4, #2
 800726e:	2600      	movs	r6, #0
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	4d0b      	ldr	r5, [pc, #44]	; (80072a4 <__libc_init_array+0x40>)
 8007276:	4c0c      	ldr	r4, [pc, #48]	; (80072a8 <__libc_init_array+0x44>)
 8007278:	f000 f818 	bl	80072ac <_init>
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	2600      	movs	r6, #0
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	080eb30c 	.word	0x080eb30c
 80072a0:	080eb30c 	.word	0x080eb30c
 80072a4:	080eb30c 	.word	0x080eb30c
 80072a8:	080eb310 	.word	0x080eb310

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
